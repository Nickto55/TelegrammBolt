#!/usr/bin/env python3
"""
üîß –£–¢–ò–õ–ò–¢–´ TelegrammBolt
–ù–∞–±–æ—Ä –ø–æ–ª–µ–∑–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""
import os
import sys
import json
import subprocess
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent.parent))

class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    BOLD = '\033[1m'
    END = '\033[0m'

def print_header(msg):
    print(f"\n{Colors.BLUE}{Colors.BOLD}{'='*70}{Colors.END}")
    print(f"{Colors.BLUE}{Colors.BOLD}{msg:^70}{Colors.END}")
    print(f"{Colors.BLUE}{Colors.BOLD}{'='*70}{Colors.END}\n")

def print_success(msg):
    print(f"{Colors.GREEN}‚úì{Colors.END} {msg}")

def print_warning(msg):
    print(f"{Colors.YELLOW}‚ö†{Colors.END} {msg}")

def print_error(msg):
    print(f"{Colors.RED}‚úó{Colors.END} {msg}")

def print_info(msg):
    print(f"{Colors.BLUE}‚Ñπ{Colors.END} {msg}")


# ============================================================================
# 1. –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´
# ============================================================================

def check_system():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    print_header("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ bot_data.json
    print_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ bot_data.json...")
    try:
        with open('data/bot_data.json', 'r', encoding='utf-8') as f:
            bot_data = json.load(f)
        
        total = sum(len(records) for records in bot_data.values())
        print_success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(bot_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {total} –∑–∞—è–≤–æ–∫")
    except FileNotFoundError:
        issues.append("data/bot_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print_error("data/bot_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except json.JSONDecodeError as e:
        issues.append(f"data/bot_data.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: {e}")
        print_error(f"–û—à–∏–±–∫–∞ JSON: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    try:
        with open('config/ven_bot.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        if not config.get('BOT_TOKEN') or config.get('BOT_TOKEN') == 'YOUR_BOT_TOKEN_HERE':
            issues.append("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            print_warning("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        else:
            print_success("BOT_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if not config.get('ADMIN_IDS'):
            issues.append("ADMIN_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            print_warning("ADMIN_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        else:
            print_success(f"ADMIN_IDS: {config.get('ADMIN_IDS')}")
            
    except FileNotFoundError:
        issues.append("config/ven_bot.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print_error("config/ven_bot.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except json.JSONDecodeError as e:
        issues.append(f"config/ven_bot.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: {e}")
        print_error(f"–û—à–∏–±–∫–∞ JSON: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    required = ['telegram', 'flask', 'openpyxl', 'reportlab', 'nest_asyncio']
    missing = []
    
    for module in required:
        try:
            __import__(module)
        except ImportError:
            missing.append(module)
    
    if missing:
        issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {', '.join(missing)}")
        print_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}")
    else:
        print_success("–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    print_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    try:
        if os.name == 'nt':  # Windows
            result = subprocess.run(['tasklist'], capture_output=True, text=True)
            output = result.stdout
        else:  # Linux/Mac
            result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
            output = result.stdout
        
        bot_running = 'bot.py' in output or 'python' in output
        web_running = 'web_app.py' in output
        
        if bot_running:
            print_success("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        else:
            print_warning("–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        
        if web_running:
            print_success("–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω")
        else:
            print_warning("–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            
    except Exception as e:
        print_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã: {e}")
    
    # –ò—Ç–æ–≥–∏
    print()
    if issues:
        print_error(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}")
        for issue in issues:
            print(f"  ‚Ä¢ {issue}")
        print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if any('BOT_TOKEN' in i for i in issues):
            print("  ‚Üí –ù–∞—Å—Ç—Ä–æ–π—Ç–µ config/ven_bot.json")
        if any('–º–æ–¥—É–ª–∏' in i for i in issues):
            print("  ‚Üí –ó–∞–ø—É—Å—Ç–∏—Ç–µ: pip install -r requirements.txt")
        if any('bot_data.json' in i for i in issues):
            print("  ‚Üí –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª: python install.py")
    else:
        print_success("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤ –ø–æ—Ä—è–¥–∫–µ!")
    
    return len(issues) == 0


# ============================================================================
# 2. –ü–û–ò–°–ö –ó–ê–Ø–í–ö–ò
# ============================================================================

def find_dse(dse_id):
    """–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ –ø–æ ID"""
    print_header(f"üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏: {dse_id}")
    
    try:
        with open('data/bot_data.json', 'r', encoding='utf-8') as f:
            bot_data = json.load(f)
    except FileNotFoundError:
        print_error("data/bot_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    except json.JSONDecodeError as e:
        print_error(f"–û—à–∏–±–∫–∞ JSON: {e}")
        return False
    
    # –ü–æ–∏—Å–∫
    found = False
    for user_id, records in bot_data.items():
        for i, record in enumerate(records, 1):
            generated_id = f"{user_id}_{i}"
            record_dse = record.get('dse', '')
            
            if (str(generated_id) == str(dse_id) or 
                str(record_dse) == str(dse_id) or
                str(record.get('id', '')) == str(dse_id)):
                
                found = True
                print_success("–ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞!")
                print(f"\n  User ID: {user_id}")
                print(f"  Generated ID: {generated_id}")
                print(f"  DSE Number: {record_dse}")
                print(f"  Problem Type: {record.get('problem_type', 'N/A')}")
                print(f"  DateTime: {record.get('datetime', 'N/A')}")
                print(f"  RC: {record.get('rc', 'N/A')}")
                print(f"  Has Photo: {'photo_file_id' in record or 'photos' in record}")
                print(f"\n–ü–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å:")
                print(json.dumps(record, ensure_ascii=False, indent=2))
                return True
    
    if not found:
        print_error(f"–ó–∞—è–≤–∫–∞ '{dse_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ ID:")
        for user_id, records in bot_data.items():
            for i, record in enumerate(records[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"  ‚Ä¢ {user_id}_{i} (DSE: {record.get('dse', 'N/A')})")
            if len(records) > 5:
                print(f"  ... –∏ –µ—â—ë {len(records) - 5} –∑–∞—è–≤–æ–∫")
    
    return found


# ============================================================================
# 3. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ù–´–•
# ============================================================================

def diagnose_data():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö"""
    print_header("üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        with open('data/bot_data.json', 'r', encoding='utf-8') as f:
            bot_data = json.load(f)
    except FileNotFoundError:
        print_error("data/bot_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    except json.JSONDecodeError as e:
        print_error(f"–û—à–∏–±–∫–∞ JSON: {e}")
        return False
    
    total_users = len(bot_data)
    total_records = sum(len(records) for records in bot_data.values())
    records_with_photos = 0
    problematic = []
    
    print_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
    print_info(f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_records}")
    print()
    
    # –ê–Ω–∞–ª–∏–∑
    for user_id, records in bot_data.items():
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {len(records)} –∑–∞—è–≤–æ–∫")
        
        for i, record in enumerate(records, 1):
            # –ü–æ–¥—Å—á–µ—Ç —Ñ–æ—Ç–æ
            if record.get('photo_file_id') or record.get('photos'):
                records_with_photos += 1
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required = ['dse', 'problem_type', 'datetime']
            missing = [f for f in required if not record.get(f)]
            
            if missing:
                problematic.append({
                    'user_id': user_id,
                    'index': i,
                    'dse': record.get('dse', 'N/A'),
                    'missing': missing
                })
    
    print()
    print_info(f"–ó–∞—è–≤–æ–∫ —Å —Ñ–æ—Ç–æ: {records_with_photos}")
    print_info(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(problematic)}")
    
    if problematic:
        print()
        print_warning("–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        for p in problematic[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"  ‚Ä¢ User {p['user_id']}, –∑–∞–ø–∏—Å—å #{p['index']} (DSE: {p['dse']})")
            print(f"    –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {', '.join(p['missing'])}")
        
        if len(problematic) > 10:
            print(f"  ... –∏ –µ—â—ë {len(problematic) - 10} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
    else:
        print_success("\n‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
    
    return len(problematic) == 0


# ============================================================================
# 4. –ü–û–ö–ê–ó–ê–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ò –†–û–õ–ò
# ============================================================================

def show_users():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Ä–æ–ª–∏"""
    print_header("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    try:
        with open('data/users_data.json', 'r', encoding='utf-8') as f:
            users_data = json.load(f)
    except FileNotFoundError:
        print_error("data/users_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    except json.JSONDecodeError as e:
        print_error(f"–û—à–∏–±–∫–∞ JSON: {e}")
        return False
    
    if not users_data:
        print_warning("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return True
    
    print(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}\n")
    
    for user_id, user_info in users_data.items():
        role = user_info.get('role', 'user')
        name = user_info.get('name', 'N/A')
        dept = user_info.get('department', 'N/A')
        
        role_icon = {
            'admin': 'üëë',
            'responder': 'üíº',
            'initiator': 'üìù',
            'user': 'üë§'
        }.get(role, 'üë§')
        
        print(f"{role_icon} {name}")
        print(f"   ID: {user_id}")
        print(f"   –†–æ–ª—å: {role}")
        print(f"   –û—Ç–¥–µ–ª: {dept}")
        print()
    
    return True


# ============================================================================
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
# ============================================================================

def show_menu():
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É—Ç–∏–ª–∏—Ç"""
    print("\n" + "="*70)
    print(f"{Colors.BOLD}{'üîß –£–¢–ò–õ–ò–¢–´ TelegrammBolt':^70}{Colors.END}")
    print("="*70 + "\n")
    
    print("1. üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    print("2. üîé –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É –ø–æ ID")
    print("3. üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("4. üë• –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("0. ‚ùå –í—ã—Ö–æ–¥")
    print()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    script_dir = Path(__file__).parent
    os.chdir(script_dir.parent)
    
    if len(sys.argv) > 1:
        # –†–µ–∂–∏–º –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        command = sys.argv[1].lower()
        
        if command == 'check' or command == 'status':
            return 0 if check_system() else 1
        
        elif command == 'find' and len(sys.argv) > 2:
            dse_id = sys.argv[2]
            return 0 if find_dse(dse_id) else 1
        
        elif command == 'diagnose':
            return 0 if diagnose_data() else 1
        
        elif command == 'users':
            return 0 if show_users() else 1
        
        else:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python utils.py check        - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
            print("  python utils.py find <ID>    - –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É")
            print("  python utils.py diagnose     - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            print("  python utils.py users        - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return 1
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    while True:
        show_menu()
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
        
        if choice == '1':
            check_system()
        elif choice == '2':
            dse_id = input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏: ").strip()
            if dse_id:
                find_dse(dse_id)
        elif choice == '3':
            diagnose_data()
        elif choice == '4':
            show_users()
        elif choice == '0':
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!\n")
            break
        else:
            print_warning("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    return 0

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print(f"\n\n{Colors.YELLOW}‚ö† –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.END}\n")
        sys.exit(0)
    except Exception as e:
        print(f"\n{Colors.RED}‚ùå –û—à–∏–±–∫–∞: {e}{Colors.END}\n")
        import traceback
        traceback.print_exc()
        sys.exit(1)
