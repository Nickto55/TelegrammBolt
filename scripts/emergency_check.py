#!/usr/bin/env python3
"""
–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ - —á—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å?
"""
import json
import os
import sys
from datetime import datetime

print("=" * 70)
print("  üî• –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê - –ß–¢–û –°–õ–û–ú–ê–õ–û–°–¨?")
print("=" * 70)
print()

issues_found = []

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ bot_data.json
print("1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ bot_data.json...")
try:
    with open('bot_data.json', 'r', encoding='utf-8') as f:
        bot_data = json.load(f)
    
    total_records = sum(len(records) for records in bot_data.values())
    print(f"   ‚úì –§–∞–π–ª —á–∏—Ç–∞–µ—Ç—Å—è: {len(bot_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {total_records} –∑–∞—è–≤–æ–∫")
    
    # –ò—â–µ–º –∑–∞—è–≤–∫—É Hshd
    found_hshd = False
    for user_id, records in bot_data.items():
        for i, record in enumerate(records, 1):
            if (record.get('dse') == 'Hshd' or 
                record.get('id') == 'Hshd' or
                f"{user_id}_{i}" == 'Hshd'):
                found_hshd = True
                print(f"   ‚úì –ó–∞—è–≤–∫–∞ 'Hshd' –Ω–∞–π–¥–µ–Ω–∞: user={user_id}, index={i}")
                print(f"     DSE: {record.get('dse')}")
                print(f"     Problem: {record.get('problem_type')}")
                print(f"     DateTime: {record.get('datetime')}")
                break
    
    if not found_hshd:
        issues_found.append("–ó–∞—è–≤–∫–∞ 'Hshd' –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ bot_data.json")
        print("   ‚ùå –ó–∞—è–≤–∫–∞ 'Hshd' –ù–ï –ù–ê–ô–î–ï–ù–ê!")
        print("   –î–æ—Å—Ç—É–ø–Ω—ã–µ ID –∑–∞—è–≤–æ–∫:")
        for user_id, records in bot_data.items():
            for i, record in enumerate(records, 1):
                print(f"     - {user_id}_{i} (DSE: {record.get('dse', 'N/A')})")
                if i >= 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    print(f"     ... –∏ –µ—â–µ {len(records) - 3} –∑–∞—è–≤–æ–∫")
                    break
                    
except FileNotFoundError:
    issues_found.append("bot_data.json –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢")
    print("   ‚ùå bot_data.json –ù–ï –ù–ê–ô–î–ï–ù!")
except json.JSONDecodeError as e:
    issues_found.append(f"bot_data.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: {e}")
    print(f"   ‚ùå –û–®–ò–ë–ö–ê JSON: {e}")
except Exception as e:
    issues_found.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è bot_data.json: {e}")
    print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")

print()

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
print("2Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö...")
log_files = ['web.log', 'bot.log']
found_recent_errors = False

for log_file in log_files:
    if os.path.exists(log_file):
        try:
            with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                lines = f.readlines()
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
            recent_errors = [line for line in lines[-50:] 
                           if 'ERROR' in line or 'Exception' in line or '500' in line]
            
            if recent_errors:
                found_recent_errors = True
                print(f"   ‚ö†Ô∏è  {log_file}: –Ω–∞–π–¥–µ–Ω–æ {len(recent_errors)} –æ—à–∏–±–æ–∫")
                print("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—à–∏–±–∫–∏:")
                for err in recent_errors[-3:]:
                    print(f"     {err.strip()}")
                issues_found.append(f"{log_file}: {len(recent_errors)} –æ—à–∏–±–æ–∫")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {log_file}: {e}")

if not found_recent_errors:
    print("   ‚úì –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

print()

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ config.py
print("3Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ config.py...")
try:
    import config.config as config
    
    checks = {
        'BOT_TOKEN': bool(getattr(config, 'BOT_TOKEN', None)),
        'SECRET_KEY': bool(getattr(config, 'SECRET_KEY', None)),
        'PROBLEM_TYPES': bool(getattr(config, 'PROBLEM_TYPES', None)),
    }
    
    for key, value in checks.items():
        status = "‚úì" if value else "‚ùå"
        print(f"   {status} {key}: {'OK' if value else '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
        if not value:
            issues_found.append(f"config.py: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key}")
            
except ImportError:
    issues_found.append("config.py –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
    print("   ‚ùå config.py –ù–ï –ù–ê–ô–î–ï–ù –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏!")
except Exception as e:
    issues_found.append(f"–û—à–∏–±–∫–∞ config.py: {e}")
    print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")

print()

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
print("4Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
try:
    import subprocess
    result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
    
    web_processes = [line for line in result.stdout.split('\n') 
                     if 'web_app' in line or 'gunicorn' in line and 'grep' not in line]
    
    if web_processes:
        print(f"   ‚úì –ù–∞–π–¥–µ–Ω–æ {len(web_processes)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞")
        for proc in web_processes:
            print(f"     {proc}")
    else:
        issues_found.append("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –ù–ï –ó–ê–ü–£–©–ï–ù")
        print("   ‚ùå –í–µ–±-—Å–µ—Ä–≤–µ—Ä –ù–ï –ó–ê–ü–£–©–ï–ù!")
except Exception as e:
    print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã: {e}")

print()

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
print("5Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
required = ['flask', 'telegram', 'openpyxl', 'reportlab', 'nest_asyncio']
missing = []

for package in required:
    try:
        __import__(package)
        print(f"   ‚úì {package}")
    except ImportError:
        missing.append(package)
        print(f"   ‚ùå {package} –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
        issues_found.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞–∫–µ—Ç: {package}")

print()

# –ò–¢–û–ì–ò
print("=" * 70)
print("  üìä –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
print("=" * 70)
print()

if not issues_found:
    print("‚úÖ –í–°–Å –í –ü–û–†–Ø–î–ö–ï!")
    print("   –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π.")
    print()
    print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("  1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: bash restart_web.sh")
    print("  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f web.log")
else:
    print(f"‚ùå –ù–ê–ô–î–ï–ù–û {len(issues_found)} –ü–†–û–ë–õ–ï–ú:")
    print()
    for i, issue in enumerate(issues_found, 1):
        print(f"  {i}. {issue}")
    
    print()
    print("üîß –ß–¢–û –î–ï–õ–ê–¢–¨:")
    print()
    
    if any('Hshd' in issue for issue in issues_found):
        print("  ‚Üí –ó–∞—è–≤–∫–∞ 'Hshd' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –¥—Ä—É–≥—É—é –∑–∞—è–≤–∫—É")
        print("    –î–æ—Å—Ç—É–ø–Ω—ã–µ ID —É–∫–∞–∑–∞–Ω—ã –≤—ã—à–µ")
        print()
    
    if any('bot_data.json' in issue for issue in issues_found):
        print("  ‚Üí –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∞–π–ª–æ–º –¥–∞–Ω–Ω—ã—Ö")
        print("    –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: python3 diagnose_dse.py")
        print()
    
    if any('–ù–ï –ó–ê–ü–£–©–ï–ù' in issue for issue in issues_found):
        print("  ‚Üí –í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("    –ó–∞–ø—É—Å—Ç–∏—Ç–µ: bash restart_web.sh")
        print()
    
    if missing:
        print("  ‚Üí –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        print("    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip3 install -r requirements.txt")
        print()
    
    if any('ERROR' in issue or 'Exception' in issue for issue in issues_found):
        print("  ‚Üí –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö")
        print("    –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ: tail -100 web.log | grep ERROR")
        print()

print("=" * 70)
print()
