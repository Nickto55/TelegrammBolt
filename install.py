#!/usr/bin/env python3
"""
üöÄ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –£–°–¢–ê–ù–û–í–©–ò–ö TelegrammBolt
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ + –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""
import os
import sys
import json
import subprocess
import shutil
from pathlib import Path

class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    BOLD = '\033[1m'
    END = '\033[0m'

def print_header(msg):
    print(f"\n{Colors.BLUE}{Colors.BOLD}{'='*70}{Colors.END}")
    print(f"{Colors.BLUE}{Colors.BOLD}{msg:^70}{Colors.END}")
    print(f"{Colors.BLUE}{Colors.BOLD}{'='*70}{Colors.END}\n")

def print_success(msg):
    print(f"{Colors.GREEN}‚úì{Colors.END} {msg}")

def print_warning(msg):
    print(f"{Colors.YELLOW}‚ö†{Colors.END} {msg}")

def print_error(msg):
    print(f"{Colors.RED}‚úó{Colors.END} {msg}")

def print_info(msg):
    print(f"{Colors.BLUE}‚Ñπ{Colors.END} {msg}")

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ Python")
    
    version = sys.version_info
    print_info(f"Python {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print_error("–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ!")
        return False
    
    print_success("–í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç")
    return True

def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print_header("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    if not os.path.exists('requirements.txt'):
        print_error("–§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    try:
        print_info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ requirements.txt...")
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt', '--quiet'])
        print_success("–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except subprocess.CalledProcessError as e:
        print_error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        return False

def create_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print_header("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
    
    directories = [
        'data',
        'photos/temp',
        'config',
        'logs'
    ]
    
    for directory in directories:
        try:
            os.makedirs(directory, exist_ok=True)
            print_success(f"–°–æ–∑–¥–∞–Ω–∞: {directory}/")
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {directory}: {e}")
            return False
    
    return True

def create_config_files():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print_header("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    # 1. ven_bot.json
    ven_bot_path = 'config/ven_bot.json'
    if not os.path.exists(ven_bot_path):
        print_info("–°–æ–∑–¥–∞—ë–º config/ven_bot.json...")
        
        bot_token = input(f"\n{Colors.YELLOW}–í–≤–µ–¥–∏—Ç–µ BOT_TOKEN (–æ—Ç @BotFather):{Colors.END} ").strip()
        
        if not bot_token:
            print_warning("–¢–æ–∫–µ–Ω –Ω–µ –≤–≤–µ–¥—ë–Ω, —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª —Å –∑–∞–≥–ª—É—à–∫–æ–π")
            bot_token = "YOUR_BOT_TOKEN_HERE"
        
        admin_id = input(f"{Colors.YELLOW}–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID (admin):{Colors.END} ").strip()
        
        if not admin_id or not admin_id.isdigit():
            print_warning("ID –Ω–µ –≤–≤–µ–¥—ë–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É")
            admin_id = "123456789"
        
        config_data = {
            "BOT_TOKEN": bot_token,
            "BOT_USERNAME": "@your_bot",
            "ADMIN_IDS": [int(admin_id)]
        }
        
        try:
            with open(ven_bot_path, 'w', encoding='utf-8') as f:
                json.dump(config_data, f, indent=2, ensure_ascii=False)
            print_success(f"–°–æ–∑–¥–∞–Ω: {ven_bot_path}")
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {ven_bot_path}: {e}")
            return False
    else:
        print_info(f"{ven_bot_path} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # 2. smtp_config.json (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    smtp_path = 'config/smtp_config.json'
    if not os.path.exists(smtp_path):
        print_info("\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ email (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å - –Ω–∞–∂–º–∏—Ç–µ Enter)")
        
        smtp_server = input(f"{Colors.YELLOW}SMTP —Å–µ—Ä–≤–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä smtp.gmail.com):{Colors.END} ").strip()
        
        if smtp_server:
            smtp_port = input(f"{Colors.YELLOW}SMTP –ø–æ—Ä—Ç (–æ–±—ã—á–Ω–æ 587):{Colors.END} ").strip() or "587"
            smtp_user = input(f"{Colors.YELLOW}Email –∞–¥—Ä–µ—Å:{Colors.END} ").strip()
            smtp_pass = input(f"{Colors.YELLOW}–ü–∞—Ä–æ–ª—å:{Colors.END} ").strip()
            
            smtp_data = {
                "SMTP_SERVER": smtp_server,
                "SMTP_PORT": int(smtp_port),
                "SMTP_USER": smtp_user,
                "SMTP_PASSWORD": smtp_pass
            }
            
            try:
                with open(smtp_path, 'w', encoding='utf-8') as f:
                    json.dump(smtp_data, f, indent=2)
                print_success(f"–°–æ–∑–¥–∞–Ω: {smtp_path}")
            except Exception as e:
                print_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {smtp_path}: {e}")
        else:
            print_warning("Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∑–∂–µ)")
    else:
        print_info(f"{smtp_path} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    return True

def create_data_files():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    print_header("–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
    
    data_files = {
        'data/bot_data.json': {},
        'data/users_data.json': {},
        'data/chat_data.json': {},
        'data/watched_dse.json': {}
    }
    
    for file_path, default_data in data_files.items():
        if not os.path.exists(file_path):
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(default_data, f, indent=2)
                print_success(f"–°–æ–∑–¥–∞–Ω: {file_path}")
            except Exception as e:
                print_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {file_path}: {e}")
                return False
        else:
            print_info(f"{file_path} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    return True

def create_startup_scripts():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞"""
    print_header("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞")
    
    # –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (Linux/Mac)
    start_bot_sh = """#!/bin/bash
# –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ TelegrammBolt

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–∞–ø–∫—É –±–æ—Ç–∞
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
if [ -d ".venv" ]; then
    source .venv/bin/activate
elif [ -d "venv" ]; then
    source venv/bin/activate
fi

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
echo "ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞..."
cd bot
python3 bot.py
"""
    
    # –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –≤–µ–±–∞ (Linux/Mac)
    start_web_sh = """#!/bin/bash
# –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ TelegrammBolt

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
if [ -d ".venv" ]; then
    source .venv/bin/activate
elif [ -d "venv" ]; then
    source venv/bin/activate
fi

# –ó–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
echo "üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞..."
cd web
python3 web_app.py
"""
    
    # –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (Windows)
    start_bot_bat = """@echo off
REM –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞

cd /d "%~dp0bot"
python bot.py
pause
"""
    
    # –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –≤–µ–±–∞ (Windows)
    start_web_bat = """@echo off
REM –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

cd /d "%~dp0web"
python web_app.py
pause
"""
    
    scripts = {
        'start_bot.sh': start_bot_sh,
        'start_web.sh': start_web_sh,
        'start_bot.bat': start_bot_bat,
        'start_web.bat': start_web_bat,
    }
    
    for filename, content in scripts.items():
        try:
            with open(filename, 'w', encoding='utf-8', newline='\n' if filename.endswith('.sh') else None) as f:
                f.write(content)
            
            # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –¥–ª—è .sh —Ñ–∞–π–ª–æ–≤
            if filename.endswith('.sh') and os.name != 'nt':
                os.chmod(filename, 0o755)
            
            print_success(f"–°–æ–∑–¥–∞–Ω: {filename}")
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {filename}: {e}")
    
    return True

def test_installation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print_header("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    required_modules = [
        'telegram',
        'flask',
        'openpyxl',
        'reportlab',
        'nest_asyncio'
    ]
    
    all_ok = True
    for module in required_modules:
        try:
            __import__(module)
            print_success(f"–ú–æ–¥—É–ª—å {module} –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        except ImportError:
            print_error(f"–ú–æ–¥—É–ª—å {module} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            all_ok = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if os.path.exists('config/ven_bot.json'):
        try:
            with open('config/ven_bot.json', 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            if config.get('BOT_TOKEN') == 'YOUR_BOT_TOKEN_HERE':
                print_warning("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ config/ven_bot.json")
            else:
                print_success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ OK")
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            all_ok = False
    
    return all_ok

def print_final_instructions():
    """–§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    print_header("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    print(f"\n{Colors.GREEN}{Colors.BOLD}–ß—Ç–æ –¥–∞–ª—å—à–µ:{Colors.END}\n")
    
    print("1Ô∏è‚É£  –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:")
    print(f"   {Colors.YELLOW}nano config/ven_bot.json{Colors.END}")
    print("   –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à BOT_TOKEN –æ—Ç @BotFather\n")
    
    print("2Ô∏è‚É£  –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:")
    if os.name == 'nt':
        print(f"   {Colors.YELLOW}start_bot.bat{Colors.END}")
        print("   –∏–ª–∏")
        print(f"   {Colors.YELLOW}cd bot && python bot.py{Colors.END}\n")
    else:
        print(f"   {Colors.YELLOW}./start_bot.sh{Colors.END}")
        print("   –∏–ª–∏")
        print(f"   {Colors.YELLOW}cd bot && python3 bot.py{Colors.END}\n")
    
    print("3Ô∏è‚É£  –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:")
    if os.name == 'nt':
        print(f"   {Colors.YELLOW}start_web.bat{Colors.END}")
        print("   –∏–ª–∏")
        print(f"   {Colors.YELLOW}cd web && python web_app.py{Colors.END}\n")
    else:
        print(f"   {Colors.YELLOW}./start_web.sh{Colors.END}")
        print("   –∏–ª–∏")
        print(f"   {Colors.YELLOW}cd web && python3 web_app.py{Colors.END}\n")
    
    print("4Ô∏è‚É£  –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:")
    print(f"   {Colors.BLUE}http://localhost:5000{Colors.END}\n")
    
    print(f"\n{Colors.BLUE}üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:{Colors.END}")
    print("   README.md - –û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
    print("   docs/INSTALLATION.md - –£—Å—Ç–∞–Ω–æ–≤–∫–∞")
    print("   docs/TROUBLESHOOTING.md - –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º\n")
    
    print(f"{Colors.GREEN}‚ú® –ì–æ—Ç–æ–≤–æ! –£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã! ‚ú®{Colors.END}\n")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞"""
    
    print("\n" + "="*70)
    print(f"{Colors.BOLD}{'TelegrammBolt - –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫':^70}{Colors.END}")
    print("="*70 + "\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    if not os.path.exists('bot') or not os.path.exists('web'):
        print_error("–û—à–∏–±–∫–∞: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞!")
        print_info("–î–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–∞–ø–∫–∏: bot/ –∏ web/")
        return 1
    
    steps = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ Python", check_python_version),
        ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", install_dependencies),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", create_directories),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", create_config_files),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö", create_data_files),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞", create_startup_scripts),
        ("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", test_installation),
    ]
    
    for step_name, step_func in steps:
        if not step_func():
            print_error(f"\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –Ω–∞ —ç—Ç–∞–ø–µ: {step_name}")
            return 1
    
    print_final_instructions()
    return 0

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print(f"\n\n{Colors.YELLOW}‚ö† –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.END}\n")
        sys.exit(1)
    except Exception as e:
        print(f"\n{Colors.RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{Colors.END}\n")
        import traceback
        traceback.print_exc()
        sys.exit(1)
