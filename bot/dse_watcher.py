import json
import os
import asyncio
from typing import Dict, List, Set
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º load_data –∏–∑ config
from config.config import WATCHED_DSE_FILE, DATA_FILE, load_data as config_load_data

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –î–°–ï –≤ –ø–∞–º—è—Ç–∏
# –§–æ—Ä–º–∞—Ç: {user_id: set(dse_values)}. –•—Ä–∞–Ω–∏–º –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
watched_dse_data: Dict[str, Set[str]] = {}

# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ ID –∑–∞–ø–∏—Å–µ–π, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
# –§–æ—Ä–º–∞—Ç: {dse_value_lower: set(record_ids)}
last_known_records: Dict[str, Set[str]] = {}


def load_watched_dse_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –î–°–ï –∏–∑ —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç—å."""
    global watched_dse_data
    if os.path.exists(WATCHED_DSE_FILE):
        try:
            data = config_load_data(WATCHED_DSE_FILE)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–∏
            watched_dse_data = {user_id: {dse.strip().lower() for dse in dse_list} for user_id, dse_list in
                                data.items()}
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –î–°–ï –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {WATCHED_DSE_FILE}: {e}")
            watched_dse_data = {}
    else:
        watched_dse_data = {}
    return watched_dse_data


def save_watched_dse_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –î–°–ï –∏–∑ –ø–∞–º—è—Ç–∏ –≤ —Ñ–∞–π–ª."""
    global watched_dse_data
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON
    data_to_save = {user_id: list(dse_set) for user_id, dse_set in watched_dse_data.items()}
    try:
        with open(WATCHED_DSE_FILE, 'w', encoding='utf-8') as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=2)
        print("üíæ –î–∞–Ω–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –î–°–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {WATCHED_DSE_FILE}: {e}")


def add_watched_dse(user_id: str, dse_value: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –î–°–ï –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    global watched_dse_data
    dse_normalized = dse_value.strip().lower()  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–∏
    if user_id not in watched_dse_data:
        watched_dse_data[user_id] = set()
    watched_dse_data[user_id].add(dse_normalized)
    save_watched_dse_data()


def remove_watched_dse(user_id: str, dse_value: str):
    """–£–¥–∞–ª—è–µ—Ç –î–°–ï –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    global watched_dse_data
    dse_normalized = dse_value.strip().lower()  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–∏
    if user_id in watched_dse_data:
        watched_dse_data[user_id].discard(dse_normalized)
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—É—Å—Ç–µ–ª, –º–æ–∂–Ω–æ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å
        if not watched_dse_data[user_id]:
            del watched_dse_data[user_id]
        save_watched_dse_data()


def get_watched_dse_list(user_id: str) -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –î–°–ï, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    global watched_dse_data
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    return list(watched_dse_data.get(user_id, set()))


def get_all_watched_dse() -> Dict[str, Set[str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –î–°–ï."""
    global watched_dse_data
    return watched_dse_data


def _get_record_id(record: dict, user_id: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø–∏—Å–∏."""
    # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ID, –î–°–ï –∏ —Ö—ç—à –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    dse = record.get('dse', '')
    desc = record.get('description', '')
    # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞—Ç—å ID, –º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    # –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –î–°–ï
    dse_normalized = dse.strip().lower()
    return f"{user_id}_{dse_normalized}_{hash(desc)}"


async def check_for_new_dse_and_notify(context):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –î–°–ï –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏.
    """
    global last_known_records

    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –î–°–ï –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")

    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
    all_bot_data = config_load_data(DATA_FILE)

    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏
    current_watched = get_all_watched_dse()  # {user_id: set(dse_normalized)}

    if not current_watched:
        print("üì≠ –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –î–°–ï.")
        return

    # 3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –î–°–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–µ–º –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ DSE –≤ –æ–¥–∏–Ω –Ω–∞–±–æ—Ä –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    all_watched_dse_normalized = set()
    for dse_set in current_watched.values():
        all_watched_dse_normalized.update(dse_set)

    if not all_watched_dse_normalized:
        print("üì≠ –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –î–°–ï.")
        return

    print(f"üëÅÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –î–°–ï: {all_watched_dse_normalized}")

    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–π–¥–µ–º—Å—è –ø–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º –∏ –ø—Ä–æ–≤–µ—Ä–∏–º, –æ—Ç–Ω–æ—Å—è—Ç—Å—è –ª–∏ –æ–Ω–∏ –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º –î–°–ï
    # –ò —Å–æ–±–µ—Ä–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å—è—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –î–°–ï
    records_per_dse = {dse: [] for dse in all_watched_dse_normalized}
    record_ids_current = {dse: set() for dse in all_watched_dse_normalized}

    for data_user_id, user_records in all_bot_data.items():
        if isinstance(user_records, list):
            for record in user_records:
                record_dse_original = record.get('dse', '')
                if record_dse_original:
                    record_dse_normalized = record_dse_original.strip().lower()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –î–°–ï
                    if record_dse_normalized in all_watched_dse_normalized:
                        records_per_dse[record_dse_normalized].append((data_user_id, record))
                        record_id = _get_record_id(record, data_user_id)
                        record_ids_current[record_dse_normalized].add(record_id)

    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∂–¥–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–µ –î–°–ï –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
    for dse_normalized, current_record_ids in record_ids_current.items():
        previously_known_ids = last_known_records.get(dse_normalized, set())
        new_record_ids = current_record_ids - previously_known_ids

        if new_record_ids:
            print(f"üîî –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –î–°–ï '{dse_normalized}'")

            # –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç —ç—Ç–æ –î–°–ï
            users_to_notify = []
            for user_id, watched_set in current_watched.items():
                if dse_normalized in watched_set:
                    users_to_notify.append(user_id)

            # –°–æ–±–µ—Ä–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            new_records_info = []
            for data_user_id, record in records_per_dse[dse_normalized]:
                record_id = _get_record_id(record, data_user_id)
                if record_id in new_record_ids:
                    problem = record.get('problem_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                    desc = record.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:100] + "..." if len(
                        record.get('description', '')) > 100 else record.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                    from .user_manager import get_users_data
                    users_data = get_users_data()
                    user_info = users_data.get(data_user_id, {})
                    user_name = user_info.get('first_name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {data_user_id}")
                    new_records_info.append(f"‚Ä¢ –û—Ç: {user_name}\n  –¢–∏–ø: {problem}\n  –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n---")

            if new_records_info and users_to_notify:
                notification_text = f"üîî –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–º—É –î–°–ï '{dse_normalized.upper()}':\n\n" + "\n".join(
                    new_records_info)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                for user_id in users_to_notify:
                    try:
                        await context.bot.send_message(chat_id=user_id, text=notification_text)
                        print(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ –î–°–ï '{dse_normalized}'")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –î–°–ï '{dse_normalized}': {e}")
            elif users_to_notify:
                # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å—è—Ö –Ω–µ —Å–æ–±—Ä–∞–ª–∞—Å—å
                for user_id in users_to_notify:
                    try:
                        await context.bot.send_message(chat_id=user_id,
                                                       text=f"üîî –ü–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–º—É –î–°–ï '{dse_normalized.upper()}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –î–°–ï.")
                        print(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ –î–°–ï '{dse_normalized}'")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –î–°–ï '{dse_normalized}': {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –î–°–ï
        last_known_records[dse_normalized] = current_record_ids

    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –î–°–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
async def start_watcher_job(application):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –î–°–ï."""
    print("‚è±Ô∏è  –ó–∞–¥–∞—á–∞ DSE Watcher –∑–∞–ø—É—â–µ–Ω–∞.")
    async def periodic_check():
        while True:
            try:
                await check_for_new_dse_and_notify(application)
            except asyncio.CancelledError:
                # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                print("‚èπÔ∏è –ó–∞–¥–∞—á–∞ DSE Watcher –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                break
            except Exception as e:
                import traceback
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ DSE Watcher: {e}")
                print(traceback.format_exc())
            await asyncio.sleep(300) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ
    await periodic_check() # –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É, Application —É–ø—Ä–∞–≤–ª—è–µ—Ç –µ—é
