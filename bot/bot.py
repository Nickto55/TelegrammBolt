import asyncio
import logging
from .commands import start, button_handler, handle_message, cancel_photo_command, createwebuser_command, scan_command, invite_command, link_command, qr_photo_handler
from .dse_watcher import load_watched_dse_data, start_watcher_job
from config.config import BOT_TOKEN
from telegram.ext import Application, ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters


logger = logging.getLogger(__name__)


async def chat_command(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /chat"""
    from .chat_manager import show_chat_menu
    from .user_manager import has_permission
    user_id = str(update.effective_user.id)

    if has_permission(user_id, 'chat_dse'):
        await show_chat_menu(update, context)
    else:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞.")


async def end_chat_command(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /endchat"""
    from .chat_manager import end_chat_command
    from .user_manager import has_permission
    user_id = str(update.effective_user.id)

    if has_permission(user_id, 'chat_dse'):
        await end_chat_command(update, context)
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞.")


async def post_init(application) -> None:
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    print("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")

    load_watched_dse_data()

    try:
        loop = asyncio.get_running_loop()
        loop.create_task(start_watcher_job(application))
        logger.info("‚è±Ô∏è  –ó–∞–¥–∞—á–∞ DSE Watcher –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞")

        # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–æ–Ω–∏—Ç–æ—Ä–æ–º
        import sys
        import os
        sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))
        from monitor_integration import start_monitor_integration
        await start_monitor_integration(application)
        logger.info("üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞")

        logger.info("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        raise


def _register_handlers(app: Application) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    handlers = [
        CommandHandler("start", start),
        CommandHandler("chat", chat_command),
        CommandHandler("endchat", end_chat_command),
        CommandHandler("cancel_photo", cancel_photo_command),
        CommandHandler("createwebuser", createwebuser_command),
        CommandHandler("scan", scan_command),
        CommandHandler("invite", invite_command),
        CommandHandler("link", link_command),
        CallbackQueryHandler(button_handler),
        MessageHandler(filters.PHOTO, qr_photo_handler),  # –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ
        MessageHandler(filters.TEXT | filters.CAPTION, handle_message),
    ]
    
    for handler in handlers:
        app.add_handler(handler)
    
    logger.info(f"üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(handlers)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""


    # --- –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ ---
    app = ApplicationBuilder().token(BOT_TOKEN).post_init(post_init).build()
    _register_handlers(app)

    # --- –ó–∞–ø—É—Å–∫ web-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω ---
    import threading
    import json
    try:
        with open("ven_bot.json", "r", encoding="utf-8") as f:
            ven_cfg = json.load(f)
        web_enabled = ven_cfg.get("web_enabled", True)
        web_port = ven_cfg.get("web_port", 5000)
    except Exception:
        web_enabled = True
        web_port = 5000

    if web_enabled:
        def run_web():
            from web.web_app import app as flask_app
            flask_app.run(host="0.0.0.0", port=web_port, debug=False, use_reloader=False)
        threading.Thread(target=run_web, daemon=True).start()
        print(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {web_port}")

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("=" * 50)
    app.run_polling()


if __name__ == "__main__":
    main()