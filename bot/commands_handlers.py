from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime as dt

from bot.commands import show_main_menu, user_states, show_application_menu, show_problem_types, show_rc_types, \
    show_dse_list_menu, show_all_dse_records, start_interactive_dse_search, select_dse_from_search, start_dse_search, \
    show_dse_statistics, show_admin_menu, show_users_list, start_change_role_process, admin_states, start_data_export, \
    send_file_to_chat, request_email_address, test_smtp_connection, show_nicknames_menu, show_users_for_nickname, \
    show_nicknames_list, start_nickname_input, remove_nickname_confirm, show_watched_dse_menu, start_add_watched_dse, \
    start_remove_watched_dse, show_watched_dse_list, start_dse_chat_search_with_selection, dse_view_states, \
    show_search_results, handle_dse_search_input, show_role_selection_menu, send_file_by_email
from bot.dse_manager import get_unique_dse_values
from bot.user_manager import has_permission, get_user_role, set_user_role, ROLES, get_all_users, check_nickname_exists, \
    set_user_nickname
from config.config import PROBLEM_TYPES, RC_TYPES, save_data, load_data


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user = query.from_user
    user_id = str(user.id)
    
    # === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===
    if data == 'back_to_main':
        await show_main_menu(update, user_id)
    
    elif data == 'open_application':
        user_states[user_id]['application'] = 'started'
        await show_application_menu(update, user_id)
    
    # === –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò ===
    elif data == 'back_to_application':
        await show_application_menu(update, user_id)
    
    elif data == 'set_dse':
        user_states[user_id]['waiting_for'] = 'dse'
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –î–°–ï:")
    
    elif data == 'set_problem':
        await show_problem_types(update, user_id)
    
    elif data.startswith('problem_'):
        idx = int(data.split('_')[1])
        user_states[user_id]['problem_type'] = PROBLEM_TYPES[idx]
        await show_application_menu(update, user_id)
    
    elif data == 'set_rc':
        await show_rc_types(update, user_id)
    
    elif data.startswith('rc_'):
        idx = int(data.split('_')[1])
        user_states[user_id]['rc'] = RC_TYPES[idx]
        await show_application_menu(update, user_id)
    
    elif data == 'set_description':
        user_states[user_id]['waiting_for'] = 'description'
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
    
    elif data == 'set_photo':
        user_states[user_id]['waiting_for'] = 'photo'
        await query.edit_message_text(
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel_photo –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ —Ñ–æ—Ç–æ."
        )
    
    elif data == 'send':
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏
        user_data = user_states[user_id]
        record = {
            'dse': user_data['dse'],
            'problem_type': user_data['problem_type'],
            'rc': user_data['rc'],
            'description': user_data['description'],
            'datetime': dt.now().strftime('%Y-%m-%d %H:%M:%S'),
            'user_id': user_id,
            'photo_file_id': user_data.get('photo_file_id')
        }
        
        data_list = load_data()
        data_list.append(record)
        save_data(data_list)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = {
            'application': '',
            'dse': '',
            'problem_type': '',
            'description': '',
            'rc': '',
            'photo_file_id': None
        }
        
        await query.edit_message_text(
            "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
            f"–î–°–ï: {record['dse']}\n"
            f"–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: {record['problem_type']}\n"
            f"–†–¶: {record['rc']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {record['description']}\n"
            f"üìÖ –î–∞—Ç–∞: {record['datetime']}"
        )
        await show_main_menu(update, user_id)
    
    elif data == 'edit_application':
        await show_application_menu(update, user_id)
    
    # === –ü–†–û–°–ú–û–¢–† –î–°–ï ===
    elif data == 'view_dse_list':
        if has_permission(user_id, 'view_dse_list'):
            await show_dse_list_menu(update, context)
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –î–°–ï.")
    
    elif data == 'view_all_dse':
        await show_all_dse_records(update, context, page=0)
    
    elif data.startswith('page_'):
        page = int(data.split('_')[1])
        await show_all_dse_records(update, context, page=page)
    
    elif data == 'interactive_dse_search':
        await start_interactive_dse_search(update, context)
    
    elif data.startswith('dse_search_select_'):
        idx = int(data.split('_')[-1])
        await select_dse_from_search(update, context, idx)
    
    elif data == 'search_dse':
        await start_dse_search(update, context, 'dse')
    
    elif data == 'search_type':
        await start_dse_search(update, context, 'type')
    
    elif data == 'dse_statistics':
        await show_dse_statistics(update, context)
    
    # === –ê–î–ú–ò–ù –ú–ï–ù–Æ ===
    elif data == 'admin_users':
        if get_user_role(user_id) == 'admin':
            await show_admin_menu(update, context)
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    elif data == 'admin_list_users':
        if get_user_role(user_id) == 'admin':
            await show_users_list(update, context)
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    elif data == 'admin_change_role_start':
        if get_user_role(user_id) == 'admin':
            await start_change_role_process(update, context, user_id)
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    elif data.startswith('role_'):
        if get_user_role(user_id) == 'admin':
            role_name = data.split('_', 1)[1]
            if user_id in admin_states and 'changing_role_for' in admin_states[user_id]:
                target_user_id = admin_states[user_id]['changing_role_for']
                set_user_role(target_user_id, role_name)
                admin_states[user_id].pop('changing_role_for', None)
                admin_states[user_id].pop('changing_role', None)
                await query.edit_message_text(f"‚úÖ –†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {ROLES[role_name]}")
                await show_admin_menu(update, context)
    
    elif data == 'admin_export_data':
        if get_user_role(user_id) == 'admin':
            await start_data_export(update, context)
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –≠–ö–°–ü–û–†–¢–ê === (–ù–û–í–´–ï)
    elif data == 'export_send_chat':
        if get_user_role(user_id) == 'admin':
            await send_file_to_chat(update, context)
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    elif data == 'export_send_email_excel':
        if get_user_role(user_id) == 'admin':
            await request_email_address(update, context, format_type="excel")
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    elif data == 'export_send_email_text':
        if get_user_role(user_id) == 'admin':
            await request_email_address(update, context, format_type="text")
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    elif data == 'admin_test_smtp':
        if get_user_role(user_id) == 'admin':
            await test_smtp_connection(update, context)
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    elif data == 'admin_manage_nicknames':
        if get_user_role(user_id) == 'admin':
            await show_nicknames_menu(update, context)
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    elif data == 'nickname_set':
        if get_user_role(user_id) == 'admin':
            await show_users_for_nickname(update, context, 'set')
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    elif data == 'nickname_remove':
        if get_user_role(user_id) == 'admin':
            await show_users_for_nickname(update, context, 'remove')
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    elif data == 'nickname_list':
        if get_user_role(user_id) == 'admin':
            await show_nicknames_list(update, context)
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    elif data.startswith('nickname_set_user_'):
        if get_user_role(user_id) == 'admin':
            target_user_id = data.split('_')[-1]
            await start_nickname_input(update, context, target_user_id)
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    elif data.startswith('nickname_remove_user_'):
        if get_user_role(user_id) == 'admin':
            target_user_id = data.split('_')[-1]
            await remove_nickname_confirm(update, context, target_user_id)
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    # === –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –î–°–ï ===
    elif data == 'watch_dse_menu':
        await show_watched_dse_menu(update, context)
    
    elif data == 'watch_add_dse':
        await start_add_watched_dse(update, context)
    
    elif data == 'watch_remove_dse':
        await start_remove_watched_dse(update, context)
    
    elif data.startswith('watch_rm_idx_'):
        idx = int(data.split('_')[-1])
        from .dse_watcher import get_watched_dse_list, remove_watched_dse
        watched_list = get_watched_dse_list(user_id)
        if 0 <= idx < len(watched_list):
            dse_to_remove = watched_list[idx]
            remove_watched_dse(user_id, dse_to_remove)
            await query.edit_message_text(f"‚úÖ –î–°–ï {dse_to_remove} —É–¥–∞–ª—ë–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
            await show_watched_dse_menu(update, context)
    
    elif data == 'watch_list':
        await show_watched_dse_list(update, context)
    
    elif data.startswith('watch_select_dse_'):
        idx_str = data.split('_')[-1]
        if idx_str == 'manual':
            user_states[user_id] = user_states.get(user_id, {})
            user_states[user_id]['watch_dse_state'] = 'awaiting_manual_input'
            await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –î–°–ï –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
        else:
            from .dse_watcher import add_watched_dse
            dse_list = get_unique_dse_values()
            idx = int(idx_str)
            if 0 <= idx < len(dse_list):
                dse_value = dse_list[idx]
                add_watched_dse(user_id, dse_value)
                await query.edit_message_text(f"‚úÖ –î–°–ï {dse_value} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!")
                await show_watched_dse_menu(update, context)
    
    # === –ß–ê–¢ –ü–û –î–°–ï ===
    elif data == 'chat_dse_menu':
        from .chat_manager import show_chat_menu
        await show_chat_menu(update, context)
    
    elif data == 'chat_start_search':
        await start_dse_chat_search_with_selection(update, context)
    
    elif data.startswith('chat_select_dse_'):
        idx_str = data.split('_')[-1]
        if idx_str == 'manual':
            user_states[user_id] = user_states.get(user_id, {})
            user_states[user_id]['dse_chat_state'] = 'awaiting_manual_input'
            await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –î–°–ï –¥–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞:")
        else:
            from .chat_manager import handle_dse_input
            dse_list = get_unique_dse_values()
            idx = int(idx_str)
            if 0 <= idx < len(dse_list):
                dse_value = dse_list[idx]
                # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                user_states[user_id] = user_states.get(user_id, {})
                user_states[user_id]['dse_chat_state'] = 'selecting_or_manual'
                # –í—ã–∑—ã–≤–∞–µ–º handle_dse_input —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –î–°–ï
                from .chat_manager import initiate_dse_chat_search
                user_states[user_id]['dse_chat_dse_value'] = dse_value
                await handle_dse_input(update, context)
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ß–ê–¢–ê (–∏–∑ chat_manager) ===
    elif data.startswith('chat_confirm_target_') or data.startswith('chat_decline_target_'):
        from .chat_manager import handle_initiator_confirmation
        await handle_initiator_confirmation(update, context)
    
    elif data.startswith('chat_accept_') or data.startswith('chat_decline_'):
        from .chat_manager import handle_responder_confirmation
        await handle_responder_confirmation(update, context)
    
    elif data in ['chat_end', 'chat_back']:
        from .chat_manager import handle_chat_control
        await handle_chat_control(update, context)
    
    # === PDF –≠–ö–°–ü–û–†–¢ ===
    elif data == 'pdf_export_menu':
        if has_permission(user_id, 'pdf_export'):
            from .pdf_generator import show_pdf_export_menu
            await show_pdf_export_menu(update, context)
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF.")
    
    # === –ü–û–ú–û–©–¨ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° –†–û–õ–¨–Æ 'USER' ===
    elif data == 'qr_help':
        help_text = (
            "üì∏ –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å QR –∫–æ–¥:\n\n"
            "1. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            "2. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç\n"
            "4. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–æ–¥\n\n"
            "üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ QR –∫–æ–¥ —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ!"
        )
        await query.edit_message_text(help_text, reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back_to_scan')]
        ]))
    
    elif data == 'commands_help':
        help_text = (
            "üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/invite –í–ê–®–ö–û–î - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ\n"
            "/link –í–ê–®–ö–û–î - –ü—Ä–∏–≤—è–∑–∞—Ç—å –≤–µ–±-–∞–∫–∫–∞—É–Ω—Ç\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üì± –ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /invite ABC123DEF456\n"
            "‚Ä¢ /link XYZ789\n\n"
            "‚ùì –ö–æ–¥—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        )
        await query.edit_message_text(help_text, reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back_to_scan')]
        ]))
    
    elif data == 'back_to_scan':
        from bot.commands import show_scan_menu
        await show_scan_menu(update, user_id)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ç–æ"""
    user = update.effective_user
    user_id = str(user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    if user_id in user_states:
        user_data = user_states[user_id]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        if update.message.photo:
            if user_data.get('waiting_for') == 'photo':
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
                photo_file_id = update.message.photo[-1].file_id
                user_states[user_id]['photo_file_id'] = photo_file_id
                user_states[user_id].pop('waiting_for', None)
                await update.message.reply_text("‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
                await show_application_menu(update, user_id)
                return
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
            elif 'dse_chat_state' in user_data:
                from .chat_manager import handle_chat_message
                await handle_chat_message(update, context)
                return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if update.message.text:
            text = update.message.text.strip()
            
            # === –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò ===
            if user_data.get('waiting_for') == 'dse':
                user_states[user_id]['dse'] = text
                user_states[user_id].pop('waiting_for', None)
                await update.message.reply_text(f"‚úÖ –î–°–ï —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {text}")
                await show_application_menu(update, user_id)
                return
            
            elif user_data.get('waiting_for') == 'description':
                user_states[user_id]['description'] = text
                user_states[user_id].pop('waiting_for', None)
                await update.message.reply_text(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                await show_application_menu(update, user_id)
                return
            
            # === –ü–û–ò–°–ö –î–°–ï ===
            elif user_id in dse_view_states:
                dse_state = dse_view_states[user_id]
                if dse_state.get('searching_dse'):
                    await show_search_results(update, context, text, 'dse')
                    dse_view_states[user_id].pop('searching_dse', None)
                    return
                elif dse_state.get('searching_type'):
                    await show_search_results(update, context, text, 'type')
                    dse_view_states[user_id].pop('searching_type', None)
                    return
                elif dse_state.get('interactive_search'):
                    await handle_dse_search_input(update, context)
                    return
            
            # === –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –î–°–ï ===
            elif user_data.get('watch_dse_state') == 'awaiting_manual_input':
                from .dse_watcher import add_watched_dse
                dse_value = text.strip().upper()
                add_watched_dse(user_id, dse_value)
                user_states[user_id].pop('watch_dse_state', None)
                await update.message.reply_text(f"‚úÖ –î–°–ï {dse_value} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!")
                await show_watched_dse_menu(update, context)
                return
            
            # === –ß–ê–¢ –ü–û –î–°–ï ===
            elif user_data.get('dse_chat_state') == 'awaiting_manual_input':
                from .chat_manager import handle_dse_input
                user_states[user_id]['dse_chat_dse_value'] = text.strip().upper()
                user_states[user_id]['dse_chat_state'] = 'selecting_or_manual'
                await handle_dse_input(update, context)
                return
            elif user_data.get('dse_chat_state') in ['waiting_for_initiator_confirmation', 'in_chat']:
                from .chat_manager import handle_chat_message
                await handle_chat_message(update, context)
                return
            
            # === –ê–î–ú–ò–ù: –ò–ó–ú–ï–ù–ï–ù–ò–ï –†–û–õ–ò ===
            elif user_id in admin_states and admin_states[user_id].get('changing_role'):
                target_user_id = text.strip()
                users = get_all_users()
                if target_user_id in users:
                    admin_states[user_id]['changing_role_for'] = target_user_id
                    admin_states[user_id].pop('changing_role', None)
                    await show_role_selection_menu(update, context, target_user_id)
                else:
                    await update.message.reply_text(
                        f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:"
                    )
                return
            
            # === –ê–î–ú–ò–ù: –£–°–¢–ê–ù–û–í–ö–ê –ö–õ–ò–ß–ö–ò ===
            elif user_id in admin_states and admin_states[user_id].get('setting_nickname'):
                nickname = text.strip()
                if len(nickname) > 20:
                    await update.message.reply_text("‚ùå –ö–ª–∏—á–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤).\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–ª–∏—á–∫—É:")
                    return
                
                if check_nickname_exists(nickname):
                    await update.message.reply_text(f"‚ùå –ö–ª–∏—á–∫–∞ '{nickname}' —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–ª–∏—á–∫—É:")
                    return
                
                target_user_id = admin_states[user_id].get('setting_nickname_for')
                if target_user_id:
                    set_user_nickname(target_user_id, nickname)
                    admin_states[user_id].pop('setting_nickname', None)
                    admin_states[user_id].pop('setting_nickname_for', None)
                    
                    users = get_all_users()
                    user_name = users.get(target_user_id, {}).get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    await update.message.reply_text(f"‚úÖ –ö–ª–∏—á–∫–∞ '{nickname}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {user_name}")
                    await show_nicknames_menu(update, context)
                return
            
            # === –ê–î–ú–ò–ù: EMAIL –ê–î–†–ï–° ===
            elif user_id in admin_states and admin_states[user_id].get('waiting_for_email'):
                email = text.strip()
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
                if '@' in email and '.' in email:
                    admin_states[user_id].pop('waiting_for_email', None)
                    await send_file_by_email(update, context, email)
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å.\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:"
                    )
                return
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."
    )


async def cancel_photo_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /cancel_photo - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ"""
    user_id = str(update.effective_user.id)
    
    if user_id in user_states:
        user_data = user_states[user_id]
        if user_data.get('waiting_for') == 'photo':
            user_states[user_id].pop('waiting_for', None)
            user_states[user_id]['photo_file_id'] = None
            await update.message.reply_text("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await show_application_menu(update, user_id)
            return
    
    await update.message.reply_text("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")
