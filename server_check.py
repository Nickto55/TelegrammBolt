#!/usr/bin/env python3
"""–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
import json
import os
import sys
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_bot_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ bot_data.json"""
    print("\n" + "="*50)
    print("–ü–†–û–í–ï–†–ö–ê bot_data.json")
    print("="*50)
    
    if not os.path.exists('bot_data.json'):
        print("‚ùå –û–®–ò–ë–ö–ê: bot_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    try:
        with open('bot_data.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        total_records = sum(len(records) for records in data.values())
        total_users = len(data.keys())
        
        print(f"‚úì –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
        print(f"  –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_records}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π
        problems = []
        records_with_photos = 0
        
        for user_id, records in data.items():
            for i, record in enumerate(records, 1):
                record_id = f"{user_id}_{i}"
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                if not record.get('dse'):
                    problems.append(f"{record_id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'dse'")
                if not record.get('problem_type'):
                    problems.append(f"{record_id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'problem_type'")
                if not record.get('datetime'):
                    problems.append(f"{record_id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'datetime'")
                
                # –ü–æ–¥—Å—á–µ—Ç —Ñ–æ—Ç–æ
                if record.get('photo_file_id') or record.get('photos'):
                    records_with_photos += 1
        
        print(f"  –ó–∞—è–≤–æ–∫ —Å —Ñ–æ—Ç–æ: {records_with_photos}")
        
        if problems:
            print(f"\n‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–û {len(problems)} –ü–†–û–ë–õ–ï–ú:")
            for p in problems[:10]:
                print(f"   - {p}")
            if len(problems) > 10:
                print(f"   ... –∏ –µ—â–µ {len(problems) - 10} –ø—Ä–æ–±–ª–µ–º")
            return False
        else:
            print("\n‚úì –í—Å–µ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            return True
            
    except json.JSONDecodeError as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê JSON: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        return False

def check_logs():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏"""
    print("\n" + "="*50)
    print("–ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í")
    print("="*50)
    
    log_files = ['web.log', 'bot.log', 'error.log']
    found_errors = False
    
    for log_file in log_files:
        if os.path.exists(log_file):
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
                errors = [line for line in lines[-100:] if 'ERROR' in line or 'Exception' in line or 'Traceback' in line]
                
                if errors:
                    print(f"\nüìã {log_file}: –Ω–∞–π–¥–µ–Ω–æ {len(errors)} –æ—à–∏–±–æ–∫")
                    print("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:")
                    for error in errors[-5:]:
                        print(f"   {error.strip()}")
                    found_errors = True
                else:
                    print(f"‚úì {log_file}: –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {log_file}: {e}")
        else:
            print(f"  {log_file}: –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    return not found_errors

def check_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n" + "="*50)
    print("–ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("="*50)
    
    try:
        import config
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        checks = {
            'BOT_TOKEN': hasattr(config, 'BOT_TOKEN') and config.BOT_TOKEN,
            'SECRET_KEY': hasattr(config, 'SECRET_KEY') and config.SECRET_KEY,
            'PROBLEM_TYPES': hasattr(config, 'PROBLEM_TYPES') and config.PROBLEM_TYPES,
        }
        
        all_ok = True
        for key, value in checks.items():
            status = "‚úì" if value else "‚ùå"
            print(f"{status} {key}: {'OK' if value else '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
            if not value:
                all_ok = False
        
        return all_ok
        
    except ImportError:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å config.py")
        return False
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\n" + "="*50)
    print("–ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("="*50)
    
    required = [
        'flask',
        'telegram',
        'openpyxl',
        'reportlab',
        'nest_asyncio'
    ]
    
    all_ok = True
    for package in required:
        try:
            __import__(package)
            print(f"‚úì {package}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print(f"‚ùå {package}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
            all_ok = False
    
    return all_ok

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "="*70)
    print("  –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–†–í–ï–†–ê BOLT")
    print("  " + datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    print("="*70)
    
    results = {
        'bot_data': check_bot_data(),
        'config': check_config(),
        'dependencies': check_dependencies(),
        'logs': check_logs(),
    }
    
    print("\n" + "="*70)
    print("–ò–¢–û–ì–ò")
    print("="*70)
    
    all_ok = all(results.values())
    
    for check, result in results.items():
        status = "‚úì" if result else "‚ùå"
        print(f"{status} {check.upper()}: {'OK' if result else '–ü–†–û–ë–õ–ï–ú–´'}")
    
    if all_ok:
        print("\n‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("  1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä:")
        print("     sudo systemctl restart boltweb")
        print("  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏:")
        print("     tail -f web.log")
    else:
        print("\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print("\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å:")
        if not results['dependencies']:
            print("  1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
            print("     pip install -r requirements.txt")
        if not results['bot_data']:
            print("  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ bot_data.json –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å")
        if not results['config']:
            print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.py")
        print("  4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    
    print("="*70 + "\n")
    
    return 0 if all_ok else 1

if __name__ == "__main__":
    sys.exit(main())
