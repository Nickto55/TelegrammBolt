import time
from datetime import datetime as dt
import subprocess
import asyncio
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email import encoders
import mimetypes

import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from config import load_data, save_data, PROBLEM_TYPES, RC_TYPES, DATA_FILE, PHOTOS_DIR
from dse_manager import get_all_dse_records, search_dse_records, get_unique_dse_values
from user_manager import (register_user, get_user_role, has_permission, set_user_role, ROLES, get_all_users,
                         set_user_nickname, remove_user_nickname, get_user_nickname, get_user_display_name,
                         check_nickname_exists, get_all_nicknames)
import os

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_states = {}
admin_states = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
dse_view_states = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –î–°–ï


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    user_id = str(user.id)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = register_user(
        user_id,
        user.username,
        user.first_name,
        user.last_name
    )

    print(f"üì• {user.first_name} ({get_user_role(user_id)}): /start")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if has_permission(user_id, 'view_main_menu'):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–æ—Ä–º—ã, –≤–∫–ª—é—á–∞—è —Ñ–æ—Ç–æ
        user_states[user_id] = {
            'application': '',  # –ë—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å "started" –∫–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—á–∞—Ç–∞
            'dse': '',
            'problem_type': '',
            'description': '',
            'rc': '',  # –†–∞–±–æ—á–∏–π —Ü–µ–Ω—Ç—Ä
            'photo_file_id': None  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ñ–æ—Ç–æ
        }
        await show_main_menu(update, user_id)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø—Ä–∞–≤
        if update.callback_query:
            await update.callback_query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        else:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )


async def show_application_menu(update: Update, user_id: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª–µ photo_file_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user_id not in user_states:
        user_states[user_id] = {
            'application': '',
            'dse': '',
            'problem_type': '',
            'description': '',
            'rc': '',
            'photo_file_id': None
        }
    else:
        if 'photo_file_id' not in user_states[user_id]:
            user_states[user_id]['photo_file_id'] = None
        if 'rc' not in user_states[user_id]:
            user_states[user_id]['rc'] = ''

    user_data = user_states.get(user_id, {
        'application': '',
        'dse': '',
        'problem_type': '',
        'description': '',
        'time': str(dt.now()),
        'photo_file_id': None
    })

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
    dse_text = f"–î–°–ï ‚úÖ" if user_data['dse'] else "–î–°–ï"
    problem_text = f"–í–∏–¥ –ø—Ä–æ–±–ª–µ–º—ã ‚úÖ" if user_data['problem_type'] else "–í–∏–¥ –ø—Ä–æ–±–ª–µ–º—ã"
    rc_text = f"–†–¶ ‚úÖ" if user_data['rc'] else "–†–¶"
    desc_text = f"–û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ ‚úÖ" if user_data['description'] else "–û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞"
    photo_text = f"–§–æ—Ç–æ ‚úÖ" if user_data['photo_file_id'] else "–§–æ—Ç–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
    keyboard = [
        [InlineKeyboardButton(dse_text, callback_data='set_dse')],
        [InlineKeyboardButton(problem_text, callback_data='set_problem')],
        [InlineKeyboardButton(rc_text, callback_data='set_rc')],
        [InlineKeyboardButton(desc_text, callback_data='set_description')],
        [InlineKeyboardButton(photo_text, callback_data='set_photo')],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    ]

    # –ö–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã (—Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞—è RC)
    if user_data['dse'] and user_data['problem_type'] and user_data['rc'] and user_data['description']:
        keyboard.append([InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='send')])
        keyboard.append([InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data='edit_application')])

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_text = "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É:\n\n"
    welcome_text += (
        f"‚Ä¢ {dse_text}\n"
        f"‚Ä¢ {problem_text}\n"
        f"‚Ä¢ {rc_text}\n"
        f"‚Ä¢ {desc_text}\n"
        f"‚Ä¢ {photo_text}\n\n"
    )
    if user_data['dse'] and user_data['problem_type'] and user_data['rc'] and user_data['description']:
        welcome_text += "–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏."

    if update.callback_query:
        await update.callback_query.edit_message_text(text=welcome_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text=welcome_text, reply_markup=reply_markup)


async def show_main_menu(update: Update, user_id: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–æ—Ä–º—ã, –≤–∫–ª—é—á–∞—è —Ñ–æ—Ç–æ
    if user_id not in user_states:
        user_states[user_id] = {
            'application': '',
            'dse': '',
            'problem_type': '',
            'description': '',
            'rc': '',
            'photo_file_id': None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ –¥–ª—è —Ñ–æ—Ç–æ
        }
    else:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª–µ photo_file_id –∏ rc —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if 'photo_file_id' not in user_states[user_id]:
            user_states[user_id]['photo_file_id'] = None
        if 'rc' not in user_states[user_id]:
            user_states[user_id]['rc'] = ''


    user_data = user_states.get(user_id, {'application': '', 'dse': '', 'problem_type': '', 'description': '',
                                          'rc': '', 'photo_file_id': None})
    role = get_user_role(user_id)

    keyboard = []

    # –ó–∞–º–µ–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–µ–π –Ω–∞ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É "–ó–∞—è–≤–∫–∞"
    if has_permission(user_id, 'use_form'):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞—è–≤–∫–∞" —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º, –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
        app_status = user_data.get('application', '')
        dse_filled = user_data.get('dse', '')
        problem_filled = user_data.get('problem_type', '')
        rc_filled = user_data.get('rc', '')
        desc_filled = user_data.get('description', '')
        photo_filled = user_data.get('photo_file_id', None)

        if app_status == 'started' or any([dse_filled, problem_filled, rc_filled, desc_filled, photo_filled]):
            app_text = "üìù –ó–∞—è–≤–∫–∞ ‚ö†Ô∏è"  # ‚ö†Ô∏è –µ—Å–ª–∏ –Ω–∞—á–∞—Ç–∞, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            if dse_filled and problem_filled and rc_filled and desc_filled:
                app_text = "üìù –ó–∞—è–≤–∫–∞ ‚úÖ"  # ‚úÖ –µ—Å–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
        else:
            app_text = "üìù –ó–∞—è–≤–∫–∞"

        keyboard.append([InlineKeyboardButton(app_text, callback_data='open_application')])

    # === –ö–ù–û–ü–ö–ê 6: "üìã –°–ø–∏—Å–æ–∫ –î–°–ï" ===
    if has_permission(user_id, 'view_dse_list'):
        keyboard.append([InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –î–°–ï", callback_data='view_dse_list')])

    # === –ö–ù–û–ü–ö–ê 7: "üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –î–°–ï" ===
    if has_permission(user_id, 'watch_dse'):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–æ
        keyboard.append([InlineKeyboardButton("üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –î–°–ï", callback_data='watch_dse_menu')])

    # === –ö–ù–û–ü–ö–ê 8: "üí¨ –ß–∞—Ç –ø–æ –î–°–ï" ===
    if has_permission(user_id, 'chat_dse'):
        keyboard.append([InlineKeyboardButton("üí¨ –ß–∞—Ç –ø–æ –î–°–ï", callback_data='chat_dse_menu')])

    # === –ö–ù–û–ü–ö–ê 9: "ÔøΩ PDF –û—Ç—á–µ—Ç" ===
    if has_permission(user_id, 'pdf_export'):
        keyboard.append([InlineKeyboardButton("üìÑ PDF –û—Ç—á–µ—Ç", callback_data='pdf_export_menu')])

    # === –ö–ù–û–ü–ö–ê 10: "ÔøΩüîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏" ===
    if role == 'admin':
        keyboard.append([InlineKeyboardButton("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data='admin_users')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    role_text = ROLES.get(role, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    welcome_text = f"üë§ –†–æ–ª—å: {role_text}\n\n"

    if has_permission(user_id, 'use_form'):
        welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
    else:
        welcome_text += "–£ –≤–∞—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞."

    if update.callback_query:
        await update.callback_query.edit_message_text(text=welcome_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text=welcome_text, reply_markup=reply_markup)


# === –§–£–ù–ö–¶–ò–ò –ü–†–û–°–ú–û–¢–†–ê –î–°–ï ===

async def show_dse_list_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –î–°–ï"""
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –î–°–ï", callback_data='dse_search_interactive')],
        [InlineKeyboardButton("üìã –í—Å–µ –∑–∞–ø–∏—Å–∏", callback_data='dse_view_all')],
        [InlineKeyboardButton("üîé –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É –ø—Ä–æ–±–ª–µ–º—ã", callback_data='dse_search_type')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='dse_statistics')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text="üìã –ú–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –î–°–ï:",
        reply_markup=reply_markup
    )


async def show_all_dse_records(update: Update, context: ContextTypes.DEFAULT_TYPE, page=0) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –î–°–ï —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    records = get_all_dse_records()
    records_per_page = 5
    total_pages = (len(records) + records_per_page - 1) // records_per_page if records else 1

    if not records:
        await update.callback_query.edit_message_text("üìã –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –î–°–ï.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * records_per_page
    end_idx = start_idx + records_per_page
    page_records = records[start_idx:end_idx]

    text = f"üìã –í—Å–µ –∑–∞–ø–∏—Å–∏ –î–°–ï (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):\n\n"

    for i, record in enumerate(page_records, start=start_idx + 1):
        text += f"{i}. –î–°–ï: {record.get('dse', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"   –¢–∏–ø: {record.get('problem_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"   –†–¶: {record.get('rc', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {record.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:50]}...\n"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ
        if record.get('photo_file_id'):
            text += f"   üì∏ –§–æ—Ç–æ: –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n"
        text += f"   üìÖ –î–∞—Ç–∞: {record.get('datetime', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        user_id = record.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        user_display = get_user_display_name(user_id) if user_id != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        text += f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display}\n\n"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []

    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'dse_view_all_{page - 1}'))

    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f'dse_view_all_{page + 1}'))

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö ---
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    menu_button = InlineKeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é", callback_data='view_dse_list')
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º –∫–Ω–æ–ø–∫–∞–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    if nav_buttons:
        nav_buttons.append(menu_button) # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –≤ —Ç—É –∂–µ —Å—Ç—Ä–æ–∫—É, —á—Ç–æ –∏ –ù–∞–∑–∞–¥/–î–∞–ª–µ–µ
    else:
        nav_buttons = [menu_button] # –ï—Å–ª–∏ –ù–∞–∑–∞–¥/–î–∞–ª–µ–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –º–µ–Ω—é

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∑–∞–ø–∏—Å–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    # (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ keyboard –≤—ã—à–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏)
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    # for record_buttons_row in record_buttons: # record_buttons - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–µ–π
    #     keyboard.append(record_buttons_row)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ (–∏ –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é)
    if nav_buttons: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –≤ nav_buttons
        keyboard.append(nav_buttons) # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª—É—é —Å—Ç—Ä–æ–∫—É –∫–Ω–æ–ø–æ–∫

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)


async def start_interactive_dse_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –î–°–ï"""
    user_id = str(update.callback_query.from_user.id)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    dse_view_states[user_id] = {
        'searching_dse': True,
        'current_search': '',
        'search_results': []
    }

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –î–°–ï –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    all_dse = get_unique_dse_values()
    dse_view_states[user_id]['all_dse'] = all_dse

    await show_dse_search_results(update, context, user_id)


async def show_dse_search_results(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –î–°–ï"""
    search_state = dse_view_states.get(user_id, {})
    current_search = search_state.get('current_search', '')
    all_dse = search_state.get('all_dse', [])

    # –§–∏–ª—å—Ç—Ä—É–µ–º –î–°–ï –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    if current_search:
        filtered_dse = [dse for dse in all_dse if current_search.lower() in dse.lower()]
    else:
        filtered_dse = all_dse

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    search_state['search_results'] = filtered_dse

    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if current_search:
        text = f"üîç –ü–æ–∏—Å–∫ –ø–æ –î–°–ï: '{current_search}'\n\n"
    else:
        text = "üîç –ü–æ–∏—Å–∫ –ø–æ –î–°–ï (–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏):\n\n"

    if filtered_dse:
        text += f"–ù–∞–π–¥–µ–Ω–æ: {len(filtered_dse)}\n\n"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for i, dse in enumerate(filtered_dse[:20]):
            text += f"{i + 1}. {dse.upper()}\n"

        if len(filtered_dse) > 20:
            text += f"\n... –∏ –µ—â–µ {len(filtered_dse) - 20} –∑–∞–ø–∏—Å–µ–π"
    else:
        text += "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 10 –î–°–ï (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
    for i, dse in enumerate(filtered_dse[:10]):
        callback_data = f"dse_select_{i}"
        keyboard.append([InlineKeyboardButton(dse.upper(), callback_data=callback_data)])

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    nav_buttons = []
    if current_search:
        nav_buttons.append(InlineKeyboardButton("‚å´ –û—á–∏—Å—Ç–∏—Ç—å", callback_data='dse_search_clear'))

    nav_buttons.append(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='view_dse_list'))
    keyboard.append(nav_buttons)

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text=text, reply_markup=reply_markup)


async def handle_dse_search_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –î–°–ï"""
    user_id = str(update.message.from_user.id)
    search_text = update.message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    if user_id in dse_view_states:
        dse_view_states[user_id]['current_search'] = search_text
        await show_dse_search_results(update, context, user_id)


async def select_dse_from_search(update: Update, context: ContextTypes.DEFAULT_TYPE, index: int) -> None:
    """–í—ã–±—Ä–∞—Ç—å –î–°–ï –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    user_id = str(update.callback_query.from_user.id)

    if user_id in dse_view_states:
        search_results = dse_view_states[user_id].get('search_results', [])
        if 0 <= index < len(search_results):
            selected_dse = search_results[index]

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
            del dse_view_states[user_id]

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –î–°–ï
            await show_records_for_dse(update, context, selected_dse)


async def show_records_for_dse(update: Update, context: ContextTypes.DEFAULT_TYPE, dse_value: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –î–°–ï"""
    # –ò—â–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —ç—Ç–∏–º –î–°–ï
    records = search_dse_records(dse_filter=dse_value)

    if not records:
        await update.callback_query.edit_message_text(f"‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –î–°–ï: {dse_value.upper()}")
        return

    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏ (–∏–ª–∏ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π)
    text = f"üìÑ –ó–∞–ø–∏—Å–∏ –¥–ª—è –î–°–ï: {dse_value.upper()}\n\n"

    for i, record in enumerate(records[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –∑–∞–ø–∏—Å–µ–π
        text += f"–ó–∞–ø–∏—Å—å #{i + 1}:\n"
        text += f"–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: {record.get('problem_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"–†–¶: {record.get('rc', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {record.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
        text += f"üìÖ –î–∞—Ç–∞: {record.get('datetime', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = record.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        if user_id != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
            user_display = get_user_display_name(user_id)
            text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display}\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ
        photo_file_id = record.get('photo_file_id')
        if photo_file_id:
            text += f"üì∏ –§–æ—Ç–æ: –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            try:
                await context.bot.send_photo(
                    chat_id=update.callback_query.message.chat_id,
                    photo=photo_file_id,
                    caption=f"–§–æ—Ç–æ –¥–ª—è –î–°–ï {dse_value.upper()}"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                text += "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ\n"

        text += "\n" + "=" * 30 + "\n\n"

    if len(records) > 5:
        text += f"\n... –∏ –µ—â–µ {len(records) - 5} –∑–∞–ø–∏—Å–µ–π"

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data='dse_search_interactive')],
        [InlineKeyboardButton("üìã –í—Å–µ –∑–∞–ø–∏—Å–∏", callback_data='dse_view_all')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data='view_dse_list')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)


async def start_dse_search(update: Update, context: ContextTypes.DEFAULT_TYPE, search_type: str) -> None:
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –î–°–ï"""
    user_id = str(update.callback_query.from_user.id)

    if search_type == 'dse':
        dse_view_states[user_id] = {'searching_dse': True}
        await update.callback_query.edit_message_text("üîç –í–≤–µ–¥–∏—Ç–µ –î–°–ï –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    elif search_type == 'type':
        dse_view_states[user_id] = {'searching_type': True}
        await update.callback_query.edit_message_text("üîé –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:")


async def show_search_results(update: Update, context: ContextTypes.DEFAULT_TYPE, search_term: str,
                              search_type: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"""
    if search_type == 'dse':
        records = search_dse_records(dse_filter=search_term)
        search_title = f"–ø–æ –î–°–ï '{search_term}'"
    else:  # type
        records = search_dse_records(problem_type_filter=search_term)
        search_title = f"–ø–æ —Ç–∏–ø—É –ø—Ä–æ–±–ª–µ–º—ã '{search_term}'"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø update –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if update.callback_query:
        # –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ callback_query
        if not records:
            await update.callback_query.edit_message_text(f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ {search_title}.")
            return

        text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ {search_title}:\n\n"

        for i, record in enumerate(records[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            text += f"{i}. –î–°–ï: {record.get('dse', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            text += f"   –¢–∏–ø: {record.get('problem_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            text += f"   –†–¶: {record.get('rc', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {record.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:50]}...\n"
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ
            if record.get('photo_file_id'):
                text += f"   üì∏ –§–æ—Ç–æ: –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n"
            text += f"   üìÖ –î–∞—Ç–∞: {record.get('datetime', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            text += "\n"

        if len(records) > 10:
            text += f"... –∏ –µ—â–µ {len(records) - 10} –∑–∞–ø–∏—Å–µ–π"

        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='view_dse_list')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)

    elif update.message:
        # –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not records:
            await update.message.reply_text(f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ {search_title}.")
            return

        text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ {search_title}:\n\n"

        for i, record in enumerate(records[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            text += f"{i}. –î–°–ï: {record.get('dse', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            text += f"   –¢–∏–ø: {record.get('problem_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            text += f"   –†–¶: {record.get('rc', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {record.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:50]}...\n"
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ
            if record.get('photo_file_id'):
                text += f"   üì∏ –§–æ—Ç–æ: –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n"
            text += f"   üìÖ –î–∞—Ç–∞: {record.get('datetime', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            text += "\n"

        if len(records) > 10:
            text += f"... –∏ –µ—â–µ {len(records) - 10} –∑–∞–ø–∏—Å–µ–π"

        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='view_dse_list')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(text=text, reply_markup=reply_markup)


async def show_dse_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –î–°–ï"""
    records = get_all_dse_records()

    if not records:
        await update.callback_query.edit_message_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_records = len(records)

    # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º
    problem_counts = {}
    photo_count = 0
    for record in records:
        problem_type = record.get('problem_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        problem_counts[problem_type] = problem_counts.get(problem_type, 0) + 1
        # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å —Ñ–æ—Ç–æ
        if record.get('photo_file_id'):
            photo_count += 1

    # –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –î–°–ï
    unique_dse = len(set([r.get('dse', '') for r in records if r.get('dse', '')]))

    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –î–°–ï:\n\n"
    text += f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}\n"
    text += f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –î–°–ï: {unique_dse}\n"
    text += f"–ó–∞–ø–∏—Å–µ–π —Å —Ñ–æ—Ç–æ: {photo_count}\n\n"
    text += "–ü–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º:\n"

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    sorted_problems = sorted(problem_counts.items(), key=lambda x: x[1], reverse=True)

    for problem_type, count in sorted_problems[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
        text += f"‚Ä¢ {problem_type}: {count}\n"

    keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='view_dse_list')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)


async def show_problem_types(update: Update, user_id: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –ø—Ä–æ–±–ª–µ–º"""
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = []
    for i in range(0, len(PROBLEM_TYPES), 3):  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
        row = []
        for j in range(i, min(i + 3, len(PROBLEM_TYPES))):
            row.append(InlineKeyboardButton(PROBLEM_TYPES[j], callback_data=f'problem_{j}'))
        keyboard.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∑–∞—è–≤–∫–∏)
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_application')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –ø—Ä–æ–±–ª–µ–º—ã:",
        reply_markup=reply_markup
    )


async def show_rc_types(update: Update, user_id: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ (–†–¶)"""
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = []
    for i in range(0, len(RC_TYPES), 2):  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
        row = []
        for j in range(i, min(i + 2, len(RC_TYPES))):
            row.append(InlineKeyboardButton(RC_TYPES[j], callback_data=f'rc_{j}'))
        keyboard.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∑–∞—è–≤–∫–∏)
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_application')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏–π —Ü–µ–Ω—Ç—Ä (–†–¶):",
        reply_markup=reply_markup
    )


# === –ê–î–ú–ò–ù –§–£–ù–ö–¶–ò–ò ===

async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='admin_list_users')],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='admin_change_role_start')],
        [InlineKeyboardButton("üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏—á–∫–∞–º–∏", callback_data='admin_manage_nicknames')],
        [InlineKeyboardButton("üìä –í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='admin_export_data')],
        [InlineKeyboardButton("üìß –¢–µ—Å—Ç SMTP", callback_data='admin_test_smtp')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text="üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=reply_markup
    )


async def show_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = get_all_users()

    if not users:
        await update.callback_query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
        return

    text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user_id, user_data in users.items():
        role = user_data.get('role', 'user')
        role_text = ROLES.get(role, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è (–∫–ª–∏—á–∫—É –∏–ª–∏ –∏–º—è)
        display_name = get_user_display_name(user_id)
        username = user_data.get('username', '')
        
        if username:
            text += f"‚Ä¢ {display_name} (@{username}) - {role_text}\n"
        else:
            text += f"‚Ä¢ {display_name} - {role_text}\n"

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_users')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)


async def start_change_role_process(update: Update, context: ContextTypes.DEFAULT_TYPE, admin_id: str) -> None:
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏"""
    admin_states[admin_id] = {'changing_role': True}
    await update.callback_query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å:"
    )


async def show_role_selection_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user_id: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–π"""
    users = get_all_users()
    target_user = users.get(target_user_id, {})
    user_name = target_user.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

    keyboard = []
    current_role = target_user.get('role', 'user')

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
    for role_key, role_name in ROLES.items():
        if role_key == current_role:
            button_text = f"‚úÖ {role_name}"
        else:
            button_text = role_name
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f'set_role_{target_user_id}_{role_key}')])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data='admin_users')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø update
    if update.callback_query:
        await update.callback_query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è {user_name} (ID: {target_user_id}):",
            reply_markup=reply_markup
        )
    elif update.message:
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è {user_name} (ID: {target_user_id}):",
            reply_markup=reply_markup
        )


# === –§–£–ù–ö–¶–ò–ò –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –î–°–ï ===

async def show_dse_selection_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, action_callback_data_prefix: str,
                                  title: str = "–í—ã–±–µ—Ä–∏—Ç–µ –î–°–ï") -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –î–°–ï –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫.

    Args:
        update: –û–±—ä–µ–∫—Ç Update.
        context: –û–±—ä–µ–∫—Ç Context.
        action_callback_data_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data –∫–Ω–æ–ø–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'watch_select_dse_').
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ–Ω—é.
    """
    dse_list = get_unique_dse_values()

    if not dse_list:
        if update.callback_query:
            await update.callback_query.edit_message_text("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –î–°–ï –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        elif update.message:
            await update.message.reply_text("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –î–°–ï –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –î–°–ï
    keyboard = []
    for i, dse_value in enumerate(dse_list):
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π callback_data —Å –∏–Ω–¥–µ–∫—Å–æ–º
        callback_data = f"{action_callback_data_prefix}{i}"
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        button_text = dse_value.upper() if len(dse_value) <= 20 else dse_value[:17].upper() + "..."
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é" –∏ "–û—Ç–º–µ–Ω–∞"
    keyboard.append([InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"{action_callback_data_prefix}manual")])
    keyboard.append(
        [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data='back_to_main')])  # –ò–ª–∏ –¥—Ä—É–≥–æ–π –æ–±—â–∏–π callback –¥–ª—è –æ—Ç–º–µ–Ω—ã

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É
    user = update.effective_user
    user_id = str(user.id)
    user_states[user_id] = user_states.get(user_id, {})
    user_states[user_id]['temp_dse_list'] = dse_list

    if update.callback_query:
        await update.callback_query.edit_message_text(text=title, reply_markup=reply_markup)
    elif update.message:
        await update.message.reply_text(text=title, reply_markup=reply_markup)


async def show_watched_dse_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –î–°–ï."""
    user = update.effective_user
    user_id = str(user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_permission(user_id, 'watch_dse'):
        if update.callback_query:
            await update.callback_query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –î–°–ï.")
        elif update.message:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –î–°–ï.")
        return

    from dse_watcher import get_watched_dse_list
    watched_list = get_watched_dse_list(user_id)

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –î–°–ï", callback_data='watch_add_dse')],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –î–°–ï", callback_data='watch_remove_dse')],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö", callback_data='watch_list_dse')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    menu_text = "üëÄ –ú–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –î–°–ï\n\n"
    menu_text += "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –î–°–ï.\n"

    if update.callback_query:
        await update.callback_query.edit_message_text(text=menu_text, reply_markup=reply_markup)
    elif update.message:
        await update.message.reply_text(text=menu_text, reply_markup=reply_markup)


async def start_add_watched_dse(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –î–°–ï –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
    user_id = str(update.callback_query.from_user.id)

    # –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    await show_dse_selection_menu(
        update,
        context,
        action_callback_data_prefix='watch_select_dse_',
        title="‚ûï –í—ã–±–µ—Ä–∏—Ç–µ –î–°–ï –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:"
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"
    user_states[user_id]['adding_watched_dse_state'] = 'selecting_or_manual'


async def start_dse_chat_search_with_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞ –ø–æ –î–°–ï —Å –≤—ã–±–æ—Ä–æ–º –∏–∑ —Å–ø–∏—Å–∫–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    user = update.callback_query.from_user
    user_id = str(user.id)
    # if has_permission(user_id, 'chat_dse'):
    #     await update.callback_query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á–∞—Ç–∞ –ø–æ –î–°–ï.")
    #     return

    await show_dse_selection_menu(
        update,
        context,
        action_callback_data_prefix='chat_select_dse_',
        title="üîç –í—ã–±–µ—Ä–∏—Ç–µ –î–°–ï –¥–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:"
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
    user_states[user_id] = user_states.get(user_id, {})
    user_states[user_id]['dse_chat_state'] = 'selecting_or_manual'


async def start_remove_watched_dse(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –î–°–ï –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
    user = update.callback_query.from_user
    user_id = str(user.id)

    from dse_watcher import get_watched_dse_list
    watched_list = get_watched_dse_list(user_id)

    if not watched_list:
        await update.callback_query.edit_message_text("üì≠ –í–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –î–°–ï –ø—É—Å—Ç.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –î–°–ï –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = []
    for i, dse_value in enumerate(watched_list):
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π callback_data —Å –∏–Ω–¥–µ–∫—Å–æ–º
        callback_data = f"watch_rm_idx_{i}"
        keyboard.append([InlineKeyboardButton(dse_value.upper(), callback_data=callback_data)])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data='watch_dse_menu')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É
    user_states[user_id] = user_states.get(user_id, {})
    user_states[user_id]['temp_watched_list'] = watched_list

    await update.callback_query.edit_message_text("‚ûñ –í—ã–±–µ—Ä–∏—Ç–µ –î–°–ï –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:",
                                                  reply_markup=reply_markup)


async def show_watched_dse_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –î–°–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.callback_query.from_user
    user_id = str(user.id)

    from dse_watcher import get_watched_dse_list
    watched_list = get_watched_dse_list(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π

    if not watched_list:
        text = "üì≠ –í–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –î–°–ï –ø—É—Å—Ç.\n\n"
        text += "–ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –î–°–ï' –≤ –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='watch_dse_menu')]]
    else:
        text = "üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –î–°–ï:\n\n"
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è
        for i, dse_value in enumerate(watched_list, 1):
            text += f"{i}. {dse_value.upper()}\n"
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='watch_dse_menu')]]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)


# === –§–£–ù–ö–¶–ò–ò –≠–ö–°–ü–û–†–¢–ê –î–ê–ù–ù–´–• ===

async def start_data_export(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    user_id = str(update.callback_query.from_user.id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
    if user_id not in admin_states:
        admin_states[user_id] = {}
    admin_states[user_id]['exporting_data'] = True
    
    await update.callback_query.edit_message_text(
        "üìä –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏...\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    )
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç genereteTabl.py
        process = await asyncio.create_subprocess_exec(
            'python', 'genereteTabl.py',
            cwd=os.getcwd(),
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        stdout, stderr = await process.communicate()
        
        if process.returncode == 0:
            # –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ
            admin_states[user_id]['export_completed'] = True
            admin_states[user_id]['export_file'] = 'RezultBot.xlsx'
            await show_export_delivery_options(update, context)
        else:
            # –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            error_msg = stderr.decode() if stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            await update.callback_query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞:\n{error_msg}\n\n"
                f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {process.returncode}"
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if user_id in admin_states:
                admin_states[user_id].pop('exporting_data', None)
                
    except Exception as e:
        await update.callback_query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: {str(e)}"
        )
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if user_id in admin_states:
            admin_states[user_id].pop('exporting_data', None)


async def show_export_delivery_options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    keyboard = [
        [InlineKeyboardButton("üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç", callback_data='export_send_chat')],
        [InlineKeyboardButton("üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –ø–æ—á—Ç–µ", callback_data='export_send_email')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data='admin_users')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "‚úÖ –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞:",
        reply_markup=reply_markup
    )


async def send_file_to_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ —á–∞—Ç"""
    user_id = str(update.callback_query.from_user.id)
    
    try:
        file_path = admin_states.get(user_id, {}).get('export_file', 'RezultBot.xlsx')
        
        if os.path.exists(file_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(file_path, 'rb') as file:
                await context.bot.send_document(
                    chat_id=update.callback_query.message.chat_id,
                    document=file,
                    filename=f"–í—ã–≥—Ä—É–∑–∫–∞_–¥–∞–Ω–Ω—ã—Ö_{dt.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    caption=f"üìä –í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –î–°–ï\n"
                           f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {dt.now().strftime('%Y-%m-%d %H:%M:%S')}"
                )
            
            await update.callback_query.edit_message_text("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç!")
        else:
            await update.callback_query.edit_message_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
    except Exception as e:
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
    
    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if user_id in admin_states:
            admin_states[user_id].pop('exporting_data', None)
            admin_states[user_id].pop('export_completed', None)
            admin_states[user_id].pop('export_file', None)


async def request_email_address(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å email –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞"""
    user_id = str(update.callback_query.from_user.id)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    from config import SMTP_SETTINGS, is_smtp_configured
    
    if not is_smtp_configured():
        await update.callback_query.edit_message_text(
            "‚ùå SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
            "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø–æ email –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            "1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–∞–π–ª–µ smtp_config.json\n"
            "2. –£–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n\n"
            "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ –°–µ—Ä–≤–µ—Ä: {SMTP_SETTINGS.get('SMTP_SERVER', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚Ä¢ –ü–æ—Ä—Ç: {SMTP_SETTINGS.get('SMTP_PORT', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚Ä¢ Email: {SMTP_SETTINGS.get('SMTP_USER', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
        )
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è email
    admin_states[user_id]['waiting_for_email'] = True
    
    await update.callback_query.edit_message_text(
        "üìß –í–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä: user@example.com\n\n"
        f"‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {SMTP_SETTINGS['SMTP_USER']}"
    )


async def send_file_by_email(update: Update, context: ContextTypes.DEFAULT_TYPE, email: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ"""
    user_id = str(update.effective_user.id)
    server = None
    
    try:
        from config import SMTP_SETTINGS, is_smtp_configured
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ SMTP
        if not is_smtp_configured():
            await update.message.reply_text(
                "‚ùå SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
                "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø–æ email –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                "1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–∞–π–ª–µ smtp_config.json\n"
                "2. –£–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            )
            return
        
        file_path = admin_states.get(user_id, {}).get('export_file', 'RezultBot.xlsx')
        
        if not os.path.exists(file_path):
            await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        file_size = os.path.getsize(file_path) / 1024 / 1024  # –≤ MB
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        smtp_server = SMTP_SETTINGS["SMTP_SERVER"]
        smtp_port = SMTP_SETTINGS["SMTP_PORT"]
        smtp_user = SMTP_SETTINGS["SMTP_USER"]
        smtp_password = SMTP_SETTINGS["SMTP_PASSWORD"]
        
        await update.message.reply_text(
            f"üìß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ email...\n"
            f"üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.2f} MB\n"
            f"üåê –°–µ—Ä–≤–µ—Ä: {smtp_server}:{smtp_port}"
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = MIMEMultipart()
        msg['From'] = f"{SMTP_SETTINGS['FROM_NAME']} <{smtp_user}>"
        msg['To'] = email
        msg['Subject'] = f"–í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –î–°–ï - {dt.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
        body = f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–í–æ –≤–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ñ–∞–π–ª —Å –≤—ã–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –î–°–ï.

üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–≥—Ä—É–∑–∫–µ:
‚Ä¢ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {dt.now().strftime('%Y-%m-%d %H:%M:%S')}
‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.2f} MB
‚Ä¢ –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: Excel (.xlsx)

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
{SMTP_SETTINGS['FROM_NAME']}"""
        
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤–æ –≤–ª–æ–∂–µ–Ω–∏–µ
        await update.message.reply_text("üìé –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–ª–æ–∂–µ–Ω–∏—è...")
        
        with open(file_path, "rb") as attachment:
            part = MIMEBase('application', 'vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            part.set_payload(attachment.read())
            
        encoders.encode_base64(part)
        filename = f"–í—ã–≥—Ä—É–∑–∫–∞_–¥–∞–Ω–Ω—ã—Ö_–î–°–ï_{dt.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        part.add_header(
            'Content-Disposition',
            f'attachment; filename="{filename}"'
        )
        msg.attach(part)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
        await update.message.reply_text("ÔøΩ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...")
        
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.set_debuglevel(0)  # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        await update.message.reply_text("üîí –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        server.starttls()
        
        await update.message.reply_text("üë§ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        server.login(smtp_user, smtp_password)
        
        await update.message.reply_text("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞...")
        text = msg.as_string()
        server.sendmail(smtp_user, email, text)
        
        await update.message.reply_text(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}!")
        
    except smtplib.SMTPAuthenticationError as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMTP!\n\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å email –∏ –ø–∞—Ä–æ–ª—è\n"
            "‚Ä¢ –í–∫–ª—é—á–µ–Ω–∞ –ª–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è Gmail)\n"
            "‚Ä¢ –í–∫–ª—é—á–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø –¥–ª—è –º–µ–Ω–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"
        )
    except smtplib.SMTPRecipientsRefused as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è!\n\n"
            f"Email '{email}' –æ—Ç–∫–ª–æ–Ω–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–º.\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å email –∞–¥—Ä–µ—Å–∞."
        )
    except smtplib.SMTPDataError as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö SMTP!\n\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º."
        )
    except smtplib.SMTPConnectError as e:
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É!\n\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            f"‚Ä¢ –°–µ—Ä–≤–µ—Ä: {SMTP_SETTINGS.get('SMTP_SERVER', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚Ä¢ –ü–æ—Ä—Ç: {SMTP_SETTINGS.get('SMTP_PORT', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            "‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email!\n\n"
            f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP –≤ —Ñ–∞–π–ª–µ smtp_config.json"
        )
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–∫—Ä—ã—Ç–æ
        if server:
            try:
                server.quit()
            except:
                pass
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if user_id in admin_states:
            admin_states[user_id].pop('exporting_data', None)
            admin_states[user_id].pop('export_completed', None)
            admin_states[user_id].pop('export_file', None)
            admin_states[user_id].pop('waiting_for_email', None)


async def test_smtp_connection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
    try:
        from config import SMTP_SETTINGS, is_smtp_configured
        
        if not is_smtp_configured():
            await update.callback_query.edit_message_text(
                "‚ùå SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
                "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–∞–π–ª–µ smtp_config.json"
            )
            return
        
        await update.callback_query.edit_message_text("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        server = None
        try:
            server = smtplib.SMTP(SMTP_SETTINGS["SMTP_SERVER"], SMTP_SETTINGS["SMTP_PORT"])
            server.starttls()
            server.login(SMTP_SETTINGS["SMTP_USER"], SMTP_SETTINGS["SMTP_PASSWORD"])
            
            await update.callback_query.edit_message_text(
                f"‚úÖ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!\n\n"
                f"üìß –°–µ—Ä–≤–µ—Ä: {SMTP_SETTINGS['SMTP_SERVER']}\n"
                f"üîå –ü–æ—Ä—Ç: {SMTP_SETTINGS['SMTP_PORT']}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {SMTP_SETTINGS['SMTP_USER']}\n"
                f"üìù –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {SMTP_SETTINGS['FROM_NAME']}\n\n"
                f"–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤ –ø–æ email!"
            )
            
        except smtplib.SMTPAuthenticationError:
            await update.callback_query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å –≤ smtp_config.json"
            )
        except Exception as e:
            await update.callback_query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!\n\n"
                f"–î–µ—Ç–∞–ª–∏: {str(e)}"
            )
        finally:
            if server:
                try:
                    server.quit()
                except:
                    pass
                    
    except Exception as e:
        await update.callback_query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ SMTP: {str(e)}"
        )


# === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–õ–ò–ß–ö–ê–ú–ò ===

async def show_nicknames_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏—á–∫–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∏—á–∫—É", callback_data='nickname_set')],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–ª–∏—á–∫—É", callback_data='nickname_remove')],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏—á–µ–∫", callback_data='nickname_list')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_users')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏—á–∫–∞–º–∏:\n\n"
        "–ö–ª–∏—á–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –∑–∞–º–µ–Ω–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–æ–Ω—è—Ç–Ω—ã–µ –∏–º–µ–Ω–∞.\n"
        "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫–ª–∏—á–∫–∏ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
        reply_markup=reply_markup
    )


async def show_users_for_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏—á–µ–∫"""
    users = get_all_users()
    
    if not users:
        await update.callback_query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
        return
    
    keyboard = []
    
    for user_id, user_data in users.items():
        name = user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        username = user_data.get('username', '')
        current_nickname = get_user_nickname(user_id)
        
        if action == 'set':
            if current_nickname:
                button_text = f"{name} ({current_nickname}) ‚úèÔ∏è"
            else:
                button_text = f"{name} (–±–µ–∑ –∫–ª–∏—á–∫–∏)"
            callback_data = f'nickname_set_user_{user_id}'
        else:  # remove
            if current_nickname:
                button_text = f"{name} ({current_nickname}) ‚ùå"
                callback_data = f'nickname_remove_user_{user_id}'
            else:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∫–ª–∏—á–µ–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
        
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    if action == 'remove' and not keyboard:
        await update.callback_query.edit_message_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–ª–∏—á–∫–∞–º–∏.")
        return
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_manage_nicknames')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    action_text = "—É—Å—Ç–∞–Ω–æ–≤–∫–∏" if action == 'set' else "—É–¥–∞–ª–µ–Ω–∏—è"
    await update.callback_query.edit_message_text(
        f"üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è {action_text} –∫–ª–∏—á–∫–∏:",
        reply_markup=reply_markup
    )


async def start_nickname_input(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: str) -> None:
    """–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –∫–ª–∏—á–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    admin_id = str(update.callback_query.from_user.id)
    users = get_all_users()
    
    if user_id not in users:
        await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    user_data = users[user_id]
    user_name = user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    current_nickname = get_user_nickname(user_id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    admin_states[admin_id] = {
        'setting_nickname_for': user_id,
        'setting_nickname': True
    }
    
    text = f"üè∑Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏—á–∫–∏ –¥–ª—è {user_name}\n\n"
    if current_nickname:
        text += f"–¢–µ–∫—É—â–∞—è –∫–ª–∏—á–∫–∞: {current_nickname}\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–ª–∏—á–∫—É (–¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤):"
    
    await update.callback_query.edit_message_text(text)


async def remove_nickname_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: str) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏—á–∫–∏"""
    users = get_all_users()
    
    if user_id not in users:
        await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    user_data = users[user_id]
    user_name = user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    current_nickname = get_user_nickname(user_id)
    
    if not current_nickname:
        await update.callback_query.edit_message_text("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–ª–∏—á–∫–∏.")
        return
    
    if remove_user_nickname(user_id):
        await update.callback_query.edit_message_text(
            f"‚úÖ –ö–ª–∏—á–∫–∞ '{current_nickname}' —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}."
        )
    else:
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏—á–∫–∏.")


async def show_nicknames_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏—á–µ–∫"""
    nicknames = get_all_nicknames()
    
    if not nicknames:
        text = "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏—á–µ–∫ –ø—É—Å—Ç.\n\n–ù–∏ —É –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∏—á–∫–∏."
    else:
        text = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏—á–µ–∫:\n\n"
        users = get_all_users()
        
        for user_id, nickname in nicknames.items():
            user_data = users.get(user_id, {})
            real_name = user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            text += f"‚Ä¢ {nickname} ‚Üí {real_name} (ID: {user_id})\n"
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_manage_nicknames')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)


# === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –§–û–¢–û ===

async def request_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(update.callback_query.from_user.id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
    user_states[user_id]['waiting_for_photo'] = True

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ
    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É –ø–æ–ª—É—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.callback_query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–∫—Ä—É—Ç–∏–ª–∫—É"
    await context.bot.send_message(
        chat_id=update.callback_query.message.chat_id,
        text="üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.\n\n"
             "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel_photo –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        # –£–±–∏—Ä–∞–µ–º inline –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–∏
    )


# === –ö–û–ú–ê–ù–î–ê –û–¢–ú–ï–ù–´ –§–û–¢–û ===

async def cancel_photo_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /cancel_photo –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
    user_id = str(update.effective_user.id)

    # –û—Ç–º–µ–Ω—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ
    if 'waiting_for_photo' in user_states.get(user_id, {}):
        del user_states[user_id]['waiting_for_photo']
        await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∑–∞—è–≤–∫–∏
        await show_application_menu(update, user_id)
    else:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ñ–æ—Ç–æ.")


# === –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ===

# commands.py (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç button_handler)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""

    query = update.callback_query
    # –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å—Ä–∞–∑—É –∂–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "Query is too old"
    await query.answer()

    user = query.from_user
    user_id = str(user.id)
    data = query.data

    print(f"üñ±Ô∏è {user.first_name}: –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '{data}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_permission(user_id, 'view_main_menu'):
        # –¢–∞–∫ –∫–∞–∫ query.answer() —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        try:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        except telegram.error.BadRequest:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await context.bot.send_message(chat_id=query.message.chat_id,
                                           text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ó–ê–Ø–í–ö–ò ===
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "–ó–∞—è–≤–∫–∞"
    if data == 'open_application':
        if not has_permission(user_id, 'use_form'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã.")
            return
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞—á–∞—Ç–∞
        if user_id in user_states:
            user_states[user_id]['application'] = 'started'
        await show_application_menu(update, user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –º–µ–Ω—é –∑–∞—è–≤–∫–∏
    elif data == 'back_to_main':
        await show_main_menu(update, user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–±–ª–µ–º—ã
    elif data == 'back_to_application':
        await show_application_menu(update, user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å" –≤ –º–µ–Ω—é –∑–∞—è–≤–∫–∏
    elif data == 'edit_application':
        # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –º–µ–Ω—é –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await show_application_menu(update, user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –º–µ–Ω—é –∑–∞—è–≤–∫–∏
    elif data == 'send':
        if not has_permission(user_id, 'initiator'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã.")
            return
        user_data = user_states.get(user_id, {})
        if all([user_data.get('dse'), user_data.get('problem_type'), user_data.get('rc'), user_data.get('description')]):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            all_data = load_data(DATA_FILE)

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            record_to_save = {
                'dse': user_data['dse'],
                'problem_type': user_data['problem_type'],
                'rc': user_data['rc'],
                'description': user_data['description'],
                'datetime': dt.now().strftime('%Y-%m-%d %H:%M:%S'),
                'user_id': user_id
            }

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ file_id
            if user_data.get('photo_file_id'):
                record_to_save['photo_file_id'] = user_data['photo_file_id']

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if user_id not in all_data:
                all_data[user_id] = []

            all_data[user_id].append(record_to_save)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            save_data(all_data, DATA_FILE)

            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ó–ê–Ø–í–ö–ò, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º application = 'started'
            if user_id in user_states:
                user_states[user_id] = {
                    'application': 'started',  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫ –Ω–∞—á–∞—Ç–æ–π –∑–∞—è–≤–∫–∏
                    'dse': '',
                    'problem_type': '',
                    'description': '',
                    'rc': '',
                    'photo_file_id': None  # –û—á–∏—â–∞–µ–º —Ñ–æ—Ç–æ —Ç–æ–∂–µ
                }

            response = f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\nüìÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {record_to_save['datetime']}"
            await query.edit_message_text(text=response)
            print(f"üì§ –ë–æ—Ç: {response}")

            # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await show_main_menu(update, user_id)
        else:
            await query.edit_message_text(text="‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã! –¢—Ä–µ–±—É–µ—Ç—Å—è: –î–°–ï, –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã, –†–¶ –∏ –û–ø–∏—Å–∞–Ω–∏–µ.")

    # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ü–†–û–°–ú–û–¢–†–ê –î–°–ï ===
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –î–°–ï
    elif data == 'view_dse_list':
        if not has_permission(user_id, 'view_dse_list'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –î–°–ï.")
            return
        await show_dse_list_menu(update, context)

    elif data == 'dse_view_all':
        if not has_permission(user_id, 'view_dse_list'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –î–°–ï.")
            return
        await show_all_dse_records(update, context, page=0)

    elif data.startswith('dse_view_all_'):
        if not has_permission(user_id, 'view_dse_list'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –î–°–ï.")
            return
        page = int(data.split('_')[-1])
        await show_all_dse_records(update, context, page=page)

    elif data == 'dse_search_interactive':
        if not has_permission(user_id, 'view_dse_list'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –î–°–ï.")
            return
        await start_interactive_dse_search(update, context)

    elif data.startswith('dse_select_'):
        if not has_permission(user_id, 'view_dse_list'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –î–°–ï.")
            return
        try:
            index = int(data.split('_')[-1])
            await select_dse_from_search(update, context, index)
        except (ValueError, IndexError):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞.")

    elif data == 'dse_search_clear':
        if not has_permission(user_id, 'view_dse_list'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –î–°–ï.")
            return
        user_id = str(query.from_user.id)
        if user_id in dse_view_states:
            dse_view_states[user_id]['current_search'] = ''
        await show_dse_search_results(update, context, user_id)

    elif data == 'dse_search_dse':
        if not has_permission(user_id, 'view_dse_list'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –î–°–ï.")
            return
        await start_dse_search(update, context, 'dse')

    elif data == 'dse_search_type':
        if not has_permission(user_id, 'view_dse_list'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∏–ø—É –ø—Ä–æ–±–ª–µ–º—ã.")
            return
        await start_dse_search(update, context, 'type')

    elif data == 'dse_statistics':
        if not has_permission(user_id, 'view_dse_list'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            return
        await show_dse_statistics(update, context)

    # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –î–°–ï ===
    elif data == 'watch_dse_menu':
        if not has_permission(user_id, 'watch_dse'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –î–°–ï.")
            return
        from dse_watcher import load_watched_dse_data  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        load_watched_dse_data()
        await show_watched_dse_menu(update, context)

    elif data == 'watch_add_dse':
        if not has_permission(user_id, 'watch_dse'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –î–°–ï.")
            return
        await start_add_watched_dse(update, context)

    elif data == 'watch_remove_dse':
        if not has_permission(user_id, 'watch_dse'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –î–°–ï.")
            return
        await start_remove_watched_dse(update, context)

    elif data == 'watch_list_dse':
        if not has_permission(user_id, 'watch_dse'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –î–°–ï.")
            return
        await show_watched_dse_list(update, context)

    elif data.startswith('watch_rm_idx_'):
        if not has_permission(user_id, 'watch_dse'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –î–°–ï.")
            return
        try:
            index = int(data.split('_')[-1])
            temp_list = user_states.get(user_id, {}).get('temp_watched_list', [])
            if 0 <= index < len(temp_list):
                dse_to_remove = temp_list[index]
                from dse_watcher import remove_watched_dse
                remove_watched_dse(user_id, dse_to_remove)

                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if user_id in user_states and 'temp_watched_list' in user_states[user_id]:
                    del user_states[user_id]['temp_watched_list']

                await query.edit_message_text(f"‚úÖ –î–°–ï '{dse_to_remove.upper()}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
                # –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –≤ –º–µ–Ω—é
                # await show_watched_dse_menu(update, context)
            else:
                await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except (ValueError, IndexError):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    # === –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –î–°–ï –ò–ó –°–ü–ò–°–ö–ê –î–õ–Ø –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø ===
    elif data.startswith('watch_select_dse_'):
        if not has_permission(user_id, 'watch_dse'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –î–°–ï.")
            return
        suffix = data[len('watch_select_dse_'):]

        if suffix == 'manual':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é
            user_states[user_id]['adding_watched_dse'] = True
            if 'adding_watched_dse_state' in user_states[user_id]:
                del user_states[user_id]['adding_watched_dse_state']
            if 'temp_dse_list' in user_states[user_id]:
                del user_states[user_id]['temp_dse_list']
            await query.edit_message_text("‚ûï –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –î–°–ï –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
        else:
            try:
                index = int(suffix)
                temp_list = user_states.get(user_id, {}).get('temp_dse_list', [])
                if 0 <= index < len(temp_list):
                    dse_to_watch = temp_list[index]
                    from dse_watcher import add_watched_dse
                    add_watched_dse(user_id, dse_to_watch)

                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    temp_keys = ['temp_dse_list', 'adding_watched_dse_state']
                    for key in temp_keys:
                        if user_id in user_states and key in user_states[user_id]:
                            del user_states[user_id][key]

                    await query.edit_message_text(f"‚úÖ –î–°–ï '{dse_to_watch.upper()}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
                    # –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                    await show_watched_dse_menu(update, context)
                else:
                    await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    # === –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø/–û–¢–ú–ï–ù–´ –û–¢ –ò–ù–ò–¶–ò–ê–¢–û–†–ê –ß–ê–¢–ê –ü–û –î–°–ï ===
    elif data in ['dse_chat_confirm_initiator', 'dse_chat_cancel_initiator']:
        # –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å—Ä–∞–∑—É
        # await query.answer() # –£–∂–µ –≤—ã–∑–≤–∞–Ω –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ button_handler
        print(f"üîç Button handler: Received '{data}' from {user.first_name} ({user_id})")
        from chat_manager import handle_initiator_confirmation
        # –ü–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ chat_manager
        await handle_initiator_confirmation(update, context)
        print(f"üîç Button handler: Finished handling '{data}' for {user.first_name} ({user_id})")

    # === –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –î–°–ï –ò–ó –°–ü–ò–°–ö–ê –î–õ–Ø –ß–ê–¢–ê ===
    elif data.startswith('chat_select_dse_'):
        # if  has_permission(user_id, 'initiator'):
        #     await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á–∞—Ç–∞ –ø–æ –î–°–ï.")
        #     return
        suffix = data[len('chat_select_dse_'):]

        if suffix == 'manual':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é
            user_states[user_id]['dse_chat_state'] = 'waiting_for_dse_input'
            if 'temp_dse_list' in user_states[user_id]:
                del user_states[user_id]['temp_dse_list']
            await query.edit_message_text("üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –î–°–ï –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        else:
            try:
                index = int(suffix)
                temp_list = user_states.get(user_id, {}).get('temp_dse_list', [])
                if 0 <= index < len(temp_list):
                    dse_value = temp_list[index]

                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    temp_keys = ['temp_dse_list', 'dse_chat_state']
                    for key in temp_keys:
                        if user_id in user_states and key in user_states[user_id]:
                            del user_states[user_id][key]

                    # –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –î–°–ï –≤ chat_manager –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                    # –ù–∞–º –Ω—É–∂–Ω–æ –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞. –°–æ–∑–¥–∞–¥–∏–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
                    from chat_manager import handle_dse_input

                    class FakeMessage:
                        def __init__(self, from_user, text):
                            self.from_user = from_user
                            self.text = text

                    class FakeUpdate:
                        def __init__(self, from_user, message_text):
                            self.effective_user = from_user
                            self.message = FakeMessage(from_user, message_text)
                            self.callback_query = None

                    fake_update = FakeUpdate(user, dse_value)
                    await handle_dse_input(fake_update, context)

                else:
                    await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            except (ValueError, IndexError):
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    # === –û–ë–†–ê–ë–û–¢–ö–ê PDF –ö–ù–û–ü–û–ö ===
    elif data == 'pdf_export_menu':
        if not has_permission(user_id, 'pdf_export'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF –æ—Ç—á–µ—Ç–æ–≤.")
            return
        await show_pdf_export_menu(update, context)

    elif data == 'pdf_search_dse':
        if not has_permission(user_id, 'pdf_export'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF –æ—Ç—á–µ—Ç–æ–≤.")
            return
        await start_pdf_dse_search(update, context)

    elif data == 'pdf_recent_records':
        if not has_permission(user_id, 'pdf_export'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF –æ—Ç—á–µ—Ç–æ–≤.")
            return
        await show_recent_records_for_pdf(update, context)

    elif data.startswith('pdf_select_'):
        if not has_permission(user_id, 'pdf_export'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF –æ—Ç—á–µ—Ç–æ–≤.")
            return
        try:
            index = int(data.split('_')[-1])
            records = pdf_session_records.get(user_id, [])
            if 0 <= index < len(records):
                record = records[index]
                await show_pdf_confirm_record(update, context, record, index)
            else:
                await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except (ValueError, IndexError):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞.")

    elif data.startswith('pdf_generate_'):
        if not has_permission(user_id, 'pdf_export'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF –æ—Ç—á–µ—Ç–æ–≤.")
            return
        try:
            index = int(data.split('_')[-1])
            records = pdf_session_records.get(user_id, [])
            if 0 <= index < len(records):
                record = records[index]
                await generate_pdf_report(update, context, record)
            else:
                await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except (ValueError, IndexError):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF.")

    # === –û–ë–†–ê–ë–û–¢–ö–ê –ê–î–ú–ò–ù–°–ö–ò–• –ö–ù–û–ü–û–ö ===
    elif data == 'admin_users':
        if get_user_role(user_id) != 'admin':
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        await show_admin_menu(update, context)

    elif data == 'admin_list_users':
        if get_user_role(user_id) != 'admin':
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        await show_users_list(update, context)

    elif data == 'admin_change_role_start':
        if get_user_role(user_id) != 'admin':
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        await start_change_role_process(update, context, user_id)

    elif data.startswith('set_role_'):
        if get_user_role(user_id) != 'admin':
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        # –§–æ—Ä–º–∞—Ç: set_role_USERID_ROLE
        parts = data.split('_')
        if len(parts) >= 4:
            target_user_id = parts[2]
            new_role = parts[3]

            if set_user_role(target_user_id, new_role):
                users = get_all_users()
                target_user = users.get(target_user_id, {})
                user_name = target_user.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                role_name = ROLES.get(new_role, new_role)
                await query.edit_message_text(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {role_name}")
                print(f"üîß –ê–¥–º–∏–Ω {user.first_name} –∏–∑–º–µ–Ω–∏–ª —Ä–æ–ª—å {user_name} –Ω–∞ {new_role}")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏")
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")

    # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –≠–ö–°–ü–û–†–¢–ê –î–ê–ù–ù–´–• ===
    elif data == 'admin_export_data':
        if get_user_role(user_id) != 'admin':
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        await start_data_export(update, context)

    elif data == 'export_send_chat':
        if get_user_role(user_id) != 'admin':
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        await send_file_to_chat(update, context)

    elif data == 'export_send_email':
        if get_user_role(user_id) != 'admin':
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        await request_email_address(update, context)

    elif data == 'admin_test_smtp':
        if get_user_role(user_id) != 'admin':
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        await test_smtp_connection(update, context)

    # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–õ–ò–ß–ö–ê–ú–ò ===
    elif data == 'admin_manage_nicknames':
        if get_user_role(user_id) != 'admin':
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        await show_nicknames_menu(update, context)

    elif data == 'nickname_set':
        if get_user_role(user_id) != 'admin':
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        await show_users_for_nickname(update, context, 'set')

    elif data == 'nickname_remove':
        if get_user_role(user_id) != 'admin':
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        await show_users_for_nickname(update, context, 'remove')

    elif data == 'nickname_list':
        if get_user_role(user_id) != 'admin':
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        await show_nicknames_list(update, context)

    elif data.startswith('nickname_set_user_'):
        if get_user_role(user_id) != 'admin':
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        target_user_id = data.split('_')[-1]
        await start_nickname_input(update, context, target_user_id)

    elif data.startswith('nickname_remove_user_'):
        if get_user_role(user_id) != 'admin':
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        target_user_id = data.split('_')[-1]
        await remove_nickname_confirm(update, context, target_user_id)

    # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø –§–û–†–ú–´ ===
    # –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π (–≤ –º–µ–Ω—é –∑–∞—è–≤–∫–∏)
    elif data == 'set_dse':
        if not has_permission(user_id, 'use_form'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã.")
            return
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –î–°–ï
        await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –î–°–ï:")
        user_states[user_id]['current_input'] = 'dse'

    elif data == 'set_problem':
        if not has_permission(user_id, 'use_form'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã.")
            return
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –ø—Ä–æ–±–ª–µ–º
        await show_problem_types(update, user_id)

    elif data == 'set_rc':
        if not has_permission(user_id, 'use_form'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã.")
            return
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤
        await show_rc_types(update, user_id)

    elif data == 'set_description':
        if not has_permission(user_id, 'use_form'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã.")
            return
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞:")
        user_states[user_id]['current_input'] = 'description'

    # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò –§–û–¢–û ===
    elif data == 'set_photo':
        if not has_permission(user_id, 'use_form'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã.")
            return
        await request_photo(update, context)

    elif data == 'cancel_photo':
        user_id = str(query.from_user.id)
        # –û—Ç–º–µ–Ω—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ
        if 'waiting_for_photo' in user_states[user_id]:
            del user_states[user_id]['waiting_for_photo']
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∑–∞—è–≤–∫–∏
        await show_application_menu(update, user_id)

    elif data.startswith('problem_'):
        if not has_permission(user_id, 'use_form'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã.")
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
        problem_index = int(data.split('_')[1])
        selected_problem = PROBLEM_TYPES[problem_index]
        user_states[user_id]['problem_type'] = selected_problem

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∑–∞—è–≤–∫–∏
        await show_application_menu(update, user_id)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤–∏–¥ –ø—Ä–æ–±–ª–µ–º—ã: {selected_problem}")

    elif data.startswith('rc_'):
        if not has_permission(user_id, 'use_form'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã.")
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π —Ü–µ–Ω—Ç—Ä
        rc_index = int(data.split('_')[1])
        selected_rc = RC_TYPES[rc_index]
        user_states[user_id]['rc'] = selected_rc

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∑–∞—è–≤–∫–∏
        await show_application_menu(update, user_id)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–∞–±–æ—á–∏–π —Ü–µ–Ω—Ç—Ä (–†–¶): {selected_rc}")


    # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò –ß–ê–¢–ê ===
    elif data == 'chat_dse_menu':
        if not has_permission(user_id, 'chat_dse'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á–∞—Ç–∞ –ø–æ –î–°–ï.")
            return
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é —á–∞—Ç–∞ –° –í–´–ë–û–†–û–ú –ò–ó –°–ü–ò–°–ö–ê
        await start_dse_chat_search_with_selection(update, context)

        # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ß–ê–¢–û–ú (–∏–∑ chat_manager) ===
    elif data in ['chat_pause', 'chat_resume', 'chat_end']:
        from chat_manager import handle_chat_control
        await handle_chat_control(update, context)

        # === –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –ß–ê–¢–ê –ü–û –î–°–ï (–∏–∑ chat_manager) ===
    elif data in ['dse_chat_confirm', 'dse_chat_cancel_final']:
        from chat_manager import handle_dse_chat_confirmation
        await handle_dse_chat_confirmation(update, context)

        # === –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –î–õ–Ø –ß–ê–¢–ê –ü–û –î–°–ï (–∏–∑ chat_manager) ===
    elif data.startswith('dse_chat_select_'):
        from chat_manager import handle_dse_user_selection
        await handle_dse_user_selection(update, context)

        # === –ù–û–í–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï/–û–¢–ú–ï–ù–ê –û–¢ –ò–ù–ò–¶–ò–ê–¢–û–†–ê ===
    elif data in ['dse_chat_confirm_initiator', 'dse_chat_cancel_initiator']:
        # callback_data –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
        from chat_manager import handle_initiator_confirmation
        await handle_initiator_confirmation(update, context)

        # === –ù–û–í–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï/–û–¢–ú–ï–ù–ê –û–¢ –û–¢–í–ï–¢–ß–ò–ö–ê ===
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ callback_data –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç:
        # 'dse_chat_confirm_responder_INITIATOR_ID' –∏–ª–∏ 'dse_chat_cancel_responder_INITIATOR_ID'
    elif '_responder_' in data:
        # callback_data –¥–ª—è –æ—Ç–≤–µ—Ç—á–∏–∫–∞
        from chat_manager import handle_responder_confirmation
        await handle_responder_confirmation(update, context)




# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ===

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ç–æ"""

    user = update.effective_user
    user_id = str(user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    text = ""
    if update.message.text:
        text = update.message.text
    elif update.message.caption:  # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
        text = update.message.caption

    print(f"üë® @{user.username}: {text if text else '[–§–û–¢–û/–î–†–£–ì–û–ï]'}")

    # === –ü–†–û–í–ï–†–ö–ê –ù–ê –§–û–¢–û ===
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states and user_states[user_id].get('waiting_for_photo'):
        if update.message.photo:
            # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤ –º–∞—Å—Å–∏–≤–µ)
            photo_file_id = update.message.photo[-1].file_id

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_states[user_id]['photo_file_id'] = photo_file_id
            # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
            del user_states[user_id]['waiting_for_photo']

            await update.message.reply_text("‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
            await show_application_menu(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –∑–∞—è–≤–∫–∏
            return  # –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º
        elif update.message.text and update.message.text.startswith('/'):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
            pass  # –ü–æ–∑–≤–æ–ª–∏–º –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –∫–æ–º–∞–Ω–¥ –∑–∞–Ω—è—Ç—å—Å—è —ç—Ç–∏–º
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç, –∞ –Ω–µ —Ñ–æ—Ç–æ
            await update.message.reply_text(
                "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel_photo –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            return  # –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

    # === –ü–†–û–í–ï–†–ö–ê –ù–ê –ê–ö–¢–ò–í–ù–´–ô –ß–ê–¢ ===
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ –∏–ª–∏ —á–∞—Ç–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
    from chat_manager import active_chats, handle_chat_message
    if user_id in active_chats and active_chats[user_id].get('status') in ['active', 'paused']:
        await handle_chat_message(update, context)
        return

    # === –ü–†–û–í–ï–†–ö–ê –ù–ê –ê–î–ú–ò–ù–°–ö–ò–ï –ò –ü–û–ò–°–ö–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ===
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ (–∞–¥–º–∏–Ω)
    if user_id in admin_states and admin_states[user_id].get('changing_role'):
        target_user_id = text.strip()
        users = get_all_users()

        if target_user_id in users:
            del admin_states[user_id]  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π update –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            class FakeUpdate:
                def __init__(self, message):
                    self.message = message
                    self.callback_query = None
                    self.effective_user = message.from_user

            fake_update = FakeUpdate(update.message)
            await show_role_selection_menu(fake_update, context, target_user_id)
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ (–∞–¥–º–∏–Ω)
    if user_id in admin_states and admin_states[user_id].get('waiting_for_email'):
        email = text.strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
        if '@' in email and '.' in email:
            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è email
            admin_states[user_id].pop('waiting_for_email', None)
            await send_file_by_email(update, context, email)
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å.\n"
                "–ü—Ä–∏–º–µ—Ä: user@example.com"
            )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –∫–ª–∏—á–∫–∏ (–∞–¥–º–∏–Ω)
    if user_id in admin_states and admin_states[user_id].get('setting_nickname'):
        nickname = text.strip()
        target_user_id = admin_states[user_id].get('setting_nickname_for')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–ª–∏—á–∫–∏
        if len(nickname) > 20:
            await update.message.reply_text("‚ùå –ö–ª–∏—á–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤).")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏—á–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
        if not nickname:
            await update.message.reply_text("‚ùå –ö–ª–∏—á–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–π –∫–ª–∏—á–∫–∏ –Ω–µ—Ç —É –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if check_nickname_exists(nickname):
            current_owner_id = None
            for uid, udata in get_all_users().items():
                if udata.get('nickname', '').lower() == nickname.lower():
                    current_owner_id = uid
                    break
            
            if current_owner_id != target_user_id:
                await update.message.reply_text(f"‚ùå –ö–ª–∏—á–∫–∞ '{nickname}' —É–∂–µ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏—á–∫—É
        if set_user_nickname(target_user_id, nickname):
            users = get_all_users()
            target_user = users.get(target_user_id, {})
            user_name = target_user.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            
            await update.message.reply_text(f"‚úÖ –ö–ª–∏—á–∫–∞ '{nickname}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}.")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–ª–∏—á–∫–∏.")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        admin_states[user_id].pop('setting_nickname', None)
        admin_states[user_id].pop('setting_nickname_for', None)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –î–°–ï (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫)
    if user_id in dse_view_states and dse_view_states[user_id].get('searching_dse'):
        await handle_dse_search_input(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –î–°–ï (–æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫)
    if user_id in dse_view_states:
        if dse_view_states[user_id].get('searching_dse'):
            del dse_view_states[user_id]

            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π update –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            class FakeUpdate:
                def __init__(self, message):
                    self.message = message
                    self.callback_query = None
                    self.effective_user = message.from_user

            fake_update = FakeUpdate(update.message)
            await show_search_results(fake_update, context, text, 'dse')
            return
        elif dse_view_states[user_id].get('searching_type'):
            del dse_view_states[user_id]

            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π update –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            class FakeUpdate:
                def __init__(self, message):
                    self.message = message
                    self.callback_query = None
                    self.effective_user = message.from_user

            fake_update = FakeUpdate(update.message)
            await show_search_results(fake_update, context, text, 'type')
            return

    # === –ü–†–û–í–ï–†–ö–ê –ù–ê –í–í–û–î –î–ê–ù–ù–´–• –î–õ–Ø –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –î–°–ï ===
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –î–°–ï –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –≤–≤–æ–¥–∞
    if (user_id in user_states and
            user_states[user_id].get('adding_watched_dse') and
            user_states[user_id].get('adding_watched_dse_state') != 'selecting_or_manual'):

        dse_to_watch = text.strip()
        if dse_to_watch:
            from dse_watcher import add_watched_dse
            add_watched_dse(user_id, dse_to_watch)

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if 'adding_watched_dse' in user_states[user_id]:
                del user_states[user_id]['adding_watched_dse']
            if 'adding_watched_dse_state' in user_states[user_id]:
                del user_states[user_id]['adding_watched_dse_state']

            response = f"‚úÖ –î–°–ï '{dse_to_watch.upper()}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
            await update.message.reply_text(text=response)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            await show_watched_dse_menu(update, context)
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –î–°–ï.")
        return  # –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—è

    # === –ü–†–û–í–ï–†–ö–ê –ù–ê –í–í–û–î –î–°–ï –î–õ–Ø –ß–ê–¢–ê ===
    elif (user_id in user_states and
          user_states[user_id].get('dse_chat_state') == 'waiting_for_dse_input'):

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if 'dse_chat_state' in user_states[user_id]:
            del user_states[user_id]['dse_chat_state']

        # –ü–µ—Ä–µ–¥–∞–µ–º –≤–≤–æ–¥ –≤ chat_manager
        from chat_manager import handle_dse_input
        await handle_dse_input(update, context)
        return  # –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—è

    # === –ü–†–û–í–ï–†–ö–ê –ù–ê –í–í–û–î –î–ê–ù–ù–´–• –î–õ–Ø –§–û–†–ú–´ ===
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ñ–æ—Ä–º—ã)
    if user_id in user_states and 'current_input' in user_states[user_id]:
        current_input = user_states[user_id]['current_input']

        if current_input == 'dse':
            user_states[user_id]['dse'] = text
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –î–°–ï: {text}")
        elif current_input == 'description':
            user_states[user_id]['description'] = text
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ: {text}")

        # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        del user_states[user_id]['current_input']

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∑–∞—è–≤–∫–∏ —Å–Ω–æ–≤–∞
        response = f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {text}"
        await update.message.reply_text(text=response)
        await show_application_menu(update, user_id)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –∑–∞—è–≤–∫–∏
        return  # –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ "–û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç"

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –î–°–ï –¥–ª—è PDF
    elif user_states.get(user_id, {}).get('pdf_search_dse'):
        user_states[user_id]['pdf_search_dse'] = False
        await handle_pdf_dse_search(update, context)
        return

    else:
        # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"
        # response = f"{user_states[user_id].get('dse_chat_state')} {'waiting_for_dse_input'}"
        await update.message.reply_text(text=response)


# === PDF EXPORT FUNCTIONS ===

async def show_pdf_export_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF"""
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –î–°–ï", callback_data='pdf_search_dse')],
        [InlineKeyboardButton("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏", callback_data='pdf_recent_records')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "üìÑ PDF –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–∫–∏\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏:"
    
    await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)


async def show_recent_records_for_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ PDF —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    data = load_data(DATA_FILE)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
    all_records = []
    for user_id, user_records in data.items():
        for record in user_records:
            record['user_id'] = user_id  # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∑–∞–ø–∏—Å–∏
            all_records.append(record)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    all_records.sort(key=lambda x: x.get('datetime', ''), reverse=True)
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
    recent_records = all_records[:10]
    
    if not recent_records:
        await update.callback_query.edit_message_text(
            "‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='pdf_export_menu')]])
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Å–µ—Å—Å–∏—é
    user_id = str(update.callback_query.from_user.id)
    pdf_session_records[user_id] = recent_records
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = []
    for i, record in enumerate(recent_records):
        dse = record.get('dse', '–ù–µ—Ç –î–°–ï')
        problem_type = record.get('problem_type', '–ù–µ—Ç —Ç–∏–ø–∞')[:20]
        datetime_str = record.get('datetime', '–ù–µ—Ç –¥–∞—Ç—ã')[:10]
        
        button_text = f"{dse} - {problem_type} ({datetime_str})"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f'pdf_select_{i}')])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='pdf_export_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF:\n\n"
    
    await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π PDF —Å–µ—Å—Å–∏–∏
pdf_session_records = {}


async def start_pdf_dse_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –î–°–ï –¥–ª—è PDF —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    user_id = str(update.callback_query.from_user.id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = user_states.get(user_id, {})
    user_states[user_id]['pdf_search_dse'] = True
    
    await update.callback_query.edit_message_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –î–°–ï –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏:"
    )


async def show_pdf_confirm_record(update: Update, context: ContextTypes.DEFAULT_TYPE, record: dict, index: int) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è PDF –¥–ª—è –∑–∞–ø–∏—Å–∏"""
    user_display = get_user_display_name(record.get('user_id', ''))
    
    text = f"üìÑ –°–æ–∑–¥–∞—Ç—å PDF –¥–ª—è –∑–∞—è–≤–∫–∏?\n\n"
    text += f"üìã –î–°–ï: {record.get('dse', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"üîß –†–¶: {record.get('rc', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"‚ö†Ô∏è –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: {record.get('problem_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {record.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:100]}...\n"
    text += f"üìÖ –î–∞—Ç–∞: {record.get('datetime', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display}\n"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å PDF", callback_data=f'pdf_generate_{index}')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='pdf_export_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text=text, reply_markup=reply_markup)


async def handle_pdf_dse_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫ –î–°–ï –¥–ª—è PDF"""
    user_id = str(update.message.from_user.id)
    search_dse = update.message.text.strip().upper()
    
    # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ —Å –¥–∞–Ω–Ω—ã–º –î–°–ï
    data = load_data(DATA_FILE)
    found_records = []
    
    for user_id_data, user_records in data.items():
        for i, record in enumerate(user_records):
            if record.get('dse', '').upper() == search_dse:
                record['user_id'] = user_id_data
                record['record_index'] = f"{user_id_data}_{i}"
                found_records.append(record)
    
    if not found_records:
        await update.message.reply_text(
            f"‚ùå –ó–∞—è–≤–∫–∏ —Å –î–°–ï '{search_dse}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='pdf_export_menu')]])
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    pdf_session_records[user_id] = found_records
    
    if len(found_records) == 1:
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å, —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å PDF
        record = found_records[0]
        await show_pdf_confirm_record(update, context, record, 0)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        await show_pdf_search_results(update, context, found_records)


async def show_pdf_search_results(update: Update, context: ContextTypes.DEFAULT_TYPE, records: list) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ PDF"""
    keyboard = []
    
    for i, record in enumerate(records):
        problem_type = record.get('problem_type', '–ù–µ—Ç —Ç–∏–ø–∞')[:25]
        datetime_str = record.get('datetime', '–ù–µ—Ç –¥–∞—Ç—ã')[:16]
        user_display = get_user_display_name(record.get('user_id', ''))
        
        button_text = f"{problem_type} - {datetime_str} ({user_display})"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f'pdf_select_{i}')])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='pdf_export_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"üîç –ù–∞–π–¥–µ–Ω–æ {len(records)} –∑–∞—è–≤–æ–∫ —Å –î–°–ï '{records[0].get('dse', '')}':\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF:"
    
    await update.message.reply_text(text=text, reply_markup=reply_markup)


async def generate_pdf_report(update: Update, context: ContextTypes.DEFAULT_TYPE, record: dict) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF –æ—Ç—á–µ—Ç –¥–ª—è –∑–∞—è–≤–∫–∏"""
    await update.callback_query.edit_message_text("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ PDF –æ—Ç—á–µ—Ç–∞...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        from pdf_generator import create_dse_pdf_report
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è PDF
        pdf_data = {
            'dse': record.get('dse', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'rc': record.get('rc', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'problem_type': record.get('problem_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'description': record.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'datetime': record.get('datetime', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'user_display': get_user_display_name(record.get('user_id', ''))
        }
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        dse_safe = record.get('dse', 'unknown').replace('/', '_').replace('\\', '_')
        date_str = record.get('datetime', 'unknown')[:10].replace('-', '') if record.get('datetime') else 'unknown'
        pdf_filename = f"dse_report_{dse_safe}_{date_str}.pdf"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        created_filename = create_dse_pdf_report(pdf_data, pdf_filename)
        
        if created_filename and os.path.exists(created_filename):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(created_filename, 'rb') as f:
                await context.bot.send_document(
                    chat_id=update.callback_query.from_user.id,
                    document=f,
                    filename=created_filename,
                    caption=f"üìÑ PDF –æ—Ç—á–µ—Ç –¥–ª—è –î–°–ï: {record.get('dse', 'unknown')}"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(created_filename)
            
            await update.callback_query.edit_message_text(
                f"‚úÖ PDF –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                f"üìã –î–°–ï: {record.get('dse', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üìÑ –§–∞–π–ª: {created_filename}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]])
            )
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF —Ñ–∞–π–ª")
        
    except Exception as e:
        await update.callback_query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF –æ—Ç—á–µ—Ç–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='pdf_export_menu')]])
        )
