# commands.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from config import load_data, save_data, PROBLEM_TYPES, DATA_FILE
from dse_manager import get_all_dse_records, search_dse_records
from user_manager import register_user, get_user_role, has_permission, set_user_role, ROLES, get_all_users

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_states = {}
admin_states = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
dse_view_states = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –î–°–ï


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    user_id = str(user.id)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = register_user(
        user_id,
        user.username,
        user.first_name,
        user.last_name
    )

    print(f"üì• {user.first_name} ({get_user_role(user_id)}): /start")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if has_permission(user_id, 'view_main_menu'):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–æ—Ä–º—ã
        user_states[user_id] = {
            'application': '',  # –ë—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å "started" –∫–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—á–∞—Ç–∞
            'dse': '',
            'problem_type': '',
            'description': ''
        }
        await show_main_menu(update, user_id)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø—Ä–∞–≤
        if update.callback_query:
            await update.callback_query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        else:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )


async def show_application_menu(update: Update, user_id: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    user_data = user_states.get(user_id, {'application': '', 'dse': '', 'problem_type': '', 'description': ''})

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
    dse_text = f"–î–°–ï ‚úÖ" if user_data['dse'] else "–î–°–ï"
    problem_text = f"–í–∏–¥ –ø—Ä–æ–±–ª–µ–º—ã ‚úÖ" if user_data['problem_type'] else "–í–∏–¥ –ø—Ä–æ–±–ª–µ–º—ã"
    desc_text = f"–û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ ‚úÖ" if user_data['description'] else "–û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞"

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
    keyboard = [
        [InlineKeyboardButton(dse_text, callback_data='set_dse')],
        [InlineKeyboardButton(problem_text, callback_data='set_problem')],
        [InlineKeyboardButton(desc_text, callback_data='set_description')],
    ]

    # –ö–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    if all([user_data['dse'], user_data['problem_type'], user_data['description']]):
        keyboard.append([InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='send')])
        keyboard.append([InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data='edit_application')])

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_text = "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É:\n\n"
    welcome_text += (
        f"‚Ä¢ {dse_text}\n"
        f"‚Ä¢ {problem_text}\n"
        f"‚Ä¢ {desc_text}\n\n"
    )
    if all([user_data['dse'], user_data['problem_type'], user_data['description']]):
        welcome_text += "–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏."

    if update.callback_query:
        await update.callback_query.edit_message_text(text=welcome_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text=welcome_text, reply_markup=reply_markup)


async def show_main_menu(update: Update, user_id: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    user_data = user_states.get(user_id, {'application': '', 'dse': '', 'problem_type': '', 'description': ''})
    role = get_user_role(user_id)

    keyboard = []

    # –ó–∞–º–µ–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–µ–π –Ω–∞ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É "–ó–∞—è–≤–∫–∞"
    if has_permission(user_id, 'use_form'):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞—è–≤–∫–∞" —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º, –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
        app_status = user_data.get('application', '')
        dse_filled = user_data.get('dse', '')
        problem_filled = user_data.get('problem_type', '')
        desc_filled = user_data.get('description', '')

        if app_status == 'started' or any([dse_filled, problem_filled, desc_filled]):
            app_text = "üìù –ó–∞—è–≤–∫–∞ ‚ö†Ô∏è"  # ‚ö†Ô∏è –µ—Å–ª–∏ –Ω–∞—á–∞—Ç–∞, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            if all([dse_filled, problem_filled, desc_filled]):
                app_text = "üìù –ó–∞—è–≤–∫–∞ ‚úÖ"  # ‚úÖ –µ—Å–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
        else:
            app_text = "üìù –ó–∞—è–≤–∫–∞"

        keyboard.append([InlineKeyboardButton(app_text, callback_data='open_application')])

    # === –ö–ù–û–ü–ö–ê 6: "üìã –°–ø–∏—Å–æ–∫ –î–°–ï" ===
    if has_permission(user_id, 'view_dse_list'):
        keyboard.append([InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –î–°–ï", callback_data='view_dse_list')])

    # === –ö–ù–û–ü–ö–ê 7: "üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –î–°–ï" ===
    if has_permission(user_id, 'view_dse_list'):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ –ø—Ä–∞–≤–æ
        keyboard.append([InlineKeyboardButton("üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –î–°–ï", callback_data='watch_dse_menu')])

    # === –ö–ù–û–ü–ö–ê 8: "üí¨ –ß–∞—Ç –ø–æ –î–°–ï" ===
    if has_permission(user_id, 'chat_dse'):
        keyboard.append([InlineKeyboardButton("üí¨ –ß–∞—Ç –ø–æ –î–°–ï", callback_data='chat_dse_menu')])

    # === –ö–ù–û–ü–ö–ê 9: "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏" ===
    if role == 'admin':
        keyboard.append([InlineKeyboardButton("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data='admin_users')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    role_text = ROLES.get(role, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    welcome_text = f"üë§ –†–æ–ª—å: {role_text}\n\n"

    if has_permission(user_id, 'use_form'):
        welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
    else:
        welcome_text += "–£ –≤–∞—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞."

    if update.callback_query:
        await update.callback_query.edit_message_text(text=welcome_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text=welcome_text, reply_markup=reply_markup)


# === –§–£–ù–ö–¶–ò–ò –ü–†–û–°–ú–û–¢–†–ê –î–°–ï ===

async def show_dse_list_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –î–°–ï"""
    keyboard = [
        [InlineKeyboardButton("üìã –í—Å–µ –∑–∞–ø–∏—Å–∏", callback_data='dse_view_all')],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –î–°–ï", callback_data='dse_search_dse')],
        [InlineKeyboardButton("üîé –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É –ø—Ä–æ–±–ª–µ–º—ã", callback_data='dse_search_type')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='dse_statistics')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text="üìã –ú–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –î–°–ï:",
        reply_markup=reply_markup
    )


async def show_all_dse_records(update: Update, context: ContextTypes.DEFAULT_TYPE, page=0) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –î–°–ï —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    records = get_all_dse_records()
    records_per_page = 5
    total_pages = (len(records) + records_per_page - 1) // records_per_page if records else 1

    if not records:
        await update.callback_query.edit_message_text("üìã –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –î–°–ï.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * records_per_page
    end_idx = start_idx + records_per_page
    page_records = records[start_idx:end_idx]

    text = f"üìã –í—Å–µ –∑–∞–ø–∏—Å–∏ –î–°–ï (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):\n\n"

    for i, record in enumerate(page_records, start=start_idx + 1):
        text += f"{i}. –î–°–ï: {record.get('dse', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"   –¢–∏–ø: {record.get('problem_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {record.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:50]}...\n"
        text += f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {record.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []

    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'dse_view_all_{page - 1}'))

    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f'dse_view_all_{page + 1}'))

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    nav_buttons.append(InlineKeyboardButton("‚Ü©Ô∏è –ú–µ–Ω—é", callback_data='view_dse_list'))

    keyboard = []
    if nav_buttons:
        keyboard.append(nav_buttons)

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)


async def start_dse_search(update: Update, context: ContextTypes.DEFAULT_TYPE, search_type: str) -> None:
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –î–°–ï"""
    user_id = str(update.callback_query.from_user.id)

    if search_type == 'dse':
        dse_view_states[user_id] = {'searching_dse': True}
        await update.callback_query.edit_message_text("üîç –í–≤–µ–¥–∏—Ç–µ –î–°–ï –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    elif search_type == 'type':
        dse_view_states[user_id] = {'searching_type': True}
        await update.callback_query.edit_message_text("üîé –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:")


async def show_search_results(update: Update, context: ContextTypes.DEFAULT_TYPE, search_term: str,
                              search_type: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"""
    if search_type == 'dse':
        records = search_dse_records(dse_filter=search_term)
        search_title = f"–ø–æ –î–°–ï '{search_term}'"
    else:  # type
        records = search_dse_records(problem_type_filter=search_term)
        search_title = f"–ø–æ —Ç–∏–ø—É –ø—Ä–æ–±–ª–µ–º—ã '{search_term}'"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø update –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if update.callback_query:
        # –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ callback_query
        if not records:
            await update.callback_query.edit_message_text(f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ {search_title}.")
            return

        text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ {search_title}:\n\n"

        for i, record in enumerate(records[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            text += f"{i}. –î–°–ï: {record.get('dse', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            text += f"   –¢–∏–ø: {record.get('problem_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {record.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:50]}...\n\n"

        if len(records) > 10:
            text += f"... –∏ –µ—â–µ {len(records) - 10} –∑–∞–ø–∏—Å–µ–π"

        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='view_dse_list')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)

    elif update.message:
        # –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not records:
            await update.message.reply_text(f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ {search_title}.")
            return

        text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ {search_title}:\n\n"

        for i, record in enumerate(records[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            text += f"{i}. –î–°–ï: {record.get('dse', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            text += f"   –¢–∏–ø: {record.get('problem_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {record.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:50]}...\n\n"

        if len(records) > 10:
            text += f"... –∏ –µ—â–µ {len(records) - 10} –∑–∞–ø–∏—Å–µ–π"

        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='view_dse_list')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(text=text, reply_markup=reply_markup)


async def show_dse_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –î–°–ï"""
    records = get_all_dse_records()

    if not records:
        await update.callback_query.edit_message_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_records = len(records)

    # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º
    problem_counts = {}
    for record in records:
        problem_type = record.get('problem_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        problem_counts[problem_type] = problem_counts.get(problem_type, 0) + 1

    # –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –î–°–ï
    unique_dse = len(set([r.get('dse', '') for r in records if r.get('dse', '')]))

    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –î–°–ï:\n\n"
    text += f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}\n"
    text += f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –î–°–ï: {unique_dse}\n\n"
    text += "–ü–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º:\n"

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    sorted_problems = sorted(problem_counts.items(), key=lambda x: x[1], reverse=True)

    for problem_type, count in sorted_problems[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
        text += f"‚Ä¢ {problem_type}: {count}\n"

    keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='view_dse_list')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)


async def show_problem_types(update: Update, user_id: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –ø—Ä–æ–±–ª–µ–º"""
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = []
    for i in range(0, len(PROBLEM_TYPES), 3):  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
        row = []
        for j in range(i, min(i + 3, len(PROBLEM_TYPES))):
            row.append(InlineKeyboardButton(PROBLEM_TYPES[j], callback_data=f'problem_{j}'))
        keyboard.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∑–∞—è–≤–∫–∏)
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_application')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –ø—Ä–æ–±–ª–µ–º—ã:",
        reply_markup=reply_markup
    )


# === –ê–î–ú–ò–ù –§–£–ù–ö–¶–ò–ò ===

async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='admin_list_users')],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='admin_change_role_start')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text="üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=reply_markup
    )


async def show_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = get_all_users()

    if not users:
        await update.callback_query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
        return

    text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user_id, user_data in users.items():
        role = user_data.get('role', 'user')
        role_text = ROLES.get(role, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        name = user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        username = user_data.get('username', '')
        if username:
            text += f"‚Ä¢ {name} (@{username}) - {role_text} (ID: {user_id})\n"
        else:
            text += f"‚Ä¢ {name} - {role_text} (ID: {user_id})\n"

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_users')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)


async def start_change_role_process(update: Update, context: ContextTypes.DEFAULT_TYPE, admin_id: str) -> None:
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏"""
    admin_states[admin_id] = {'changing_role': True}
    await update.callback_query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å:"
    )


async def show_role_selection_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user_id: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–π"""
    users = get_all_users()
    target_user = users.get(target_user_id, {})
    user_name = target_user.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

    keyboard = []
    current_role = target_user.get('role', 'user')

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
    for role_key, role_name in ROLES.items():
        if role_key == current_role:
            button_text = f"‚úÖ {role_name}"
        else:
            button_text = role_name
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f'set_role_{target_user_id}_{role_key}')])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data='admin_users')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø update
    if update.callback_query:
        await update.callback_query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è {user_name} (ID: {target_user_id}):",
            reply_markup=reply_markup
        )
    elif update.message:
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è {user_name} (ID: {target_user_id}):",
            reply_markup=reply_markup
        )


# === –§–£–ù–ö–¶–ò–ò –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –î–°–ï ===

async def show_watched_dse_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –î–°–ï."""
    user = update.effective_user
    user_id = str(user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_permission(user_id, 'view_dse_list'):
        if update.callback_query:
            await update.callback_query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –î–°–ï.")
        elif update.message:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –î–°–ï.")
        return

    from dse_watcher import get_watched_dse_list
    watched_list = get_watched_dse_list(user_id)

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –î–°–ï", callback_data='watch_add_dse')],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –î–°–ï", callback_data='watch_remove_dse')],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö", callback_data='watch_list_dse')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    menu_text = "üëÄ –ú–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –î–°–ï\n\n"
    menu_text += "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –î–°–ï.\n"

    if update.callback_query:
        await update.callback_query.edit_message_text(text=menu_text, reply_markup=reply_markup)
    elif update.message:
        await update.message.reply_text(text=menu_text, reply_markup=reply_markup)


async def start_add_watched_dse(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –î–°–ï –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
    user_id = str(update.callback_query.from_user.id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –î–°–ï –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    user_states[user_id] = user_states.get(user_id, {})
    user_states[user_id]['adding_watched_dse'] = True

    await update.callback_query.edit_message_text("‚ûï –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –î–°–ï –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")


async def start_remove_watched_dse(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –î–°–ï –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
    user = update.callback_query.from_user
    user_id = str(user.id)

    from dse_watcher import get_watched_dse_list
    watched_list = get_watched_dse_list(user_id)

    if not watched_list:
        await update.callback_query.edit_message_text("üì≠ –í–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –î–°–ï –ø—É—Å—Ç.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –î–°–ï –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = []
    for i, dse_value in enumerate(watched_list):
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π callback_data —Å –∏–Ω–¥–µ–∫—Å–æ–º
        callback_data = f"watch_rm_idx_{i}"
        keyboard.append([InlineKeyboardButton(dse_value.upper(), callback_data=callback_data)])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data='watch_dse_menu')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É
    user_states[user_id] = user_states.get(user_id, {})
    user_states[user_id]['temp_watched_list'] = watched_list

    await update.callback_query.edit_message_text("‚ûñ –í—ã–±–µ—Ä–∏—Ç–µ –î–°–ï –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:",
                                                  reply_markup=reply_markup)


async def show_watched_dse_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –î–°–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.callback_query.from_user
    user_id = str(user.id)

    from dse_watcher import get_watched_dse_list
    watched_list = get_watched_dse_list(user_id)

    if not watched_list:
        text = "üì≠ –í–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –î–°–ï –ø—É—Å—Ç.\n\n"
        text += "–ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –î–°–ï' –≤ –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='watch_dse_menu')]]
    else:
        text = "üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –î–°–ï:\n\n"
        for i, dse_value in enumerate(watched_list, 1):
            text += f"{i}. {dse_value.upper()}\n"
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='watch_dse_menu')]]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)


# === –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ===

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""

    query = update.callback_query
    await query.answer()

    user = query.from_user
    user_id = str(user.id)
    data = query.data

    print(f"üñ±Ô∏è {user.first_name}: –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '{data}'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not has_permission(user_id, 'view_main_menu'):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ó–ê–Ø–í–ö–ò ===
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "–ó–∞—è–≤–∫–∞"
    if data == 'open_application':
        if not has_permission(user_id, 'use_form'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã.")
            return
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞—á–∞—Ç–∞
        if user_id in user_states:
            user_states[user_id]['application'] = 'started'
        await show_application_menu(update, user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –º–µ–Ω—é –∑–∞—è–≤–∫–∏
    elif data == 'back_to_main':
        await show_main_menu(update, user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–±–ª–µ–º—ã
    elif data == 'back_to_application':
        await show_application_menu(update, user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å" –≤ –º–µ–Ω—é –∑–∞—è–≤–∫–∏
    elif data == 'edit_application':
        # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –º–µ–Ω—é –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await show_application_menu(update, user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –º–µ–Ω—é –∑–∞—è–≤–∫–∏
    elif data == 'send':
        if not has_permission(user_id, 'use_form'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã.")
            return
        user_data = user_states.get(user_id, {})
        if all([user_data.get('dse'), user_data.get('problem_type'), user_data.get('description')]):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            all_data = load_data(DATA_FILE)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if user_id not in all_data:
                all_data[user_id] = []

            all_data[user_id].append({
                'dse': user_data['dse'],
                'problem_type': user_data['problem_type'],
                'description': user_data['description']
            })

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            save_data(all_data, DATA_FILE)

            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ó–ê–Ø–í–ö–ò, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º application = 'started'
            if user_id in user_states:
                user_states[user_id] = {
                    'application': 'started',  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫ –Ω–∞—á–∞—Ç–æ–π –∑–∞—è–≤–∫–∏
                    'dse': '',
                    'problem_type': '',
                    'description': ''
                }

            response = "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"
            await query.edit_message_text(text=response)
            print(f"üì§ –ë–æ—Ç: {response}")

            # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await show_main_menu(update, user_id)
        else:
            await query.edit_message_text(text="‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")

    # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ü–†–û–°–ú–û–¢–†–ê –î–°–ï ===
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –î–°–ï
    elif data == 'view_dse_list':
        if not has_permission(user_id, 'view_dse_list'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –î–°–ï.")
            return
        await show_dse_list_menu(update, context)

    elif data == 'dse_view_all':
        if not has_permission(user_id, 'view_dse_list'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –î–°–ï.")
            return
        await show_all_dse_records(update, context, page=0)

    elif data.startswith('dse_view_all_'):
        if not has_permission(user_id, 'view_dse_list'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –î–°–ï.")
            return
        page = int(data.split('_')[-1])
        await show_all_dse_records(update, context, page=page)

    elif data == 'dse_search_dse':
        if not has_permission(user_id, 'view_dse_list'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –î–°–ï.")
            return
        await start_dse_search(update, context, 'dse')

    elif data == 'dse_search_type':
        if not has_permission(user_id, 'view_dse_list'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∏–ø—É –ø—Ä–æ–±–ª–µ–º—ã.")
            return
        await start_dse_search(update, context, 'type')

    elif data == 'dse_statistics':
        if not has_permission(user_id, 'view_dse_list'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            return
        await show_dse_statistics(update, context)

    # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –î–°–ï ===
    elif data == 'watch_dse_menu':
        if not has_permission(user_id, 'view_dse_list'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –î–°–ï.")
            return
        from dse_watcher import load_watched_dse_data  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        load_watched_dse_data()
        await show_watched_dse_menu(update, context)

    elif data == 'watch_add_dse':
        if not has_permission(user_id, 'view_dse_list'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –î–°–ï.")
            return
        await start_add_watched_dse(update, context)

    elif data == 'watch_remove_dse':
        if not has_permission(user_id, 'view_dse_list'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –î–°–ï.")
            return
        await start_remove_watched_dse(update, context)

    elif data == 'watch_list_dse':
        if not has_permission(user_id, 'view_dse_list'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –î–°–ï.")
            return
        await show_watched_dse_list(update, context)

    elif data.startswith('watch_rm_idx_'):
        if not has_permission(user_id, 'view_dse_list'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –î–°–ï.")
            return
        try:
            index = int(data.split('_')[-1])
            temp_list = user_states.get(user_id, {}).get('temp_watched_list', [])
            if 0 <= index < len(temp_list):
                dse_to_remove = temp_list[index]
                from dse_watcher import remove_watched_dse
                remove_watched_dse(user_id, dse_to_remove)

                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if user_id in user_states and 'temp_watched_list' in user_states[user_id]:
                    del user_states[user_id]['temp_watched_list']

                await query.edit_message_text(f"‚úÖ –î–°–ï '{dse_to_remove.upper()}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
                # –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –≤ –º–µ–Ω—é
                # await show_watched_dse_menu(update, context)
            else:
                await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except (ValueError, IndexError):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    # === –û–ë–†–ê–ë–û–¢–ö–ê –ê–î–ú–ò–ù–°–ö–ò–• –ö–ù–û–ü–û–ö ===
    elif data == 'admin_users':
        if get_user_role(user_id) != 'admin':
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        await show_admin_menu(update, context)

    elif data == 'admin_list_users':
        if get_user_role(user_id) != 'admin':
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        await show_users_list(update, context)

    elif data == 'admin_change_role_start':
        if get_user_role(user_id) != 'admin':
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        await start_change_role_process(update, context, user_id)

    elif data.startswith('set_role_'):
        if get_user_role(user_id) != 'admin':
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
            return
        # –§–æ—Ä–º–∞—Ç: set_role_USERID_ROLE
        parts = data.split('_')
        if len(parts) >= 4:
            target_user_id = parts[2]
            new_role = parts[3]

            if set_user_role(target_user_id, new_role):
                users = get_all_users()
                target_user = users.get(target_user_id, {})
                user_name = target_user.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                role_name = ROLES.get(new_role, new_role)
                await query.edit_message_text(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {role_name}")
                print(f"üîß –ê–¥–º–∏–Ω {user.first_name} –∏–∑–º–µ–Ω–∏–ª —Ä–æ–ª—å {user_name} –Ω–∞ {new_role}")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏")
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")

    # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø –§–û–†–ú–´ ===
    # –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π (–≤ –º–µ–Ω—é –∑–∞—è–≤–∫–∏)
    elif data == 'set_dse':
        if not has_permission(user_id, 'use_form'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã.")
            return
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –î–°–ï
        await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –î–°–ï:")
        user_states[user_id]['current_input'] = 'dse'

    elif data == 'set_problem':
        if not has_permission(user_id, 'use_form'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã.")
            return
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –ø—Ä–æ–±–ª–µ–º
        await show_problem_types(update, user_id)

    elif data == 'set_description':
        if not has_permission(user_id, 'use_form'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã.")
            return
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞:")
        user_states[user_id]['current_input'] = 'description'

    elif data.startswith('problem_'):
        if not has_permission(user_id, 'use_form'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã.")
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
        problem_index = int(data.split('_')[1])
        selected_problem = PROBLEM_TYPES[problem_index]
        user_states[user_id]['problem_type'] = selected_problem

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∑–∞—è–≤–∫–∏
        await show_application_menu(update, user_id)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤–∏–¥ –ø—Ä–æ–±–ª–µ–º—ã: {selected_problem}")

    # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò –ß–ê–¢–ê ===
    elif data == 'chat_dse_menu':
        if not has_permission(user_id, 'chat_dse'):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á–∞—Ç–∞ –ø–æ –î–°–ï.")
            return
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é —á–∞—Ç–∞
        from chat_manager import show_chat_menu
        await show_chat_menu(update, context)

    # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ß–ê–¢–û–ú (–∏–∑ chat_manager) ===
    elif data in ['chat_pause', 'chat_resume', 'chat_end']:
        from chat_manager import handle_chat_control
        await handle_chat_control(update, context)

    # === –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –ß–ê–¢–ê –ü–û –î–°–ï (–∏–∑ chat_manager) ===
    elif data in ['dse_chat_confirm', 'dse_chat_cancel_final']:
        from chat_manager import handle_dse_chat_confirmation
        await handle_dse_chat_confirmation(update, context)

    # === –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –î–õ–Ø –ß–ê–¢–ê –ü–û –î–°–ï (–∏–∑ chat_manager) ===
    elif data.startswith('dse_chat_select_'):
        from chat_manager import handle_dse_user_selection
        await handle_dse_user_selection(update, context)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ===

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

    user = update.effective_user
    user_id = str(user.id)
    text = update.message.text

    print(f"üë® @{user.username}: {text}")

    # === –ü–†–û–í–ï–†–ö–ê –ù–ê –ê–ö–¢–ò–í–ù–´–ô –ß–ê–¢ ===
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ –∏–ª–∏ —á–∞—Ç–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
    from chat_manager import active_chats, handle_chat_message
    if user_id in active_chats and active_chats[user_id].get('status') in ['active', 'paused']:
        await handle_chat_message(update, context)
        return

    # === –ü–†–û–í–ï–†–ö–ê –ù–ê –ê–î–ú–ò–ù–°–ö–ò–ï –ò –ü–û–ò–°–ö–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ===
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ (–∞–¥–º–∏–Ω)
    if user_id in admin_states and admin_states[user_id].get('changing_role'):
        target_user_id = text.strip()
        users = get_all_users()

        if target_user_id in users:
            del admin_states[user_id]  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π update –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            class FakeUpdate:
                def __init__(self, message):
                    self.message = message
                    self.callback_query = None
                    self.effective_user = message.from_user

            fake_update = FakeUpdate(update.message)
            await show_role_selection_menu(fake_update, context, target_user_id)
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –î–°–ï
    if user_id in dse_view_states:
        if dse_view_states[user_id].get('searching_dse'):
            del dse_view_states[user_id]

            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π update –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            class FakeUpdate:
                def __init__(self, message):
                    self.message = message
                    self.callback_query = None
                    self.effective_user = message.from_user

            fake_update = FakeUpdate(update.message)
            await show_search_results(fake_update, context, text, 'dse')
            return
        elif dse_view_states[user_id].get('searching_type'):
            del dse_view_states[user_id]

            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π update –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            class FakeUpdate:
                def __init__(self, message):
                    self.message = message
                    self.callback_query = None
                    self.effective_user = message.from_user

            fake_update = FakeUpdate(update.message)
            await show_search_results(fake_update, context, text, 'type')
            return

    # === –ü–†–û–í–ï–†–ö–ê –ù–ê –í–í–û–î –î–ê–ù–ù–´–• –î–õ–Ø –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –î–°–ï ===
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –î–°–ï –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    if user_id in user_states and user_states[user_id].get('adding_watched_dse'):
        dse_to_watch = text.strip()
        if dse_to_watch:
            from dse_watcher import add_watched_dse
            add_watched_dse(user_id, dse_to_watch)
            del user_states[user_id]['adding_watched_dse']  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            response = f"‚úÖ –î–°–ï '{dse_to_watch.upper()}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
            await update.message.reply_text(text=response)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            await show_watched_dse_menu(update, context)
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –î–°–ï.")
        return  # –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—è

    # === –ü–†–û–í–ï–†–ö–ê –ù–ê –í–í–û–î –î–ê–ù–ù–´–• –î–õ–Ø –§–û–†–ú–´ ===
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ñ–æ—Ä–º—ã)
    if user_id in user_states and 'current_input' in user_states[user_id]:
        current_input = user_states[user_id]['current_input']

        if current_input == 'dse':
            user_states[user_id]['dse'] = text
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –î–°–ï: {text}")
        elif current_input == 'description':
            user_states[user_id]['description'] = text
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ: {text}")

        # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        del user_states[user_id]['current_input']

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∑–∞—è–≤–∫–∏ —Å–Ω–æ–≤–∞
        response = f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {text}"
        await update.message.reply_text(text=response)
        await show_application_menu(update, user_id)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –∑–∞—è–≤–∫–∏
        return  # –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ "–û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç"

    else:
        # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"
        await update.message.reply_text(text=response)
