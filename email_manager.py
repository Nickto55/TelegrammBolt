"""
–ú–µ–Ω–µ–¥–∂–µ—Ä email –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –∏ –∑–∞—è–≤–æ–∫
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–æ–∫, —á–∞—Å—Ç–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
"""

import json
import os
from datetime import datetime
from typing import List, Dict, Optional, Tuple

EMAIL_HISTORY_FILE = "email_history.json"


def load_email_history() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é email –æ—Ç–ø—Ä–∞–≤–æ–∫"""
    if not os.path.exists(EMAIL_HISTORY_FILE):
        return {}
    
    try:
        with open(EMAIL_HISTORY_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ email: {e}")
        return {}


def save_email_history(history: Dict) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é email –æ—Ç–ø—Ä–∞–≤–æ–∫"""
    try:
        with open(EMAIL_HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(history, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ email: {e}")
        return False


def add_email_to_history(user_id: str, email: str, email_type: str = "export", dse_number: Optional[str] = None) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç email –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        email: Email –∞–¥—Ä–µ—Å
        email_type: –¢–∏–ø –æ—Ç–ø—Ä–∞–≤–∫–∏ - "export" (–≤—ã–≥—Ä—É–∑–∫–∞) –∏–ª–∏ "application" (–∑–∞—è–≤–∫–∞)
        dse_number: –ù–æ–º–µ—Ä –î–°–ï (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—è–≤–æ–∫)
    """
    history = load_email_history()
    
    if user_id not in history:
        history[user_id] = {}
    
    email_lower = email.lower().strip()
    
    if email_lower not in history[user_id]:
        history[user_id][email_lower] = {
            "email": email,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è
            "count": 0,
            "last_used": None,
            "first_used": None,
            "types": {
                "export": 0,
                "application": 0
            },
            "dse_numbers": []  # –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –î–°–ï –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –∑–∞—è–≤–∫–∏
        }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    history[user_id][email_lower]["count"] += 1
    history[user_id][email_lower]["last_used"] = datetime.now().isoformat()
    
    if history[user_id][email_lower]["first_used"] is None:
        history[user_id][email_lower]["first_used"] = datetime.now().isoformat()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ —Ç–∏–ø—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    if email_type in history[user_id][email_lower]["types"]:
        history[user_id][email_lower]["types"][email_type] += 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –î–°–ï –µ—Å–ª–∏ —ç—Ç–æ –∑–∞—è–≤–∫–∞
    if email_type == "application" and dse_number:
        if dse_number not in history[user_id][email_lower]["dse_numbers"]:
            history[user_id][email_lower]["dse_numbers"].append(dse_number)
    
    save_email_history(history)


def get_user_emails(user_id: str, limit: int = 10) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ email –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–ø—Ä–∞–≤–æ–∫
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
    
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± email –∞–¥—Ä–µ—Å–∞—Ö
    """
    history = load_email_history()
    
    if user_id not in history:
        return []
    
    emails = []
    for email_key, data in history[user_id].items():
        emails.append({
            "email": data["email"],
            "count": data["count"],
            "last_used": data["last_used"],
            "first_used": data["first_used"],
            "types": data["types"],
            "dse_numbers": data.get("dse_numbers", [])
        })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (—É–±—ã–≤–∞–Ω–∏–µ)
    emails.sort(key=lambda x: x["count"], reverse=True)
    
    return emails[:limit]


def get_formatted_emails_list(user_id: str, limit: int = 5) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º email –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º
    """
    emails = get_user_emails(user_id, limit)
    
    if not emails:
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö email –∞–¥—Ä–µ—Å–æ–≤."
    
    text = "üìß –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ email –∞–¥—Ä–µ—Å–∞:\n\n"
    
    for i, email_data in enumerate(emails, 1):
        email = email_data["email"]
        count = email_data["count"]
        
        # –ò–∫–æ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        if count >= 10:
            icon = "‚≠ê"
        elif count >= 5:
            icon = "üî•"
        else:
            icon = "üìå"
        
        text += f"{icon} {i}. {email}\n"
        text += f"   ‚îî –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {count} —Ä–∞–∑\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –æ—Ç–ø—Ä–∞–≤–æ–∫
        types_info = []
        if email_data["types"]["export"] > 0:
            types_info.append(f"–≤—ã–≥—Ä—É–∑–∫–∏: {email_data['types']['export']}")
        if email_data["types"]["application"] > 0:
            types_info.append(f"–∑–∞—è–≤–∫–∏: {email_data['types']['application']}")
        
        if types_info:
            text += f"   ‚îî {', '.join(types_info)}\n"
        
        text += "\n"
    
    return text.strip()


def remove_email_from_history(user_id: str, email: str) -> bool:
    """
    –£–¥–∞–ª—è–µ—Ç email –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        email: Email –∞–¥—Ä–µ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    
    Returns:
        True –µ—Å–ª–∏ email –±—ã–ª —É–¥–∞–ª–µ–Ω, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    history = load_email_history()
    
    if user_id not in history:
        return False
    
    email_lower = email.lower().strip()
    
    if email_lower in history[user_id]:
        del history[user_id][email_lower]
        save_email_history(history)
        return True
    
    return False


def clear_user_email_history(user_id: str) -> bool:
    """
    –û—á–∏—â–∞–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é email –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    
    Returns:
        True –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞
    """
    history = load_email_history()
    
    if user_id in history:
        history[user_id] = {}
        save_email_history(history)
    
    return True


def get_email_suggestions(user_id: str, email_type: str = "export", limit: int = 3) -> List[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π email –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        email_type: –¢–∏–ø –æ—Ç–ø—Ä–∞–≤–∫–∏ - "export" –∏–ª–∏ "application"
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    
    Returns:
        –°–ø–∏—Å–æ–∫ email –∞–¥—Ä–µ—Å–æ–≤
    """
    history = load_email_history()
    
    if user_id not in history:
        return []
    
    # –°–æ–±–∏—Ä–∞–µ–º email, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    emails_with_score = []
    
    for email_key, data in history[user_id].items():
        # –í—ã—á–∏—Å–ª—è–µ–º "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        type_count = data["types"].get(email_type, 0)
        total_count = data["count"]
        
        # –ß–µ–º –±–æ–ª—å—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ - —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        score = (type_count * 2) + total_count
        
        if score > 0:
            emails_with_score.append((data["email"], score))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    emails_with_score.sort(key=lambda x: x[1], reverse=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ email –∞–¥—Ä–µ—Å–∞
    return [email for email, score in emails_with_score[:limit]]


def validate_email(email: str) -> Tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å email –∞–¥—Ä–µ—Å–∞
    
    Args:
        email: Email –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    Returns:
        Tuple (is_valid, error_message)
    """
    email = email.strip()
    
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if not email or '@' not in email:
        return False, "Email –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª @"
    
    parts = email.split('@')
    
    if len(parts) != 2:
        return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email"
    
    local_part, domain = parts
    
    if not local_part or not domain:
        return False, "Email –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ @"
    
    if '.' not in domain:
        return False, "–î–æ–º–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ—á–∫—É"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (–±–∞–∑–æ–≤–∞—è)
    forbidden_chars = [' ', ',', ';', ':', '!', '?', '\\', '/', '[', ']', '(', ')']
    for char in forbidden_chars:
        if char in email:
            return False, f"Email —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª: {char}"
    
    return True, ""


def get_statistics(user_id: str) -> Dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è email –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    history = load_email_history()
    
    if user_id not in history:
        return {
            "total_emails": 0,
            "total_sends": 0,
            "export_sends": 0,
            "application_sends": 0,
            "most_used_email": None,
            "most_used_count": 0
        }
    
    total_emails = len(history[user_id])
    total_sends = 0
    export_sends = 0
    application_sends = 0
    most_used_email = None
    most_used_count = 0
    
    for email_key, data in history[user_id].items():
        total_sends += data["count"]
        export_sends += data["types"].get("export", 0)
        application_sends += data["types"].get("application", 0)
        
        if data["count"] > most_used_count:
            most_used_count = data["count"]
            most_used_email = data["email"]
    
    return {
        "total_emails": total_emails,
        "total_sends": total_sends,
        "export_sends": export_sends,
        "application_sends": application_sends,
        "most_used_email": most_used_email,
        "most_used_count": most_used_count
    }


def parse_multiple_emails(email_string: str) -> List[str]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ email –∞–¥—Ä–µ—Å–∞–º–∏
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: –∑–∞–ø—è—Ç–∞—è, —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π, –ø—Ä–æ–±–µ–ª
    
    Args:
        email_string: –°—Ç—Ä–æ–∫–∞ —Å –æ–¥–Ω–∏–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ email –∞–¥—Ä–µ—Å–∞–º–∏
    
    Returns:
        –°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö email –∞–¥—Ä–µ—Å–æ–≤
    """
    # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –∑–∞–ø—è—Ç—É—é
    email_string = email_string.replace(';', ',').replace('\n', ',')
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
    emails = []
    for email in email_string.split(','):
        email = email.strip()
        if email:
            emails.append(email)
    
    return emails


def validate_multiple_emails(email_string: str) -> Tuple[bool, str, List[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ email –∞–¥—Ä–µ—Å–∞–º–∏
    
    Args:
        email_string: –°—Ç—Ä–æ–∫–∞ —Å email –∞–¥—Ä–µ—Å–∞–º–∏
    
    Returns:
        Tuple (is_valid, error_message, valid_emails)
    """
    emails = parse_multiple_emails(email_string)
    
    if not emails:
        return False, "–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ email –∞–¥—Ä–µ—Å–∞", []
    
    valid_emails = []
    invalid_emails = []
    
    for email in emails:
        is_valid, error_msg = validate_email(email)
        if is_valid:
            valid_emails.append(email)
        else:
            invalid_emails.append(f"{email} ({error_msg})")
    
    if not valid_emails:
        return False, f"–í—Å–µ –∞–¥—Ä–µ—Å–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã:\n" + "\n".join(invalid_emails), []
    
    if invalid_emails:
        warning = f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–¥—Ä–µ—Å–∞ –ø—Ä–æ–ø—É—â–µ–Ω—ã:\n" + "\n".join(invalid_emails)
        return True, warning, valid_emails
    
    return True, "", valid_emails


def format_email_list_for_display(emails: List[str]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ email –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        emails: –°–ø–∏—Å–æ–∫ email –∞–¥—Ä–µ—Å–æ–≤
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if not emails:
        return "–ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤"
    
    if len(emails) == 1:
        return emails[0]
    
    return "\n".join([f"  {i+1}. {email}" for i, email in enumerate(emails)])
