#!/usr/bin/env python3
"""
TelegrammBolt Monitor - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
–†–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –±–æ—Ç–∞, –æ–±–º–µ–Ω–∏–≤–∞–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª—ã
"""

import os
import sys
import time
import json
import curses
from datetime import datetime
from pathlib import Path


class BotMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –±–æ—Ç–∞ —Å TUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    
    def __init__(self):
        self.running = True
        self.current_tab = 0
        self.tabs = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìã –õ–æ–≥–∏", "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"]
        self.log_scroll = 0
        self.users_scroll = 0
        
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏
        self.stats_file = "monitor_stats.json"
        self.commands_file = "monitor_commands.json"
        self.log_file = "bot_monitor.log"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
        self._init_files()
    
    def _init_files(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏"""
        if not os.path.exists(self.stats_file):
            self._write_json(self.stats_file, {
                "status": "unknown",
                "uptime": 0,
                "users_total": 0,
                "users_active": 0,
                "dse_total": 0,
                "requests_total": 0,
                "requests_per_minute": 0,
                "memory_mb": 0,
                "last_update": None
            })
        
        if not os.path.exists(self.commands_file):
            self._write_json(self.commands_file, {"commands": []})
    
    def _read_json(self, filepath):
        """–ß—Ç–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(filepath):
                with open(filepath, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            return {}
        return {}
    
    def _write_json(self, filepath, data):
        """–ó–∞–ø–∏—Å—å JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            return False
    
    def _send_command(self, command, params=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É"""
        commands_data = self._read_json(self.commands_file)
        if "commands" not in commands_data:
            commands_data["commands"] = []
        
        commands_data["commands"].append({
            "command": command,
            "params": params or {},
            "timestamp": datetime.now().isoformat(),
            "status": "pending"
        })
        
        return self._write_json(self.commands_file, commands_data)
    
    def get_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        return self._read_json(self.stats_file)
    
    def get_logs(self, lines=50):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"""
        try:
            if os.path.exists(self.log_file):
                with open(self.log_file, 'r', encoding='utf-8') as f:
                    return f.readlines()[-lines:]
        except:
            pass
        return ["–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç"]
    
    def get_users(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            from user_manager import get_all_users
            users = get_all_users()
            return [
                f"{u['user_id'][:10]}... | {u.get('username', 'N/A')[:15]} | {u.get('role', 'user')}"
                for u in users[:20]  # –ü–µ—Ä–≤—ã–µ 20
            ]
        except:
            return ["–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"]
    
    def draw_header(self, stdscr, height, width):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        title = "ü§ñ TelegrammBolt Monitor"
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        stdscr.attron(curses.color_pair(1))
        stdscr.addstr(0, 0, " " * width)
        stdscr.addstr(0, 2, title)
        stdscr.addstr(0, width - len(timestamp) - 2, timestamp)
        stdscr.attroff(curses.color_pair(1))
        
        # –¢–∞–±—ã
        x_offset = 2
        for i, tab in enumerate(self.tabs):
            if i == self.current_tab:
                stdscr.attron(curses.color_pair(2))
                stdscr.addstr(1, x_offset, f" {tab} ")
                stdscr.attroff(curses.color_pair(2))
            else:
                stdscr.addstr(1, x_offset, f" {tab} ")
            x_offset += len(tab) + 3
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        stdscr.addstr(2, 0, "‚îÄ" * width)
    
    def draw_stats_tab(self, stdscr, y_start, height, width):
        """–í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = self.get_stats()
        
        y = y_start
        
        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        status = str(stats.get("status", "unknown"))
        status_color = 3 if status == "running" else 4
        stdscr.attron(curses.color_pair(status_color))
        stdscr.addstr(y, 2, f"‚óè –°—Ç–∞—Ç—É—Å: {status.upper()}")
        stdscr.attroff(curses.color_pair(status_color))
        y += 2
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        info = [
            ("‚è±Ô∏è  Uptime", f"{stats.get('uptime', 0)} —Å–µ–∫"),
            ("üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", str(stats.get('users_total', 0))),
            ("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", str(stats.get('users_active', 0))),
            ("üìã –í—Å–µ–≥–æ –î–°–ï", str(stats.get('dse_total', 0))),
            ("üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤", str(stats.get('requests_total', 0))),
            ("‚ö° –ó–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω", str(stats.get('requests_per_minute', 0))),
            ("üíæ –ü–∞–º—è—Ç—å (MB)", str(stats.get('memory_mb', 0))),
        ]
        
        for label, value in info:
            stdscr.addstr(y, 4, f"{label:.<30} {value}")
            y += 1
        
        y += 1
        stdscr.addstr(y, 2, "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:")
        y += 1
        last_update = str(stats.get('last_update') or 'N/A')
        stdscr.addstr(y, 4, last_update)
    
    def draw_logs_tab(self, stdscr, y_start, height, width):
        """–í–∫–ª–∞–¥–∫–∞ –ª–æ–≥–æ–≤"""
        logs = self.get_logs(height - y_start - 5)
        
        y = y_start
        stdscr.addstr(y, 2, "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (‚Üë‚Üì –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏):")
        y += 2
        
        max_lines = height - y - 2
        visible_logs = logs[self.log_scroll:self.log_scroll + max_lines]
        
        for log_line in visible_logs:
            if y >= height - 2:
                break
            line = str(log_line or "").strip()[:width - 6]
            
            # –¶–≤–µ—Ç–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é
            if "ERROR" in line or "‚ùå" in line:
                stdscr.attron(curses.color_pair(4))
            elif "WARN" in line or "‚ö†Ô∏è" in line:
                stdscr.attron(curses.color_pair(5))
            elif "SUCCESS" in line or "‚úÖ" in line:
                stdscr.attron(curses.color_pair(3))
            
            stdscr.addstr(y, 4, line)
            
            if "ERROR" in line or "‚ùå" in line:
                stdscr.attroff(curses.color_pair(4))
            elif "WARN" in line or "‚ö†Ô∏è" in line:
                stdscr.attroff(curses.color_pair(5))
            elif "SUCCESS" in line or "‚úÖ" in line:
                stdscr.attroff(curses.color_pair(3))
            
            y += 1
    
    def draw_users_tab(self, stdscr, y_start, height, width):
        """–í–∫–ª–∞–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = self.get_users()
        
        y = y_start
        stdscr.addstr(y, 2, "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ (‚Üë‚Üì –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏):")
        y += 2
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        stdscr.attron(curses.color_pair(1))
        stdscr.addstr(y, 4, f"{'ID':<15} | {'Username':<18} | {'–†–æ–ª—å':<10}")
        stdscr.attroff(curses.color_pair(1))
        y += 1
        stdscr.addstr(y, 4, "‚îÄ" * 50)
        y += 1
        
        max_lines = height - y - 2
        visible_users = users[self.users_scroll:self.users_scroll + max_lines]
        
        for user_line in visible_users:
            if y >= height - 2:
                break
            stdscr.addstr(y, 4, str(user_line or "")[:width - 6])
            y += 1
    
    def draw_control_tab(self, stdscr, y_start, height, width):
        """–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        y = y_start
        stdscr.addstr(y, 2, "‚öôÔ∏è  –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        y += 2
        
        commands = [
            ("R", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å watcher"),
            ("C", "–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"),
            ("S", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"),
            ("L", "–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏"),
            ("E", "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"),
            ("T", "–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"),
        ]
        
        for key, description in commands:
            stdscr.attron(curses.color_pair(2))
            stdscr.addstr(y, 4, f"[{key}]")
            stdscr.attroff(curses.color_pair(2))
            stdscr.addstr(y, 8, f"- {description}")
            y += 1
        
        y += 2
        stdscr.addstr(y, 2, "–°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:")
        y += 1
        
        commands_data = self._read_json(self.commands_file)
        recent_commands = commands_data.get("commands", [])[-5:]
        
        for cmd in recent_commands:
            if y >= height - 2:
                break
            status_icon = "‚úÖ" if cmd.get("status") == "completed" else "‚è≥"
            cmd_name = str(cmd.get('command', 'unknown'))
            timestamp = str(cmd.get('timestamp', ''))[:19]
            line = f"{status_icon} {cmd_name} - {timestamp}"
            stdscr.addstr(y, 4, line[:width - 6])
            y += 1
    
    def draw_footer(self, stdscr, height, width):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–¥–≤–∞–ª–∞"""
        stdscr.attron(curses.color_pair(1))
        stdscr.addstr(height - 1, 0, " " * width)
        
        help_text = "[TAB] –í–∫–ª–∞–¥–∫–∏ | [Q] –í—ã—Ö–æ–¥ | [F5] –û–±–Ω–æ–≤–∏—Ç—å | [‚Üë‚Üì] –ü—Ä–æ–∫—Ä—É—Ç–∫–∞"
        stdscr.addstr(height - 1, 2, help_text[:width - 4])
        stdscr.attroff(curses.color_pair(1))
    
    def handle_input(self, stdscr, key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞"""
        if key == ord('q') or key == ord('Q'):
            self.running = False
        
        elif key == ord('\t') or key == curses.KEY_RIGHT:
            self.current_tab = (self.current_tab + 1) % len(self.tabs)
            self.log_scroll = 0
            self.users_scroll = 0
        
        elif key == curses.KEY_LEFT:
            self.current_tab = (self.current_tab - 1) % len(self.tabs)
            self.log_scroll = 0
            self.users_scroll = 0
        
        elif key == curses.KEY_UP:
            if self.current_tab == 1:  # –õ–æ–≥–∏
                self.log_scroll = max(0, self.log_scroll - 1)
            elif self.current_tab == 2:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                self.users_scroll = max(0, self.users_scroll - 1)
        
        elif key == curses.KEY_DOWN:
            if self.current_tab == 1:  # –õ–æ–≥–∏
                self.log_scroll += 1
            elif self.current_tab == 2:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                self.users_scroll += 1
        
        elif key == curses.KEY_F5:
            pass  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        
        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        elif self.current_tab == 3:  # –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if key == ord('r') or key == ord('R'):
                self._send_command("restart_watcher")
            elif key == ord('c') or key == ord('C'):
                self._send_command("clear_cache")
            elif key == ord('s') or key == ord('S'):
                self._send_command("save_stats")
            elif key == ord('l') or key == ord('L'):
                self._send_command("clear_logs")
            elif key == ord('e') or key == ord('E'):
                self._send_command("export_data")
            elif key == ord('t') or key == ord('T'):
                self._send_command("test_notifications")
    
    def run(self, stdscr):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ—Ç—Ä–∏—Å–æ–≤–∫–∏"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤
        curses.start_color()
        curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_CYAN)    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        curses.init_pair(2, curses.COLOR_BLACK, curses.COLOR_GREEN)   # –ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
        curses.init_pair(3, curses.COLOR_GREEN, curses.COLOR_BLACK)   # –£—Å–ø–µ—Ö
        curses.init_pair(4, curses.COLOR_RED, curses.COLOR_BLACK)     # –û—à–∏–±–∫–∞
        curses.init_pair(5, curses.COLOR_YELLOW, curses.COLOR_BLACK)  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
        curses.curs_set(0)  # –°–∫—Ä—ã—Ç—å –∫—É—Ä—Å–æ—Ä
        stdscr.nodelay(1)   # –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤–≤–æ–¥
        stdscr.timeout(100) # –¢–∞–π–º–∞—É—Ç 100–º—Å
        
        while self.running:
            stdscr.clear()
            height, width = stdscr.getmaxyx()
            
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.draw_header(stdscr, height, width)
            
            y_content_start = 4
            
            if self.current_tab == 0:
                self.draw_stats_tab(stdscr, y_content_start, height, width)
            elif self.current_tab == 1:
                self.draw_logs_tab(stdscr, y_content_start, height, width)
            elif self.current_tab == 2:
                self.draw_users_tab(stdscr, y_content_start, height, width)
            elif self.current_tab == 3:
                self.draw_control_tab(stdscr, y_content_start, height, width)
            
            self.draw_footer(stdscr, height, width)
            
            stdscr.refresh()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
            try:
                key = stdscr.getch()
                if key != -1:
                    self.handle_input(stdscr, key)
            except:
                pass
            
            time.sleep(0.1)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ TelegrammBolt Monitor...")
    print("–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ 'Q'\n")
    time.sleep(1)
    
    monitor = BotMonitor()
    
    try:
        curses.wrapper(monitor.run)
    except KeyboardInterrupt:
        pass
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    main()
