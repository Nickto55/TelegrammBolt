"""
Bot Monitor Integration Module
–ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å monitor.py –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
"""

import os
import json
import psutil
import asyncio
import logging
from datetime import datetime
from pathlib import Path

logger = logging.getLogger(__name__)


class BotMonitorIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    def __init__(self):
        self.stats_file = "monitor_stats.json"
        self.commands_file = "monitor_commands.json"
        self.log_file = "bot_monitor.log"
        
        self.start_time = datetime.now()
        self.request_count = 0
        self.last_request_time = datetime.now()
        self.requests_last_minute = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._ensure_files_exist()
    
    def _ensure_files_exist(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        if not os.path.exists(self.stats_file):
            self._write_stats({
                "status": "starting",
                "uptime": 0,
                "users_total": 0,
                "users_active": 0,
                "dse_total": 0,
                "requests_total": 0,
                "requests_per_minute": 0,
                "memory_mb": 0,
                "last_update": datetime.now().isoformat()
            })
        
        if not os.path.exists(self.commands_file):
            self._write_json(self.commands_file, {"commands": []})
    
    def _read_json(self, filepath):
        """–ß—Ç–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(filepath):
                with open(filepath, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filepath}: {e}")
            return {}
        return {}
    
    def _write_json(self, filepath, data):
        """–ó–∞–ø–∏—Å—å JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {filepath}: {e}")
            return False
    
    def _write_stats(self, stats_data):
        """–ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return self._write_json(self.stats_file, stats_data)
    
    def log_to_monitor(self, message, level="INFO"):
        """–ó–∞–ø–∏—Å—å –ª–æ–≥–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            log_line = f"[{timestamp}] [{level}] {message}\n"
            
            with open(self.log_file, 'a', encoding='utf-8') as f:
                f.write(log_line)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥-—Ñ–∞–π–ª–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫)
            if os.path.exists(self.log_file):
                with open(self.log_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                if len(lines) > 1000:
                    with open(self.log_file, 'w', encoding='utf-8') as f:
                        f.writelines(lines[-1000:])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞: {e}")
    
    def increment_request(self):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.request_count += 1
        self.requests_last_minute.append(datetime.now())
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
        one_minute_ago = datetime.now().timestamp() - 60
        self.requests_last_minute = [
            t for t in self.requests_last_minute 
            if t.timestamp() > one_minute_ago
        ]
    
    def get_memory_usage(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ MB"""
        try:
            process = psutil.Process(os.getpid())
            return round(process.memory_info().rss / 1024 / 1024, 2)
        except:
            return 0
    
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            from user_manager import get_all_users
            from dse_manager import get_all_dse_records
            
            users = get_all_users()
            dse_records = get_all_dse_records()
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - users —ç—Ç–æ —Å–ø–∏—Å–æ–∫ user_id (—Å—Ç—Ä–æ–∫–∏)
            users_total = len(users) if users else 0
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å—á–∏—Ç–∞–µ–º –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            active_users = users_total
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - dse_records —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            dse_total = len(dse_records) if dse_records else 0
            
            uptime = (datetime.now() - self.start_time).total_seconds()
            
            stats = {
                "status": "running",
                "uptime": int(uptime),
                "users_total": users_total,
                "users_active": active_users,
                "dse_total": dse_total,
                "requests_total": self.request_count,
                "requests_per_minute": len(self.requests_last_minute),
                "memory_mb": self.get_memory_usage(),
                "last_update": datetime.now().isoformat()
            }
            
            self._write_stats(stats)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return False
    
    def process_commands(self, application):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        try:
            commands_data = self._read_json(self.commands_file)
            commands = commands_data.get("commands", [])
            
            updated = False
            for cmd in commands:
                if cmd.get("status") == "pending":
                    result = self._execute_command(cmd["command"], cmd.get("params", {}), application)
                    cmd["status"] = "completed" if result else "failed"
                    cmd["completed_at"] = datetime.now().isoformat()
                    updated = True
                    
                    self.log_to_monitor(
                        f"–ö–æ–º–∞–Ω–¥–∞ {cmd['command']} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {'—É—Å–ø–µ—à–Ω–æ' if result else '–æ—à–∏–±–∫–∞'}",
                        "SUCCESS" if result else "ERROR"
                    )
            
            if updated:
                self._write_json(self.commands_file, commands_data)
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
            return False
    
    def _execute_command(self, command, params, application):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            if command == "restart_watcher":
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ watcher'–∞
                self.log_to_monitor("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ DSE Watcher...", "INFO")
                # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ watcher
                return True
            
            elif command == "clear_cache":
                # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
                self.log_to_monitor("–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...", "INFO")
                # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞
                return True
            
            elif command == "save_stats":
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self.log_to_monitor("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...", "INFO")
                return self.update_stats()
            
            elif command == "clear_logs":
                # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
                self.log_to_monitor("–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤...", "INFO")
                if os.path.exists(self.log_file):
                    open(self.log_file, 'w').close()
                return True
            
            elif command == "export_data":
                # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
                self.log_to_monitor("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...", "INFO")
                # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç
                return True
            
            elif command == "test_notifications":
                # –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                self.log_to_monitor("–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...", "INFO")
                # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                return True
            
            else:
                self.log_to_monitor(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}", "WARN")
                return False
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_monitor_integration = None


def get_monitor_integration():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    global _monitor_integration
    if _monitor_integration is None:
        _monitor_integration = BotMonitorIntegration()
    return _monitor_integration


async def start_monitor_integration(application):
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–æ–Ω–∏—Ç–æ—Ä–æ–º"""
    monitor = get_monitor_integration()
    
    monitor.log_to_monitor("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", "SUCCESS")
    monitor.update_stats()
    
    async def monitor_loop():
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥"""
        while True:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                monitor.update_stats()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                monitor.process_commands(application)
                
                await asyncio.sleep(5)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ monitor_loop: {e}")
                await asyncio.sleep(5)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(monitor_loop())
    logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞")
