#!/usr/bin/env python3
"""
üîç –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –ò –ò–ú–ü–û–†–¢–û–í
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ Python —Ñ–∞–π–ª—ã –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–æ–≤ –ø–æ—Å–ª–µ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
"""
import os
import ast
import sys
from pathlib import Path

class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    END = '\033[0m'

def print_header(msg):
    print(f"\n{Colors.BLUE}{'='*70}{Colors.END}")
    print(f"{Colors.BLUE}{msg}{Colors.END}")
    print(f"{Colors.BLUE}{'='*70}{Colors.END}\n")

def print_success(msg):
    print(f"{Colors.GREEN}‚úì{Colors.END} {msg}")

def print_warning(msg):
    print(f"{Colors.YELLOW}‚ö†{Colors.END} {msg}")

def print_error(msg):
    print(f"{Colors.RED}‚úó{Colors.END} {msg}")

def get_imports(file_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ Python —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            tree = ast.parse(f.read(), filename=file_path)
        
        imports = []
        for node in ast.walk(tree):
            if isinstance(node, ast.Import):
                for alias in node.names:
                    imports.append({
                        'type': 'import',
                        'module': alias.name,
                        'line': node.lineno
                    })
            elif isinstance(node, ast.ImportFrom):
                module = node.module if node.module else ''
                for alias in node.names:
                    imports.append({
                        'type': 'from',
                        'module': module,
                        'name': alias.name,
                        'line': node.lineno
                    })
        
        return imports
    except SyntaxError as e:
        print_error(f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {file_path}: {e}")
        return None
    except Exception as e:
        print_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {file_path}: {e}")
        return None

def check_local_imports(file_path, imports, all_files):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã (–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞)"""
    issues = []
    file_dir = os.path.dirname(file_path)
    
    for imp in imports:
        module = imp.get('module', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        local_modules = [
            'bot', 'config', 'data', 'web', 'scripts',
            'commands', 'user_manager', 'dse_manager', 'chat_manager',
            'email_manager', 'gui_manager', 'pdf_generator', 'dse_watcher'
        ]
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
        if any(module.startswith(lm) or module == lm for lm in local_modules):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            possible_paths = [
                os.path.join(file_dir, f"{module}.py"),
                os.path.join(file_dir, module, "__init__.py"),
                os.path.join('bot', f"{module}.py"),
                os.path.join('web', f"{module}.py"),
                os.path.join('config', f"{module}.py"),
            ]
            
            exists = any(os.path.exists(p) for p in possible_paths)
            
            if not exists:
                issues.append({
                    'line': imp['line'],
                    'module': module,
                    'type': 'missing_module'
                })
    
    return issues

def scan_directory(directory, all_files):
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ Python —Ñ–∞–π–ª—ã"""
    print_header(f"üìÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {directory}")
    
    py_files = []
    for root, dirs, files in os.walk(directory):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∫—ç—à
        dirs[:] = [d for d in dirs if d not in ['.venv', '__pycache__', '.git', '.idea', 'archive', 'backup_20251020_160203', '.docs_backup_20251016_083213']]
        
        for file in files:
            if file.endswith('.py'):
                file_path = os.path.join(root, file)
                py_files.append(file_path)
    
    return py_files

def analyze_file(file_path, all_files):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª"""
    imports = get_imports(file_path)
    
    if imports is None:
        return None
    
    issues = check_local_imports(file_path, imports, all_files)
    
    return {
        'path': file_path,
        'imports': imports,
        'issues': issues
    }

def main():
    print("\n" + "="*70)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –ü–û–°–õ–ï –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò")
    print("="*70)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Python —Ñ–∞–π–ª—ã
    all_files = []
    directories = ['bot', 'web', 'config', 'scripts']
    
    for directory in directories:
        if os.path.exists(directory):
            all_files.extend(scan_directory(directory, all_files))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ —Ñ–∞–π–ª—ã
    root_py = [f for f in os.listdir('.') if f.endswith('.py')]
    all_files.extend(root_py)
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ Python —Ñ–∞–π–ª–æ–≤: {len(all_files)}\n")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    results = []
    total_issues = 0
    
    for file_path in all_files:
        result = analyze_file(file_path, all_files)
        if result:
            results.append(result)
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            rel_path = os.path.relpath(file_path)
            if result['issues']:
                print_error(f"{rel_path}")
                total_issues += len(result['issues'])
                for issue in result['issues']:
                    print(f"    –°—Ç—Ä–æ–∫–∞ {issue['line']}: –º–æ–¥—É–ª—å '{issue['module']}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print_success(f"{rel_path} - –∏–º–ø–æ—Ä—Ç—ã OK ({len(result['imports'])} –∏–º–ø–æ—Ä—Ç–æ–≤)")
    
    # –ò—Ç–æ–≥–∏
    print_header("üìä –ò–¢–û–ì–ò")
    
    print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(results)}")
    print(f"–í—Å–µ–≥–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {sum(len(r['imports']) for r in results)}")
    print(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {total_issues}")
    
    if total_issues == 0:
        print(f"\n{Colors.GREEN}‚úÖ –í–°–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –ö–û–†–†–ï–ö–¢–ù–´!{Colors.END}\n")
    else:
        print(f"\n{Colors.YELLOW}‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° –ò–ú–ü–û–†–¢–ê–ú–ò{Colors.END}")
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("  1. –û–±–Ω–æ–≤–∏—Ç–µ –∏–º–ø–æ—Ä—Ç—ã –≤ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö")
        print("  2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤–Ω—É—Ç—Ä–∏ –ø–∞–∫–µ—Ç–∞")
        print("  3. –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø—É—Ç—å –∫ sys.path –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞")
        print("\n–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
        print("  # –ë–´–õ–û:")
        print("  import user_manager")
        print("\n  # –°–¢–ê–õ–û (–µ—Å–ª–∏ –≤ bot/):")
        print("  from bot import user_manager")
        print("\n  # –ò–õ–ò (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç):")
        print("  from . import user_manager")
        print()
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
    print("\nüìÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º:")
    for directory in directories:
        dir_files = [r for r in results if directory in r['path']]
        dir_issues = sum(len(r['issues']) for r in dir_files)
        
        if dir_files:
            status = f"{Colors.GREEN}‚úì{Colors.END}" if dir_issues == 0 else f"{Colors.RED}‚úó{Colors.END}"
            print(f"  {status} {directory}/: {len(dir_files)} —Ñ–∞–π–ª–æ–≤, {dir_issues} –ø—Ä–æ–±–ª–µ–º")
    
    return 0 if total_issues == 0 else 1

if __name__ == "__main__":
    sys.exit(main())
