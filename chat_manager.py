# chat_manager.py

import json
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import load_data, DATA_FILE, USERS_FILE

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —á–∞—Ç–∞ –ø–æ –î–°–ï
# {admin_user_id: {'state': 'waiting_for_dse'/'waiting_for_user_selection'/'waiting_for_confirmation', 'dse': '...', 'candidates': [], 'selected_candidate': {...}}}
dse_chat_states = {}
# active_chats —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Å–ª–æ–≤–∞—Ä–µ–º —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
# {user1_id: {'partner_id': user2_id, 'status': 'active'/'paused'}, user2_id: {'partner_id': user1_id, 'status': 'active'/'paused'}}
active_chats = {}


def get_users_data():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return {}
    return {}


def get_dse_records_by_dse_value(dse_value: str):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π (—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö) –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –î–°–ï.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤–∏–¥–∞:
    [{'user_id': '...', 'dse': '...', 'problem_type': '...', 'description': '...'}, ...]
    """
    all_bot_data = load_data(DATA_FILE)
    matching_records = []

    # all_bot_data - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å {user_id: [record1, record2, ...]}
    for user_id, user_records in all_bot_data.items():
        if isinstance(user_records, list):
            for record in user_records:
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä –∏ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
                if record.get('dse', '').strip().lower() == dse_value.strip().lower():
                    record_copy = record.copy()
                    record_copy['user_id'] = user_id  # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–ø–∏—Å—å
                    matching_records.append(record_copy)

    return matching_records


async def initiate_dse_chat_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞ –ø–æ –î–°–ï. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä –î–°–ï."""
    user = update.effective_user
    user_id = str(user.id)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–∞—Ç–∞ –ø–æ –î–°–ï
    dse_chat_states[user_id] = {'state': 'waiting_for_dse', 'dse': None, 'candidates': []}

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –î–°–ï
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å (–∏–∑ callback_query –∏–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
    if update.callback_query:
        await update.callback_query.edit_message_text("üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –î–°–ï –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    elif update.message:
        await update.message.reply_text("üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –î–°–ï –¥–ª—è –ø–æ–∏—Å–∫–∞:")

    print(f"üí¨ {user.first_name} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ —á–∞—Ç–∞ –ø–æ –î–°–ï.")


async def handle_dse_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –î–°–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    user = update.effective_user
    user_id = str(user.id)
    dse_value = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∏—Å–∫–∞ –î–°–ï
    if user_id not in dse_chat_states or dse_chat_states[user_id]['state'] != 'waiting_for_dse':
        # –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ª–∏ –æ–Ω —á–∞—Ç–µ
        if user_id in active_chats and active_chats[user_id].get('status') == 'active':
            await handle_chat_message(update, context)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π –î–°–ï
    dse_chat_states[user_id]['dse'] = dse_value
    dse_chat_states[user_id]['state'] = 'processing'

    # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ —Å —ç—Ç–∏–º –î–°–ï
    records = get_dse_records_by_dse_value(dse_value)

    if not records:
        del dse_chat_states[user_id]  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await update.message.reply_text(f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É –î–°–ï '{dse_value}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        print(f"üí¨ –î–ª—è {user.first_name} –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –î–°–ï '{dse_value}'.")
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —á–∞—Ç —Å —Å–∞–º–∏–º —Å–æ–±–æ–π
    candidate_records = [r for r in records if r['user_id'] != user_id]

    if not candidate_records:
        del dse_chat_states[user_id]  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await update.message.reply_text(f"‚ùå –ü–æ –î–°–ï '{dse_value}' –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞—à–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏.")
        print(f"üí¨ –î–ª—è {user.first_name} –ø–æ –î–°–ï '{dse_value}' –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    dse_chat_states[user_id]['candidates'] = candidate_records
    dse_chat_states[user_id]['state'] = 'waiting_for_user_selection'

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω
    users_data = get_users_data()

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = []
    for i, record in enumerate(candidate_records):
        candidate_user_id = record['user_id']
        candidate_user_info = users_data.get(candidate_user_id, {})
        candidate_name = candidate_user_info.get('first_name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {candidate_user_id}")

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π callback_data –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'dse_chat_select_' –∫–∞–∫ –≤ button_handler
        callback_data = f"dse_chat_select_{i}"
        button_text = f"{candidate_name} (ID: {candidate_user_id})"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="dse_chat_cancel")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(candidate_records)} –∑–∞–ø–∏—Å–µ–π –ø–æ –î–°–ï '{dse_value}'.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–≤—è–∑–∏:",
        reply_markup=reply_markup
    )
    print(f"üí¨ –î–ª—è {user.first_name} –Ω–∞–π–¥–µ–Ω–æ {len(candidate_records)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –î–°–ï '{dse_value}'.")


async def handle_dse_user_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    selecting_user = query.from_user
    selecting_user_id = str(selecting_user.id)
    callback_data = query.data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if (selecting_user_id not in dse_chat_states or
            dse_chat_states[selecting_user_id]['state'] != 'waiting_for_user_selection'):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        print(
            f"‚ùå {selecting_user.first_name} –æ—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ handle_dse_user_selection. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {dse_chat_states.get(selecting_user_id, {}).get('state', 'None')}")
        return

    if callback_data == "dse_chat_cancel":
        del dse_chat_states[selecting_user_id]
        await query.edit_message_text("‚Ü©Ô∏è –ü–æ–∏—Å–∫ —á–∞—Ç–∞ –ø–æ –î–°–ï –æ—Ç–º–µ–Ω–µ–Ω.")
        print(f"üí¨ {selecting_user.first_name} –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    try:
        # callback_data = 'dse_chat_select_{index}'
        parts = callback_data.split('_')
        if len(parts) >= 4 and parts[0] == 'dse' and parts[1] == 'chat' and parts[2] == 'select':
            index_str = parts[3]
            index = int(index_str)
        else:
            raise ValueError("Invalid callback_data format")
    except (ValueError, IndexError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data '{callback_data}': {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö –∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –ª–∏ –∏–Ω–¥–µ–∫—Å
    if (selecting_user_id not in dse_chat_states or
            'candidates' not in dse_chat_states[selecting_user_id]):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —á–∞—Ç–∞ –ø–æ –î–°–ï –∑–∞–Ω–æ–≤–æ.")
        print(f"‚ùå {selecting_user.first_name} –æ—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        return

    candidates = dse_chat_states[selecting_user_id]['candidates']
    print(f"üîç {selecting_user.first_name} –≤—ã–±—Ä–∞–ª –∏–Ω–¥–µ–∫—Å {index}. –î–æ—Å—Ç—É–ø–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(candidates)}")

    if index < 0 or index >= len(candidates):
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        print(f"‚ùå {selecting_user.first_name} –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å {index} –¥–ª—è {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
        return

    selected_record = candidates[index]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    dse_chat_states[selecting_user_id]['selected_candidate'] = selected_record
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    dse_chat_states[selecting_user_id]['state'] = 'waiting_for_confirmation'

    target_user_id = selected_record['user_id']
    dse_value = selected_record['dse']

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    users_data = get_users_data()
    target_user_info = users_data.get(target_user_id, {})
    target_name = target_user_info.get('first_name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id}")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="dse_chat_confirm")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="dse_chat_cancel_final")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å {target_name} –ø–æ –î–°–ï '{dse_value}'?",
        reply_markup=reply_markup
    )


async def handle_dse_chat_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞."""
    query = update.callback_query
    await query.answer()

    selecting_user = query.from_user
    selecting_user_id = str(selecting_user.id)
    callback_data = query.data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º 'waiting_for_confirmation'
    if (selecting_user_id not in dse_chat_states or
            dse_chat_states[selecting_user_id]['state'] != 'waiting_for_confirmation'):
        if selecting_user_id in active_chats:
            # –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–∞—Ç–µ, –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É —á–∞—Ç–∞
            await handle_chat_control(update, context)
            return
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        print(
            f"‚ùå {selecting_user.first_name} –æ—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ handle_dse_chat_confirmation. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {dse_chat_states.get(selecting_user_id, {}).get('state', 'None')}")
        return

    if callback_data == "dse_chat_cancel_final":
        del dse_chat_states[selecting_user_id]
        await query.edit_message_text("‚Ü©Ô∏è –ù–∞—á–∞–ª–æ —á–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        print(f"üí¨ {selecting_user.first_name} –æ—Ç–º–µ–Ω–∏–ª –Ω–∞—á–∞–ª–æ —á–∞—Ç–∞.")
        return

    if callback_data == "dse_chat_confirm":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç
        if ('selected_candidate' not in dse_chat_states[selecting_user_id]):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
            print(f"‚ùå {selecting_user.first_name} –æ—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –Ω–µ—Ç selected_candidate.")
            return

        selected_record = dse_chat_states[selecting_user_id]['selected_candidate']
        target_user_id = selected_record['user_id']
        dse_value = selected_record['dse']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —É–∂–µ –æ–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if selecting_user_id in active_chats and active_chats[selecting_user_id].get('status') == 'active':
            del dse_chat_states[selecting_user_id]
            await query.edit_message_text("‚ùå –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ.")
            return

        if target_user_id in active_chats and active_chats[target_user_id].get('status') == 'active':
            del dse_chat_states[selecting_user_id]
            await query.edit_message_text("‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–∞—Ç–µ.")
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'active'
        active_chats[selecting_user_id] = {'partner_id': target_user_id, 'status': 'active'}
        active_chats[target_user_id] = {'partner_id': selecting_user_id, 'status': 'active'}

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        del dse_chat_states[selecting_user_id]

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ (target_user)
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
            initiator_keyboard = get_chat_control_keyboard()
            initiator_reply_markup = InlineKeyboardMarkup(initiator_keyboard)

            await context.bot.send_message(
                chat_id=target_user_id,
                text=f"üí¨ –° –≤–∞–º–∏ —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selecting_user.first_name} –ø–æ –î–°–ï '{dse_value}'.\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä—è–º–æ –∑–¥–µ—Å—å.",
                reply_markup=initiator_reply_markup
            )
            print(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É {target_user_id} –ø–æ –î–°–ï '{dse_value}'.")
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞, –æ—Ç–º–µ–Ω—è–µ–º —á–∞—Ç
            active_chats.pop(selecting_user_id, None)
            active_chats.pop(target_user_id, None)
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ {target_user_id}: {e}")
            return

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–≤–µ—Ç—á–∏–∫–∞ (selecting_user), —á—Ç–æ —á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        responder_keyboard = get_chat_control_keyboard()
        responder_reply_markup = InlineKeyboardMarkup(responder_keyboard)

        await query.edit_message_text(
            f"‚úÖ –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ –î–°–ï '{dse_value}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=responder_reply_markup
        )
        print(f"üí¨ –ß–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–µ–∂–¥—É {selecting_user.first_name} –∏ {target_user_id} –ø–æ –î–°–ï '{dse_value}'.")


def get_chat_control_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º."""
    return [
        [InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="chat_pause")],
        [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="chat_end")]
    ]


async def handle_chat_control(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    user_id = str(user.id)
    callback_data = query.data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
    if user_id not in active_chats:
        await query.edit_message_text("‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ.", reply_markup=None)
        return

    chat_info = active_chats[user_id]
    partner_id = chat_info['partner_id']
    current_status = chat_info['status']

    if callback_data == "chat_pause":
        if current_status == 'active':
            # –°—Ç–∞–≤–∏–º —á–∞—Ç –Ω–∞ –ø–∞—É–∑—É –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            active_chats[user_id]['status'] = 'paused'
            if partner_id in active_chats:
                active_chats[partner_id]['status'] = 'paused'

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
            keyboard = [
                [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="chat_resume")],
                [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="chat_end")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text("‚è∏Ô∏è –ß–∞—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É.", reply_markup=reply_markup)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            try:
                partner_keyboard = [
                    [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="chat_resume")],
                    [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="chat_end")]
                ]
                partner_reply_markup = InlineKeyboardMarkup(partner_keyboard)
                await context.bot.send_message(
                    chat_id=partner_id,
                    text="‚è∏Ô∏è –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ—Å—Ç–∞–≤–∏–ª —á–∞—Ç –Ω–∞ –ø–∞—É–∑—É.",
                    reply_markup=partner_reply_markup
                )
            except:
                pass
            print(f"‚è∏Ô∏è –ß–∞—Ç –º–µ–∂–¥—É {user_id} –∏ {partner_id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É.")
        else:
            # –£–∂–µ –Ω–∞ –ø–∞—É–∑–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ—Å—Ç–∞–≤–∏–ª. –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏.
            keyboard = [
                [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="chat_resume")],
                [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="chat_end")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("‚è∏Ô∏è –ß–∞—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É.", reply_markup=reply_markup)

    elif callback_data == "chat_resume":
        if current_status == 'paused':
            # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            active_chats[user_id]['status'] = 'active'
            if partner_id in active_chats:
                active_chats[partner_id]['status'] = 'active'

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é
            reply_markup = InlineKeyboardMarkup(get_chat_control_keyboard())

            await query.edit_message_text("‚ñ∂Ô∏è –ß–∞—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=reply_markup)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            try:
                await context.bot.send_message(
                    chat_id=partner_id,
                    text="‚ñ∂Ô∏è –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª —á–∞—Ç.",
                    reply_markup=InlineKeyboardMarkup(get_chat_control_keyboard())
                )
            except:
                pass
            print(f"‚ñ∂Ô∏è –ß–∞—Ç –º–µ–∂–¥—É {user_id} –∏ {partner_id} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω.")
        else:
            # –£–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–∞—Ä—Ç–Ω–µ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª. –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏.
            reply_markup = InlineKeyboardMarkup(get_chat_control_keyboard())
            await query.edit_message_text("‚ñ∂Ô∏è –ß–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω.", reply_markup=reply_markup)

    elif callback_data == "chat_end":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç
        reason = "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç."
        await end_chat_for_users(user_id, partner_id, context, reason)
        await query.edit_message_text("üëã –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=None)


async def handle_chat_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞."""
    user = update.effective_user
    user_id = str(user.id)
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
    if user_id not in active_chats:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —á–∞—Ç–µ, –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —á–∞—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        return

    chat_info = active_chats[user_id]
    partner_id = chat_info['partner_id']
    status = chat_info['status']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞
    if status != 'active':
        await update.message.reply_text("‚è∏Ô∏è –ß–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–∞—É–∑–µ. –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç–µ —á–∞—Ç, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="chat_resume")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —á–∞—Ç?", reply_markup=reply_markup)
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä—É –ø–æ —á–∞—Ç—É
        await context.bot.send_message(
            chat_id=partner_id,
            text=f"üë§ {user.first_name}: {text}"
        )
        print(f"üí¨ {user.first_name} -> (—á–∞—Ç) -> {text}")
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await end_chat_for_users(user_id, partner_id, context, reason="–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        await update.message.reply_text("‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user.first_name} –∫ {partner_id}: {e}")


async def end_chat_for_users(user1_id: str, user2_id: str, context: ContextTypes.DEFAULT_TYPE,
                             reason: str = "–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.") -> None:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —á–∞—Ç –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∏—Ö.
    """
    # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
    active_chats.pop(user1_id, None)
    active_chats.pop(user2_id, None)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(chat_id=user1_id, text=f"üîö {reason}")
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(chat_id=user2_id, text=f"üîö {reason}")
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞

    print(f"üîö –ß–∞—Ç –º–µ–∂–¥—É {user1_id} –∏ {user2_id} –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")


async def end_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /endchat –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞.
    """
    user = update.effective_user
    user_id = str(user.id)

    if user_id not in active_chats:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ.")
        return

    chat_info = active_chats[user_id]
    partner_id = chat_info['partner_id']
    await end_chat_for_users(user_id, partner_id, context, reason="–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç.")
    await update.message.reply_text("üëã –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")


# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ commands.py –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é —á–∞—Ç–∞ –ø–æ –î–°–ï
async def show_chat_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —á–∞—Ç–∞ –ø–æ –î–°–ï.
    –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å.
    """
    await initiate_dse_chat_search(update, context)
