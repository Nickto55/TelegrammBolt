import json
import os

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import load_data, save_data, DATA_FILE, USERS_FILE

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º
active_chats = {}  # {user1_id: user2_id, user2_id: user1_id}
waiting_users = []  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∂–¥—É—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞


def get_users_data():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}


def get_dse_records_by_dse(dse_value):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –î–°–ï"""
    all_data = load_data(DATA_FILE)
    records = []

    for user_id, user_records in all_data.items():
        if isinstance(user_records, list):
            for record in user_records:
                if record.get('dse', '').strip().lower() == dse_value.strip().lower():
                    record_with_user = record.copy()
                    record_with_user['user_id'] = user_id
                    records.append(record_with_user)

    return records


async def start_dse_chat_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —á–∞—Ç–∞ –ø–æ –î–°–ï"""
    user = update.effective_user
    user_id = str(user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    from user_manager import has_permission
    if not has_permission(user_id, 'chat_dse'):
        await update.callback_query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á–∞—Ç–∞ –ø–æ –î–°–ï.")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –î–°–ï
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –î–°–ï:")


async def show_dse_options(update: Update, context: ContextTypes.DEFAULT_TYPE, dse_value: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–∞–Ω–Ω—ã–º –î–°–ï"""
    user = update.effective_user
    user_id = str(user.id)

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –î–°–ï
    records = get_dse_records_by_dse(dse_value)

    if not records:
        await update.callback_query.edit_message_text(f"‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å –î–°–ï: {dse_value}")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = []
    users_data = get_users_data()

    for record in records:
        target_user_id = record.get('user_id')
        target_user = users_data.get(target_user_id, {})
        target_name = target_user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        button_text = f"{target_name} (ID: {target_user_id})"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f'start_chat_{target_user_id}')])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data='back_to_main')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –î–°–ï: {dse_value}",
        reply_markup=reply_markup
    )


async def start_dse_chat(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user_id: str) -> None:
    """–ù–∞—á–∞—Ç—å —á–∞—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    user = update.effective_user
    user_id = str(user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º–∏–º —Å–æ–±–æ–π
    if user_id == target_user_id:
        await update.callback_query.edit_message_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å —Å–æ–±–æ–π.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    if user_id in active_chats:
        await update.callback_query.edit_message_text("‚ùå –£ –≤–∞—Å —É–∂–µ –∏–¥–µ—Ç —á–∞—Ç.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    if target_user_id in active_chats:
        await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–∞—Ç–µ.")
        return

    # –°–æ–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    active_chats[user_id] = target_user_id
    active_chats[target_user_id] = user_id

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"üí¨ –ù–∞—á–∞–ª—Å—è —á–∞—Ç —Å {user.first_name}."
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.callback_query.edit_message_text(
            text=f"üí¨ –ß–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å {user.first_name}!"
        )

        print(f"üí¨ –ù–∞—á–∞—Ç —á–∞—Ç –º–µ–∂–¥—É {user.first_name} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID {target_user_id}")

    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç
        await end_chat_for_user(user_id, context)
        await update.callback_query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")


async def handle_dse_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –ø–æ –î–°–ï"""
    user = update.effective_user
    user_id = str(user.id)
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
    if user_id in active_chats:
        partner_id = active_chats[user_id]

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä—É
            await context.bot.send_message(
                chat_id=partner_id,
                text=f"üë§ {user.first_name}: {text}"
            )

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            await update.message.reply_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text}")
            print(f"üí¨ {user.first_name} -> {text}")
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∑–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç
            await end_chat_for_user(user_id, context)
            await update.message.reply_text("‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
    else:
        await update.message.reply_text("üí¨ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /chat")


async def end_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç"""
    user = update.effective_user
    user_id = str(user.id)

    await end_chat_for_user(user_id, context)
    if update.message:
        await update.message.reply_text("üëã –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
    elif update.callback_query:
        await update.callback_query.edit_message_text("üëã –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")


async def end_chat_for_user(user_id: str, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in active_chats:
        partner_id = active_chats[user_id]

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        try:
            await context.bot.send_message(
                chat_id=partner_id,
                text="üëã –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç."
            )
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏

        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
        if partner_id in active_chats:
            del active_chats[partner_id]
        del active_chats[user_id]

        print(f"üîö –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")