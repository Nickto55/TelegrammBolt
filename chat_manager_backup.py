import json
import os
from collections import defaultdict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import load_data, DATA_FILE, USERS_FILE

dse_chat_states = {}
active_chats = {}


def get_users_data():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return {}
    return {}


def get_dse_records_by_dse_value(dse_value: str):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π (—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö) –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –î–°–ï.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤–∏–¥–∞:
    [{'user_id': '...', 'dse': '...', 'problem_type': '...', 'description': '...'}, ...]
    """
    all_bot_data = load_data(DATA_FILE)
    matching_records = []

    # all_bot_data - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å {user_id: [record1, record2, ...]}
    for user_id, user_records in all_bot_data.items():
        if isinstance(user_records, list):
            for record in user_records:
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä –∏ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
                if record.get('dse', '').strip().lower() == dse_value.strip().lower():
                    record_copy = record.copy()
                    record_copy['user_id'] = user_id  # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–ø–∏—Å—å
                    matching_records.append(record_copy)

    return matching_records


async def initiate_dse_chat_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞ –ø–æ –î–°–ï. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä –î–°–ï."""
    user = update.effective_user
    user_id = str(user.id)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–∞—Ç–∞ –ø–æ –î–°–ï
    dse_chat_states[user_id] = {'state': 'waiting_for_dse_input', 'dse': None, 'target_user_id': None,
                                'target_candidates': {}}

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –î–°–ï
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å (–∏–∑ callback_query –∏–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
    if update.callback_query:
        await update.callback_query.edit_message_text("üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –î–°–ï –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    elif update.message:
        await update.message.reply_text("üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –î–°–ï –¥–ª—è –ø–æ–∏—Å–∫–∞:")

    print(f"üí¨ {user.first_name} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ —á–∞—Ç–∞ –ø–æ –î–°–ï.")


async def handle_dse_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –î–°–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    user = update.effective_user
    user_id = str(user.id)
    dse_value = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∏—Å–∫–∞ –î–°–ï
    # if user_id not in dse_chat_states or dse_chat_states[user_id]['state'] != 'waiting_for_dse_input':
    #     # –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ª–∏ –æ–Ω —á–∞—Ç–µ
    #     if user_id in active_chats and active_chats[user_id].get('status') == 'active':
    #         await handle_chat_message(update, context)
    #     return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π –î–°–ï
    dse_chat_states[user_id] = {'state': 'waiting_for_dse_input', 'dse': None, 'target_user_id': None,
                                'target_candidates': {}}

    dse_chat_states[user_id]['dse'] = dse_value
    dse_chat_states[user_id]['state'] = 'processing'

    # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ —Å —ç—Ç–∏–º –î–°–ï
    records = get_dse_records_by_dse_value(dse_value)

    if not records:
        del dse_chat_states[user_id]  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await update.message.reply_text(f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É –î–°–ï '{dse_value}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        print(f"üí¨ –î–ª—è {user.first_name} –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –î–°–ï '{dse_value}'.")
        return

    # # –§–∏–ª—å—Ç—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —á–∞—Ç —Å —Å–∞–º–∏–º —Å–æ–±–æ–π
    # candidate_records = [r for r in records if r['user_id'] != user_id]
    #
    # if not candidate_records:
    #     del dse_chat_states[user_id]  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    #     await update.message.reply_text(f"‚ùå –ü–æ –î–°–ï '{dse_value}' –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞—à–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏.")
    #     print(f"üí¨ –î–ª—è {user.first_name} –ø–æ –î–°–ï '{dse_value}' –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏.")
    #     return
    candidate_records = [r for r in records]
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    users_data = get_users_data()
    grouped_records = defaultdict(list)
    for record in candidate_records:
        grouped_records[record['user_id']].append(record)

    # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    target_candidates = {}
    for target_user_id, user_records in grouped_records.items():
        target_user_info = users_data.get(target_user_id, {})
        target_name = target_user_info.get('first_name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id}")
        target_candidates[target_user_id] = {
            'records': user_records,
            'name': target_name
        }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    dse_chat_states[user_id]['target_candidates'] = target_candidates

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    if len(target_candidates) == 1:
        # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä
        single_target_user_id = list(target_candidates.keys())[0]
        dse_chat_states[user_id]['target_user_id'] = single_target_user_id
        dse_chat_states[user_id]['state'] = 'waiting_for_initiator_confirmation'
        await request_initiator_confirmation(update, context, user_id, single_target_user_id)
    else:
        # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
        dse_chat_states[user_id]['state'] = 'waiting_for_target_selection'
        await show_target_selection_menu(update, context, user_id)


async def show_target_selection_menu(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                     initiator_user_id: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∞—Ç–∞."""
    user = update.effective_user if update.effective_user else context.bot
    user_id = str(user.id) if user else initiator_user_id

    target_candidates = dse_chat_states[initiator_user_id]['target_candidates']
    dse_value = dse_chat_states[initiator_user_id]['dse']

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = []
    for target_user_id, candidate_info in target_candidates.items():
        candidate_name = candidate_info['name']
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π callback_data –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
        callback_data = f"dse_chat_select_target_{target_user_id}"
        button_text = f"{candidate_name} (ID: {target_user_id})"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="dse_chat_cancel")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(target_candidates)} –∑–∞–ø–∏—Å–µ–π –ø–æ –î–°–ï '{dse_value}' –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–≤—è–∑–∏:",
        reply_markup=reply_markup
    )
    print(f"üí¨ –î–ª—è {user.first_name} –Ω–∞–π–¥–µ–Ω–æ {len(target_candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –î–°–ï '{dse_value}'.")


async def handle_target_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    selecting_user = query.from_user
    selecting_user_id = str(selecting_user.id)
    callback_data = query.data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if (selecting_user_id not in dse_chat_states or
            dse_chat_states[selecting_user_id]['state'] != 'waiting_for_target_selection'):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        return

    if callback_data == "dse_chat_cancel":
        del dse_chat_states[selecting_user_id]
        await query.edit_message_text("‚Ü©Ô∏è –ü–æ–∏—Å–∫ —á–∞—Ç–∞ –ø–æ –î–°–ï –æ—Ç–º–µ–Ω–µ–Ω.")
        print(f"üí¨ {selecting_user.first_name} –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        _, _, _, _, target_user_id = callback_data.split('_')
    except (ValueError, IndexError):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if target_user_id not in dse_chat_states[selecting_user_id]['target_candidates']:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dse_chat_states[selecting_user_id]['target_user_id'] = target_user_id
    dse_chat_states[selecting_user_id]['state'] = 'waiting_for_initiator_confirmation'

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    await request_initiator_confirmation(update, context, selecting_user_id, target_user_id)


async def request_initiator_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE, initiator_user_id: str,
                                         target_user_id: str) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞ —É –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞."""
    dse_value = dse_chat_states[initiator_user_id]['dse']
    target_candidates = dse_chat_states[initiator_user_id]['target_candidates']
    target_name = target_candidates[target_user_id]['name']

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="dse_chat_confirm_initiator")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="dse_chat_cancel_initiator")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
    try:
        await context.bot.send_message(
            chat_id=initiator_user_id,
            text=f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å {target_name} –ø–æ –î–°–ï '{dse_value}'?\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ.",
            reply_markup=reply_markup
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É {initiator_user_id}: {e}")
        del dse_chat_states[initiator_user_id]


async def handle_initiator_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞ –æ—Ç –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞."""
    query = update.callback_query
    # await query.answer() # –£–∂–µ –≤—ã–∑–≤–∞–Ω –≤ button_handler

    print(f"üîç handle_initiator_confirmation: Called with data '{query.data}'")

    initiator_user = query.from_user
    initiator_user_id = str(initiator_user.id)
    callback_data = query.data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    print(f"üîç handle_initiator_confirmation: Checking state for {initiator_user_id}")
    if (initiator_user_id not in dse_chat_states or
            dse_chat_states[initiator_user_id]['state'] != 'waiting_for_initiator_confirmation'):
        print(f"‚ùå handle_initiator_confirmation: State mismatch for {initiator_user_id}")
        print(f"   Expected: 'waiting_for_initiator_confirmation'")
        print(f"   Actual state: {dse_chat_states.get(initiator_user_id, {}).get('state', 'NOT_FOUND')}")
        print(f"   Full state: {dse_chat_states.get(initiator_user_id, 'NOT_FOUND')}")

        # –ü—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–∞—Ç–µ?
        if initiator_user_id in active_chats:
            print(f"   User {initiator_user_id} is already in active_chats.")
            # –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–∞—Ç–µ, –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É —á–∞—Ç–∞
            # await handle_chat_control(update, context) # –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏—é
            # –õ—É—á—à–µ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ
            await query.edit_message_text("‚ùå –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ.")
            return

        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        return

    print(f"üîç handle_initiator_confirmation: Processing {callback_data} for {initiator_user_id}")

    if callback_data == "dse_chat_cancel_initiator":
        print(f"‚Ü©Ô∏è handle_initiator_confirmation: User {initiator_user_id} cancelled chat initiation.")
        if initiator_user_id in dse_chat_states:
            del dse_chat_states[initiator_user_id]
        await query.edit_message_text("‚Ü©Ô∏è –ù–∞—á–∞–ª–æ —á–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        print(f"üí¨ {initiator_user.first_name} –æ—Ç–º–µ–Ω–∏–ª –Ω–∞—á–∞–ª–æ —á–∞—Ç–∞.")
        return

    if callback_data == "dse_chat_confirm_initiator":
        print(f"‚úÖ handle_initiator_confirmation: User {initiator_user_id} confirmed chat initiation.")

        # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
        user_state = dse_chat_states.get(initiator_user_id, {})
        target_user_id = user_state.get('target_user_id')
        dse_value = user_state.get('dse')

        if not target_user_id or not dse_value:
            print(f"‚ùå handle_initiator_confirmation: Missing target_user_id or dse_value for {initiator_user_id}")
            print(f"   target_user_id: {target_user_id}")
            print(f"   dse_value: {dse_value}")
            if initiator_user_id in dse_chat_states:
                del dse_chat_states[initiator_user_id]
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
            return

        print(f"üîç handle_initiator_confirmation: Target user is {target_user_id}, DSE is '{dse_value}'")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —É–∂–µ –æ–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if initiator_user_id in active_chats and active_chats[initiator_user_id].get('status') == 'active':
            print(f"‚ùå handle_initiator_confirmation: Initiator {initiator_user_id} already in active chat.")
            if initiator_user_id in dse_chat_states:
                del dse_chat_states[initiator_user_id]
            await query.edit_message_text("‚ùå –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ.")
            return

        if target_user_id in active_chats and active_chats[target_user_id].get('status') == 'active':
            print(f"‚ùå handle_initiator_confirmation: Target {target_user_id} already in active chat.")
            if initiator_user_id in dse_chat_states:
                del dse_chat_states[initiator_user_id]
            await query.edit_message_text("‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–∞—Ç–µ.")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É –æ—Ç–≤–µ—Ç—á–∏–∫–∞
        # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ò–ù–ò–¶–ò–ê–¢–û–†–ê –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –æ—Ç–≤–µ—Ç—á–∏–∫–∞
        dse_chat_states[initiator_user_id]['state'] = 'waiting_for_responder_confirmation'
        print(
            f"üîç handle_initiator_confirmation: State changed to 'waiting_for_responder_confirmation' for {initiator_user_id}")

        await request_responder_confirmation(context, initiator_user_id, target_user_id, dse_value)
        # –°–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ request_responder_confirmation –∏–ª–∏ –ø–æ–∑–∂–µ
        await query.edit_message_text(f"‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç {target_user_id}...")


async def request_responder_confirmation(context: ContextTypes.DEFAULT_TYPE, initiator_user_id: str,
                                         target_user_id: str, dse_value: str) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞ —É –æ—Ç–≤–µ—Ç—á–∏–∫–∞."""
    print(
        f"üîç request_responder_confirmation: Called for initiator {initiator_user_id}, target {target_user_id}, DSE '{dse_value}'")

    initiator_user_info = get_users_data().get(initiator_user_id, {})
    initiator_name = initiator_user_info.get('first_name', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {initiator_user_id}")

    print(f"üîç request_responder_confirmation: Initiator name is '{initiator_name}'")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç—á–∏–∫–∞
    # –í–ê–ñ–ù–û: callback_data –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å initiator_user_id, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç—á–∏–∫ –º–æ–≥ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"dse_chat_confirm_responder_{initiator_user_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"dse_chat_cancel_responder_{initiator_user_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    print(f"üîç request_responder_confirmation: Sending confirmation request to {target_user_id}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—á–∏–∫—É
    try:
        sent_message = await context.bot.send_message(
            chat_id=target_user_id,
            text=f"üí¨ –° –≤–∞–º–∏ —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {initiator_name} –ø–æ –î–°–ï '{dse_value}'.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ —á–∞—Ç–∞.",
            reply_markup=reply_markup
        )
        print(
            f"üîî request_responder_confirmation: Confirmation request sent to {target_user_id} (message_id: {sent_message.message_id}).")

        # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
        # –ù–∞–π–¥–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
        # –ü—Ä–æ—â–µ –≤—Å–µ–≥–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
        try:
            await context.bot.send_message(
                chat_id=initiator_user_id,
                text=f"‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}. –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç..."
            )
            print(f"üîî request_responder_confirmation: Notification sent to initiator {initiator_user_id}.")
        except Exception as e:
            print(f"‚ö†Ô∏è request_responder_confirmation: Could not notify initiator {initiator_user_id}: {e}")

    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –æ—Ç–≤–µ—Ç—á–∏–∫–∞, –æ—Ç–º–µ–Ω—è–µ–º —á–∞—Ç
        print(f"‚ùå request_responder_confirmation: Failed to notify responder {target_user_id}: {e}")
        if initiator_user_id in dse_chat_states:
            del dse_chat_states[initiator_user_id]
        try:
            await context.bot.send_message(
                chat_id=initiator_user_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
            )
        except Exception as e2:
            print(f"‚ùå request_responder_confirmation: Also failed to notify initiator {initiator_user_id}: {e2}")
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—á–∏–∫–∞ {target_user_id}: {e}")



async def handle_responder_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞ –æ—Ç –æ—Ç–≤–µ—Ç—á–∏–∫–∞."""
    query = update.callback_query
    await query.answer()

    responder_user = query.from_user
    responder_user_id = str(responder_user.id)
    callback_data = query.data
    print("kjodsjdjsiljksdjhkfjkjkdsjkasdjjhashjdsfj")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –∏–∑ callback_data
    try:
        _, _, _, _, initiator_user_id = callback_data.split('_')
    except (ValueError, IndexError):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if (initiator_user_id not in dse_chat_states or
            dse_chat_states[initiator_user_id]['state'] != 'waiting_for_responder_confirmation' or
            dse_chat_states[initiator_user_id]['target_user_id'] != responder_user_id):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
        return

    if callback_data.endswith("cancel_responder_" + initiator_user_id):
        del dse_chat_states[initiator_user_id]
        await query.edit_message_text("‚Ü©Ô∏è –ù–∞—á–∞–ª–æ —á–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
        try:
            await context.bot.send_message(
                chat_id=initiator_user_id,
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—á–∞–ª–æ —á–∞—Ç–∞."
            )
        except:
            pass
        print(f"üí¨ {responder_user.first_name} –æ—Ç–∫–ª–æ–Ω–∏–ª —á–∞—Ç —Å {initiator_user_id}.")
        return

    if callback_data.endswith("confirm_responder_" + initiator_user_id):
        target_user_id = responder_user_id
        initiator_user_id = dse_chat_states[initiator_user_id][
            'target_user_id']  # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ responder_user_id

        dse_chat_states[initiator_user_id] = {'state': 'waiting_for_dse_input', 'dse': None, 'target_user_id': None,
                                    'target_candidates': {}}

        dse_value = dse_chat_states[initiator_user_id]['dse']

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'active'
        active_chats[initiator_user_id] = {'partner_id': target_user_id, 'status': 'active'}
        active_chats[target_user_id] = {'partner_id': initiator_user_id, 'status': 'active'}

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        del dse_chat_states[initiator_user_id]

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–≤–µ—Ç—á–∏–∫–∞, —á—Ç–æ —á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        responder_keyboard = get_chat_control_keyboard()
        responder_reply_markup = InlineKeyboardMarkup(responder_keyboard)

        await query.edit_message_text(
            f"‚úÖ –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ –î–°–ï '{dse_value}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=responder_reply_markup
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞, —á—Ç–æ —á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        initiator_keyboard = get_chat_control_keyboard()
        initiator_reply_markup = InlineKeyboardMarkup(initiator_keyboard)

        try:
            await context.bot.send_message(
                chat_id=initiator_user_id,
                text=f"‚úÖ –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ –î–°–ï '{dse_value}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
                reply_markup=initiator_reply_markup
            )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ {initiator_user_id}: {e}")

        print(f"üí¨ –ß–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–µ–∂–¥—É {initiator_user_id} –∏ {target_user_id} –ø–æ –î–°–ï '{dse_value}'.")


def get_chat_control_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º."""
    return [
        [InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="chat_pause")],
        [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="chat_end")]
    ]


async def handle_chat_control(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º."""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    user_id = str(user.id)
    callback_data = query.data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
    if user_id not in active_chats:
        await query.edit_message_text("‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ.", reply_markup=None)
        return

    chat_info = active_chats[user_id]
    partner_id = chat_info['partner_id']
    current_status = chat_info['status']

    if callback_data == "chat_pause":
        if current_status == 'active':
            # –°—Ç–∞–≤–∏–º —á–∞—Ç –Ω–∞ –ø–∞—É–∑—É –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            active_chats[user_id]['status'] = 'paused'
            if partner_id in active_chats:
                active_chats[partner_id]['status'] = 'paused'

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
            keyboard = [
                [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="chat_resume")],
                [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="chat_end")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text("‚è∏Ô∏è –ß–∞—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É.", reply_markup=reply_markup)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            try:
                partner_keyboard = [
                    [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="chat_resume")],
                    [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="chat_end")]
                ]
                partner_reply_markup = InlineKeyboardMarkup(partner_keyboard)
                await context.bot.send_message(
                    chat_id=partner_id,
                    text="‚è∏Ô∏è –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ—Å—Ç–∞–≤–∏–ª —á–∞—Ç –Ω–∞ –ø–∞—É–∑—É.",
                    reply_markup=partner_reply_markup
                )
            except:
                pass
            print(f"‚è∏Ô∏è –ß–∞—Ç –º–µ–∂–¥—É {user_id} –∏ {partner_id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É.")
        else:
            # –£–∂–µ –Ω–∞ –ø–∞—É–∑–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ—Å—Ç–∞–≤–∏–ª. –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏.
            keyboard = [
                [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="chat_resume")],
                [InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="chat_end")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("‚è∏Ô∏è –ß–∞—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É.", reply_markup=reply_markup)

    elif callback_data == "chat_resume":
        if current_status == 'paused':
            # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            active_chats[user_id]['status'] = 'active'
            if partner_id in active_chats:
                active_chats[partner_id]['status'] = 'active'

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é
            reply_markup = InlineKeyboardMarkup(get_chat_control_keyboard())

            await query.edit_message_text("‚ñ∂Ô∏è –ß–∞—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=reply_markup)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            try:
                await context.bot.send_message(
                    chat_id=partner_id,
                    text="‚ñ∂Ô∏è –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª —á–∞—Ç.",
                    reply_markup=InlineKeyboardMarkup(get_chat_control_keyboard())
                )
            except:
                pass
            print(f"‚ñ∂Ô∏è –ß–∞—Ç –º–µ–∂–¥—É {user_id} –∏ {partner_id} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω.")
        else:
            # –£–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–∞—Ä—Ç–Ω–µ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª. –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏.
            reply_markup = InlineKeyboardMarkup(get_chat_control_keyboard())
            await query.edit_message_text("‚ñ∂Ô∏è –ß–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω.", reply_markup=reply_markup)

    elif callback_data == "chat_end":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç
        reason = "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç."
        await end_chat_for_users(user_id, partner_id, context, reason)
        await query.edit_message_text("üëã –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=None)


async def handle_chat_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞."""
    user = update.effective_user
    user_id = str(user.id)
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
    if user_id not in active_chats:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —á–∞—Ç–µ, –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —á–∞—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        return

    chat_info = active_chats[user_id]
    partner_id = chat_info['partner_id']
    status = chat_info['status']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞
    if status != 'active':
        await update.message.reply_text("‚è∏Ô∏è –ß–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–∞—É–∑–µ. –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç–µ —á–∞—Ç, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="chat_resume")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —á–∞—Ç?", reply_markup=reply_markup)
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä—É –ø–æ —á–∞—Ç—É
        await context.bot.send_message(
            chat_id=partner_id,
            text=f"üë§ {user.first_name}: {text}"
        )
        print(f"üí¨ {user.first_name} -> (—á–∞—Ç) -> {text}")
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await end_chat_for_users(user_id, partner_id, context, reason="–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        await update.message.reply_text("‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user.first_name} –∫ {partner_id}: {e}")


async def end_chat_for_users(user1_id: str, user2_id: str, context: ContextTypes.DEFAULT_TYPE,
                             reason: str = "–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.") -> None:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —á–∞—Ç –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∏—Ö.
    """
    # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
    active_chats.pop(user1_id, None)
    active_chats.pop(user2_id, None)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(chat_id=user1_id, text=f"üîö {reason}")
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(chat_id=user2_id, text=f"üîö {reason}")
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞

    print(f"üîö –ß–∞—Ç –º–µ–∂–¥—É {user1_id} –∏ {user2_id} –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")


async def end_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /endchat –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞.
    """
    user = update.effective_user
    user_id = str(user.id)

    if user_id not in active_chats:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ.")
        return

    chat_info = active_chats[user_id]
    partner_id = chat_info['partner_id']
    await end_chat_for_users(user_id, partner_id, context, reason="–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç.")
    await update.message.reply_text("üëã –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")


# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ commands.py –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é —á–∞—Ç–∞ –ø–æ –î–°–ï
async def show_chat_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —á–∞—Ç–∞ –ø–æ –î–°–ï.
    –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å.
    """
    await initiate_dse_chat_search(update, context)
